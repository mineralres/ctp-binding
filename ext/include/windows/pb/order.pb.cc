// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProductID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MarketTimeRule_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_order_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderID_order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_order_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Order_order_2eproto;
namespace pb {
class OrderIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderID> _instance;
} _OrderID_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class OrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderList> _instance;
} _OrderList_default_instance_;
class JointOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JointOrder> _instance;
} _JointOrder_default_instance_;
class OrderLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderLink> _instance;
} _OrderLink_default_instance_;
class CancelOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelOrderRequest> _instance;
} _CancelOrderRequest_default_instance_;
class OnRtnCancelOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OnRtnCancelOrder> _instance;
} _OnRtnCancelOrder_default_instance_;
class ConditionOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConditionOrder> _instance;
} _ConditionOrder_default_instance_;
class TradeCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeCmd> _instance;
} _TradeCmd_default_instance_;
class DemoOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DemoOrder> _instance;
} _DemoOrder_default_instance_;
}  // namespace pb
static void InitDefaultsOrderID_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OrderID_default_instance_;
    new (ptr) ::pb::OrderID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OrderID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderID_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderID_order_2eproto}, {}};

static void InitDefaultsOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_Order_default_instance_;
    new (ptr) ::pb::Order();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::Order::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Order_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOrder_order_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_OrderID_order_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsOrderList_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OrderList_default_instance_;
    new (ptr) ::pb::OrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderList_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderList_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsJointOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_JointOrder_default_instance_;
    new (ptr) ::pb::JointOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::JointOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JointOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJointOrder_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsOrderLink_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OrderLink_default_instance_;
    new (ptr) ::pb::OrderLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OrderLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderLink_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderLink_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsCancelOrderRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CancelOrderRequest_default_instance_;
    new (ptr) ::pb::CancelOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CancelOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CancelOrderRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCancelOrderRequest_order_2eproto}, {
      &scc_info_OrderID_order_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsOnRtnCancelOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_OnRtnCancelOrder_default_instance_;
    new (ptr) ::pb::OnRtnCancelOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::OnRtnCancelOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OnRtnCancelOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOnRtnCancelOrder_order_2eproto}, {
      &scc_info_OrderID_order_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsConditionOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_ConditionOrder_default_instance_;
    new (ptr) ::pb::ConditionOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::ConditionOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ConditionOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConditionOrder_order_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsTradeCmd_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradeCmd_default_instance_;
    new (ptr) ::pb::TradeCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradeCmd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeCmd_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeCmd_order_2eproto}, {}};

static void InitDefaultsDemoOrder_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_DemoOrder_default_instance_;
    new (ptr) ::pb::DemoOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::DemoOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DemoOrder_order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDemoOrder_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,
      &scc_info_MarketTimeRule_common_2eproto.base,}};

void InitDefaults_order_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_OrderID_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Order_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderList_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JointOrder_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderLink_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CancelOrderRequest_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OnRtnCancelOrder_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConditionOrder_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeCmd_order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DemoOrder_order_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_order_2eproto[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_order_2eproto[10];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_order_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OrderID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OrderID, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderID, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderID, order_ref_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::Order, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, account_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, status_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, volume_traded_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, volume_canceled_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, send_order_time_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, local_order_seq_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, force_close_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, order_source_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, order_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, user_product_info_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, local_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, time_condition_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, is_pending_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, route_account_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, margin_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, product_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, token_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, traded_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, reason_comment_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, stamp_tax_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, transfer_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, account_name_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, mac_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, branch_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, branch_name_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, route_template_id_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, route_template_name_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, trading_account_type_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, debug_),
  PROTOBUF_FIELD_OFFSET(::pb::Order, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OrderList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::JointOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::JointOrder, local_order_),
  PROTOBUF_FIELD_OFFSET(::pb::JointOrder, exchange_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OrderLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OrderLink, local_),
  PROTOBUF_FIELD_OFFSET(::pb::OrderLink, upstream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, token_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, route_account_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, company_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, send_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, user_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CancelOrderRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, account_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, error_type_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, error_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, route_account_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, upstream_not_found_),
  PROTOBUF_FIELD_OFFSET(::pb::OnRtnCancelOrder, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, id_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, account_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, position_direction_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, triggered_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, triggered_time_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, price_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, trigger_condition_price_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, trigger_price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, trigger_type_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, send_order_price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, send_result_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, create_time_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, tag_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, deadline_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, stop_loss_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, ip_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, mac_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, user_name_),
  PROTOBUF_FIELD_OFFSET(::pb::ConditionOrder, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradeCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradeCmd, type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeCmd, data_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeCmd, node_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradeCmd, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, order_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, min_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, min_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, time_rule_),
  PROTOBUF_FIELD_OFFSET(::pb::DemoOrder, update_trading_day_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::OrderID)},
  { 8, -1, sizeof(::pb::Order)},
  { 66, -1, sizeof(::pb::OrderList)},
  { 72, -1, sizeof(::pb::JointOrder)},
  { 79, -1, sizeof(::pb::OrderLink)},
  { 86, -1, sizeof(::pb::CancelOrderRequest)},
  { 105, -1, sizeof(::pb::OnRtnCancelOrder)},
  { 121, -1, sizeof(::pb::ConditionOrder)},
  { 154, -1, sizeof(::pb::TradeCmd)},
  { 163, -1, sizeof(::pb::DemoOrder)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_OrderID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_Order_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_OrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_JointOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_OrderLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CancelOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_OnRtnCancelOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_ConditionOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TradeCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_DemoOrder_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_order_2eproto = {
  {}, AddDescriptors_order_2eproto, "order.proto", schemas,
  file_default_instances, TableStruct_order_2eproto::offsets,
  file_level_metadata_order_2eproto, 10, file_level_enum_descriptors_order_2eproto, file_level_service_descriptors_order_2eproto,
};

const char descriptor_table_protodef_order_2eproto[] =
  "\n\013order.proto\022\002pb\032\014common.proto\"B\n\007Order"
  "ID\022\020\n\010front_id\030\001 \001(\005\022\022\n\nsession_id\030\002 \001(\005"
  "\022\021\n\torder_ref\030\003 \001(\005\"\302\n\n\005Order\022\032\n\006symbol\030"
  "\001 \001(\0132\n.pb.Symbol\022\027\n\002id\030\002 \001(\0132\013.pb.Order"
  "ID\022\017\n\007account\030\003 \001(\t\022%\n\tdirection\030\004 \001(\0162\022"
  ".pb.OrderDirection\022\037\n\006status\030\005 \001(\0162\017.pb."
  "OrderStatus\022&\n\nprice_type\030\006 \001(\0162\022.pb.Ord"
  "erPriceType\022\023\n\013limit_price\030\007 \001(\001\022\016\n\006volu"
  "me\030\010 \001(\005\022\025\n\rvolume_traded\030\t \001(\005\022\027\n\017volum"
  "e_canceled\030\n \001(\005\022\031\n\021frozen_commission\030\013 "
  "\001(\001\022\027\n\017send_order_time\030\014 \001(\003\022\023\n\013trading_"
  "day\030\r \001(\005\022\017\n\007comment\030\016 \001(\t\022\022\n\nrequest_id"
  "\030\017 \001(\005\022\027\n\017local_order_seq\030\020 \001(\005\022,\n\020force"
  "_close_type\030\021 \001(\0162\022.pb.ForceCloseType\022.\n"
  "\021order_source_type\030\022 \001(\0162\023.pb.OrderSourc"
  "eType\022\030\n\020order_hedge_type\030\023 \001(\005\022\031\n\021user_"
  "product_info\030\024 \001(\t\022\025\n\rcurrency_type\030\025 \001("
  "\005\022#\n\016local_order_id\030\026 \001(\0132\013.pb.OrderID\022\031"
  "\n\021exchange_order_id\030\027 \001(\t\022\033\n\023time_condit"
  "ion_type\030\030 \001(\005\022\022\n\nis_pending\030\031 \001(\005\022\025\n\rro"
  "ute_account\030\032 \001(\t\022\025\n\rlocal_type_id\030\033 \001(\005"
  "\022\022\n\ncommission\030\034 \001(\001\022\016\n\006margin\030\035 \001(\001\022#\n\013"
  "offset_flag\030\036 \001(\0162\016.pb.OffsetFlag\022\022\n\nerr"
  "or_code\030\037 \001(\005\022%\n\014product_type\030  \001(\0162\017.pb"
  ".ProductType\022\030\n\020settlement_group\030! \001(\005\022\r"
  "\n\005token\030\" \001(\t\022\025\n\rtraded_amount\030# \001(\001\022\027\n\017"
  "volume_multiple\030$ \001(\005\022!\n\nproduct_id\030% \001("
  "\0132\r.pb.ProductID\022\022\n\nprice_tick\030& \001(\001\022\025\n\r"
  "frozen_margin\030\' \001(\001\022\023\n\013symbol_name\030( \001(\t"
  "\022\026\n\016reason_comment\030) \001(\t\022\021\n\tstamp_tax\030* "
  "\001(\001\022\024\n\014transfer_fee\030+ \001(\001\022\024\n\014account_nam"
  "e\030, \001(\t\022\n\n\002ip\030- \001(\t\022\013\n\003mac\030. \001(\t\022\016\n\006bran"
  "ch\030/ \001(\t\022\023\n\013branch_name\0300 \001(\t\022\031\n\021route_t"
  "emplate_id\0301 \001(\003\022\033\n\023route_template_name\030"
  "2 \001(\t\0224\n\024trading_account_type\0303 \001(\0162\026.pb"
  ".TradingAccountType\022\r\n\005debug\0304 \001(\t\022\014\n\004us"
  "er\0305 \001(\t\"$\n\tOrderList\022\027\n\004list\030\001 \003(\0132\t.pb"
  ".Order\"O\n\nJointOrder\022\036\n\013local_order\030\001 \001("
  "\0132\t.pb.Order\022!\n\016exchange_order\030\002 \001(\0132\t.p"
  "b.Order\"B\n\tOrderLink\022\030\n\005local\030\001 \001(\0132\t.pb"
  ".Order\022\033\n\010upstream\030\002 \003(\0132\t.pb.Order\"\322\002\n\022"
  "CancelOrderRequest\022\017\n\007account\030\001 \001(\t\022\035\n\010o"
  "rder_id\030\002 \001(\0132\013.pb.OrderID\022\032\n\006symbol\030\003 \001"
  "(\0132\n.pb.Symbol\022\022\n\nrequest_id\030\004 \001(\005\022\020\n\010fr"
  "ont_id\030\005 \001(\005\022\022\n\nsession_id\030\006 \001(\005\022\031\n\021exch"
  "ange_order_id\030\007 \001(\t\022\r\n\005token\030\010 \001(\t\022\025\n\rro"
  "ute_account\030\t \001(\t\022\030\n\020settlement_group\030\n "
  "\001(\005\022\017\n\007company\030\013 \001(\003\022\021\n\tsend_time\030\014 \001(\003\022"
  ")\n\tuser_type\030\r \001(\0162\026.pb.TradingAccountTy"
  "pe\022\014\n\004user\030\017 \001(\t\"\375\001\n\020OnRtnCancelOrder\022\017\n"
  "\007account\030\001 \001(\t\022\034\n\007OrderID\030\002 \001(\0132\013.pb.Ord"
  "erID\022\031\n\021exchange_order_id\030\003 \001(\t\022\032\n\006symbo"
  "l\030\004 \001(\0132\n.pb.Symbol\022\022\n\nrequest_id\030\005 \001(\005\022"
  "\022\n\nerror_type\030\006 \001(\005\022\r\n\005error\030\007 \001(\005\022\013\n\003ms"
  "g\030\010 \001(\t\022\025\n\rroute_account\030\t \001(\t\022\032\n\022upstre"
  "am_not_found\030\n \001(\010\022\014\n\004user\030F \001(\t\"\361\005\n\016Con"
  "ditionOrder\022\n\n\002id\030\001 \001(\003\022\017\n\007account\030\002 \001(\t"
  "\022\032\n\006symbol\030\003 \001(\0132\n.pb.Symbol\022.\n\022position"
  "_direction\030\004 \001(\0162\022.pb.OrderDirection\022%\n\t"
  "direction\030\005 \001(\0162\022.pb.OrderDirection\022#\n\013o"
  "ffset_flag\030\006 \001(\0162\016.pb.OffsetFlag\022\023\n\013symb"
  "ol_name\030\007 \001(\t\022\027\n\017volume_multiple\030\010 \001(\005\022!"
  "\n\nproduct_id\030\t \001(\0132\r.pb.ProductID\022\022\n\npri"
  "ce_tick\030\n \001(\001\022\021\n\ttriggered\030\013 \001(\010\022\026\n\016trig"
  "gered_time\030\014 \001(\003\022\016\n\006volume\030\r \001(\001\022\r\n\005pric"
  "e\030\016 \001(\001\022\037\n\027trigger_condition_price\030\017 \001(\001"
  "\022>\n\022trigger_price_type\030\020 \001(\0162\".pb.Condit"
  "ionOrderTriggerPriceType\0223\n\014trigger_type"
  "\030\021 \001(\0162\035.pb.ConditionOrderTriggerType\0225\n"
  "\025send_order_price_type\030\022 \001(\0162\026.pb.SendOr"
  "derPriceType\022\023\n\013send_result\030\023 \001(\t\022\023\n\013cre"
  "ate_time\030\024 \001(\003\022\013\n\003tag\030\025 \001(\t\022\020\n\010deadline\030"
  "\026 \001(\003\022\030\n\020settlement_group\030\027 \001(\005\022\021\n\tstop_"
  "loss\030\030 \001(\010\022\n\n\002ip\030\031 \001(\t\022\013\n\003mac\030\032 \001(\t\022\021\n\tu"
  "ser_name\030\033 \001(\t\022\014\n\004user\030F \001(\t\"]\n\010TradeCmd"
  "\022\036\n\004type\030\001 \001(\0162\020.pb.TradeCmdType\022\014\n\004data"
  "\030\002 \001(\014\022\017\n\007node_id\030\003 \001(\003\022\022\n\nrequest_id\030\004 "
  "\001(\003\"\337\001\n\tDemoOrder\022\030\n\005order\030\001 \001(\0132\t.pb.Or"
  "der\022\031\n\021upper_limit_price\030\002 \001(\001\022\031\n\021lower_"
  "limit_price\030\003 \001(\001\022\036\n\026min_limit_order_vol"
  "ume\030\004 \001(\005\022\037\n\027min_market_order_volume\030\005 \001"
  "(\005\022%\n\ttime_rule\030\006 \001(\0132\022.pb.MarketTimeRul"
  "e\022\032\n\022update_trading_day\030\007 \001(\005*\217\001\n\013OrderS"
  "tatus\022\013\n\007OS_DONE\020\000\022 \n\034OS_PENDING_WITH_PA"
  "RTIAL_DONE\020\001\022!\n\035OS_CANCELED_WITH_PARTIAL"
  "_DONE\020\002\022\016\n\nOS_PENDING\020\003\022\017\n\013OS_CANCELED\020\004"
  "\022\r\n\tOS_UNKOWN\020\005*c\n\016OrderPriceType\022\023\n\017OPT"
  "_LIMIT_PRICE\020\000\022\024\n\020OPT_MARKET_PRICE\020\001\022\022\n\016"
  "OPT_BEST_PRICE\020\002\022\022\n\016OPT_LAST_PRICE\020\003*t\n\n"
  "OffsetFlag\022\013\n\007OF_NONE\020\000\022\013\n\007OF_OPEN\020\001\022\014\n\010"
  "OF_CLOSE\020\002\022\022\n\016OF_FORCE_CLOSE\020\003\022\022\n\016OF_CLO"
  "SE_TODAY\020\004\022\026\n\022OF_CLOSE_YESTERDAY\020\005*+\n\016Or"
  "derDirection\022\013\n\007OD_LONG\020\000\022\014\n\010OD_SHORT\020\001*"
  "\273\001\n\016ForceCloseType\022\013\n\007FCT_NOT\020\000\022\031\n\025FCT_N"
  "OT_ENOUGH_MARGIN\020\001\022\"\n\036FCT_client_over_po"
  "sition_limit\020\002\022#\n\037FCT_broker_over_poisit"
  "ion_limit\020\003\022\021\n\rFCT_violation\020\004\022\r\n\tFCT_ot"
  "her\020\005\022\026\n\022FCT_person_deliver\020\006*\223\002\n\017OrderS"
  "ourceType\022\016\n\nOST_CLIENT\020\000\022\025\n\021OST_ADMINIS"
  "TRATOR\020\001\022\020\n\014OST_RISK_SRV\020\002\022\016\n\nOST_MOBILE"
  "\020\003\022\n\n\006OST_PC\020\004\022\032\n\026OST_SETTLEMENT_DERIVED"
  "\020\005\022\033\n\027OST_COMBINATION_DERIVED\020\006\022!\n\035OST_M"
  "ULTI_ROUTE_CLOSE_DERIVED\020\007\022\027\n\023OST_PLACEM"
  "ENT_SHARE\020\010\022\022\n\016OST_REPURCHASE\020\t\022\022\n\016OST_C"
  "TP_UPLOAD\020\n\022\016\n\nOST_UNKOWN\020\013*`\n\036Condition"
  "OrderTriggerPriceType\022\024\n\020COTPT_LAST_PRIC"
  "E\020\000\022\023\n\017COTPT_BID_PRICE\020\001\022\023\n\017COTPT_ASK_PR"
  "ICE\020\002*X\n\031ConditionOrderTriggerType\022\036\n\032CO"
  "TT_GREATER_THAN_OR_EQUAL\020\000\022\033\n\027COTT_LESS_"
  "THAN_OR_EQUAL\020\001*O\n\022SendOrderPriceType\022\020\n"
  "\014SOPT_BID_ASK\020\000\022\017\n\013SOPT_MARKET\020\001\022\026\n\022SOPT"
  "_BID_ASK_MINUS\020\002*c\n\014TradeCmdType\022\r\n\tTCT_"
  "ORDER\020\000\022\016\n\nTCT_CANCEL\020\001\022\025\n\021TCT_QUERY_BAL"
  "ANCE\020\002\022\035\n\031TCT_QUERY_POSITION_DETAIL\020\003b\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_order_2eproto = {
  false, InitDefaults_order_2eproto, 
  descriptor_table_protodef_order_2eproto,
  "order.proto", &assign_descriptors_table_order_2eproto, 4565,
};

void AddDescriptors_order_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_common_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_order_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_order_2eproto = []() { AddDescriptors_order_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[0];
}
bool OrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderPriceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[1];
}
bool OrderPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OffsetFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[2];
}
bool OffsetFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[3];
}
bool OrderDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ForceCloseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[4];
}
bool ForceCloseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderSourceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[5];
}
bool OrderSourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConditionOrderTriggerPriceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[6];
}
bool ConditionOrderTriggerPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConditionOrderTriggerType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[7];
}
bool ConditionOrderTriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SendOrderPriceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[8];
}
bool SendOrderPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradeCmdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_order_2eproto);
  return file_level_enum_descriptors_order_2eproto[9];
}
bool TradeCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OrderID::InitAsDefaultInstance() {
}
class OrderID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderID::kFrontIdFieldNumber;
const int OrderID::kSessionIdFieldNumber;
const int OrderID::kOrderRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderID::OrderID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrderID)
}
OrderID::OrderID(const OrderID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_ref_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  // @@protoc_insertion_point(copy_constructor:pb.OrderID)
}

void OrderID::SharedCtor() {
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
}

OrderID::~OrderID() {
  // @@protoc_insertion_point(destructor:pb.OrderID)
  SharedDtor();
}

void OrderID::SharedDtor() {
}

void OrderID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderID& OrderID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderID_order_2eproto.base);
  return *internal_default_instance();
}


void OrderID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 front_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 order_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_order_ref(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrderID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 front_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrderID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrderID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 front_id = 1;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->front_id(), output);
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // int32 order_ref = 3;
  if (this->order_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order_ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrderID)
}

::google::protobuf::uint8* OrderID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 front_id = 1;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->front_id(), target);
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->session_id(), target);
  }

  // int32 order_ref = 3;
  if (this->order_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order_ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrderID)
  return target;
}

size_t OrderID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OrderID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 front_id = 1;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_id());
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // int32 order_ref = 3;
  if (this->order_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OrderID)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderID* source =
      ::google::protobuf::DynamicCastToGenerated<OrderID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OrderID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OrderID)
    MergeFrom(*source);
  }
}

void OrderID::MergeFrom(const OrderID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OrderID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.order_ref() != 0) {
    set_order_ref(from.order_ref());
  }
}

void OrderID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderID::CopyFrom(const OrderID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderID::IsInitialized() const {
  return true;
}

void OrderID::Swap(OrderID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderID::InternalSwap(OrderID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(order_ref_, other->order_ref_);
}

::google::protobuf::Metadata OrderID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::pb::_Order_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_Order_default_instance_._instance.get_mutable()->id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_Order_default_instance_._instance.get_mutable()->local_order_id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_Order_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class Order::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const Order* msg);
  static const ::pb::OrderID& id(const Order* msg);
  static const ::pb::OrderID& local_order_id(const Order* msg);
  static const ::pb::ProductID& product_id(const Order* msg);
};

const ::pb::Symbol&
Order::HasBitSetters::symbol(const Order* msg) {
  return *msg->symbol_;
}
const ::pb::OrderID&
Order::HasBitSetters::id(const Order* msg) {
  return *msg->id_;
}
const ::pb::OrderID&
Order::HasBitSetters::local_order_id(const Order* msg) {
  return *msg->local_order_id_;
}
const ::pb::ProductID&
Order::HasBitSetters::product_id(const Order* msg) {
  return *msg->product_id_;
}
void Order::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void Order::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Order::kSymbolFieldNumber;
const int Order::kIdFieldNumber;
const int Order::kAccountFieldNumber;
const int Order::kDirectionFieldNumber;
const int Order::kStatusFieldNumber;
const int Order::kPriceTypeFieldNumber;
const int Order::kLimitPriceFieldNumber;
const int Order::kVolumeFieldNumber;
const int Order::kVolumeTradedFieldNumber;
const int Order::kVolumeCanceledFieldNumber;
const int Order::kFrozenCommissionFieldNumber;
const int Order::kSendOrderTimeFieldNumber;
const int Order::kTradingDayFieldNumber;
const int Order::kCommentFieldNumber;
const int Order::kRequestIdFieldNumber;
const int Order::kLocalOrderSeqFieldNumber;
const int Order::kForceCloseTypeFieldNumber;
const int Order::kOrderSourceTypeFieldNumber;
const int Order::kOrderHedgeTypeFieldNumber;
const int Order::kUserProductInfoFieldNumber;
const int Order::kCurrencyTypeFieldNumber;
const int Order::kLocalOrderIdFieldNumber;
const int Order::kExchangeOrderIdFieldNumber;
const int Order::kTimeConditionTypeFieldNumber;
const int Order::kIsPendingFieldNumber;
const int Order::kRouteAccountFieldNumber;
const int Order::kLocalTypeIdFieldNumber;
const int Order::kCommissionFieldNumber;
const int Order::kMarginFieldNumber;
const int Order::kOffsetFlagFieldNumber;
const int Order::kErrorCodeFieldNumber;
const int Order::kProductTypeFieldNumber;
const int Order::kSettlementGroupFieldNumber;
const int Order::kTokenFieldNumber;
const int Order::kTradedAmountFieldNumber;
const int Order::kVolumeMultipleFieldNumber;
const int Order::kProductIdFieldNumber;
const int Order::kPriceTickFieldNumber;
const int Order::kFrozenMarginFieldNumber;
const int Order::kSymbolNameFieldNumber;
const int Order::kReasonCommentFieldNumber;
const int Order::kStampTaxFieldNumber;
const int Order::kTransferFeeFieldNumber;
const int Order::kAccountNameFieldNumber;
const int Order::kIpFieldNumber;
const int Order::kMacFieldNumber;
const int Order::kBranchFieldNumber;
const int Order::kBranchNameFieldNumber;
const int Order::kRouteTemplateIdFieldNumber;
const int Order::kRouteTemplateNameFieldNumber;
const int Order::kTradingAccountTypeFieldNumber;
const int Order::kDebugFieldNumber;
const int Order::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Order)
}
Order::Order(const Order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_product_info().size() > 0) {
    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account().size() > 0) {
    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason_comment().size() > 0) {
    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_name().size() > 0) {
    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch().size() > 0) {
    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.branch_name().size() > 0) {
    branch_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_name_);
  }
  route_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_template_name().size() > 0) {
    route_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_template_name_);
  }
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.debug().size() > 0) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_id()) {
    id_ = new ::pb::OrderID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_local_order_id()) {
    local_order_id_ = new ::pb::OrderID(*from.local_order_id_);
  } else {
    local_order_id_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_template_id_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(route_template_id_));
  // @@protoc_insertion_point(copy_constructor:pb.Order)
}

void Order::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Order_order_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_template_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_template_id_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(route_template_id_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:pb.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_template_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete local_order_id_;
  if (this != internal_default_instance()) delete product_id_;
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Order_order_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  branch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_order_id_ != nullptr) {
    delete local_order_id_;
  }
  local_order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_template_id_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(route_template_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Order::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Order*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.OrderID id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::OrderID::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string account = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.OrderDirection direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::OrderDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OrderStatus status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::OrderStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OrderPriceType price_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_price_type(static_cast<::pb::OrderPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double limit_price = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_limit_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_traded = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_volume_traded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_volume_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double frozen_commission = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_frozen_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 send_order_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_send_order_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 trading_day = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_local_order_seq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ForceCloseType force_close_type = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_force_close_type(static_cast<::pb::ForceCloseType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OrderSourceType order_source_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_order_source_type(static_cast<::pb::OrderSourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 order_hedge_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_order_hedge_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_product_info = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.user_product_info");
        object = msg->mutable_user_product_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 currency_type = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_currency_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OrderID local_order_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::OrderID::_InternalParse;
        object = msg->mutable_local_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string exchange_order_id = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 time_condition_type = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_time_condition_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 is_pending = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_is_pending(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.route_account");
        object = msg->mutable_route_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 local_type_id = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_local_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double commission = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 225) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 233) goto handle_unusual;
        msg->set_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.OffsetFlag offset_flag = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::OffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_code = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_error_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductType product_type = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_product_type(static_cast<::pb::ProductType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 settlement_group = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_settlement_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double traded_amount = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_traded_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_margin = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_frozen_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string symbol_name = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reason_comment = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.reason_comment");
        object = msg->mutable_reason_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double stamp_tax = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_stamp_tax(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double transfer_fee = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_transfer_fee(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string account_name = 44;
      case 44: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.account_name");
        object = msg->mutable_account_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ip = 45;
      case 45: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string mac = 46;
      case 46: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.mac");
        object = msg->mutable_mac();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string branch = 47;
      case 47: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.branch");
        object = msg->mutable_branch();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string branch_name = 48;
      case 48: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.branch_name");
        object = msg->mutable_branch_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 route_template_id = 49;
      case 49: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_route_template_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_template_name = 50;
      case 50: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.route_template_name");
        object = msg->mutable_route_template_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.TradingAccountType trading_account_type = 51;
      case 51: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trading_account_type(static_cast<::pb::TradingAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string debug = 52;
      case 52: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.debug");
        object = msg->mutable_debug();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user = 53;
      case 53: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.Order.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Order)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderDirection direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::OrderDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderStatus status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::OrderStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderPriceType price_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_price_type(static_cast< ::pb::OrderPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_traded = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_traded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_order_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ForceCloseType force_close_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_force_close_type(static_cast< ::pb::ForceCloseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderSourceType order_source_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_source_type(static_cast< ::pb::OrderSourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_hedge_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_hedge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_product_info = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_product_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.user_product_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID local_order_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_condition_type = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_condition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_pending = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account().data(), static_cast<int>(this->route_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.route_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (225 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (233 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OffsetFlag offset_flag = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::OffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductType product_type = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_product_type(static_cast< ::pb::ProductType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double traded_amount = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (281 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traded_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (305 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (313 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (322 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason_comment = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.reason_comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stamp_tax = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (337 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stamp_tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double transfer_fee = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (345 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transfer_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_name = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (354 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_name().data(), static_cast<int>(this->account_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.account_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (362 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (370 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), static_cast<int>(this->mac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (378 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), static_cast<int>(this->branch().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.branch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string branch_name = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (386 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch_name().data(), static_cast<int>(this->branch_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.branch_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 route_template_id = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (392 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &route_template_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_template_name = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (402 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_template_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_template_name().data(), static_cast<int>(this->route_template_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.route_template_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.TradingAccountType trading_account_type = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (408 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trading_account_type(static_cast< ::pb::TradingAccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string debug = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (418 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.debug"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (426 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.Order.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Order)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.OrderID id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account(), output);
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // .pb.OrderStatus status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // .pb.OrderPriceType price_type = 6;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->price_type(), output);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->limit_price(), output);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->volume_traded(), output);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volume_canceled(), output);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->frozen_commission(), output);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->send_order_time(), output);
  }

  // int32 trading_day = 13;
  if (this->trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->trading_day(), output);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->comment(), output);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->request_id(), output);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->local_order_seq(), output);
  }

  // .pb.ForceCloseType force_close_type = 17;
  if (this->force_close_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->force_close_type(), output);
  }

  // .pb.OrderSourceType order_source_type = 18;
  if (this->order_source_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->order_source_type(), output);
  }

  // int32 order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->order_hedge_type(), output);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.user_product_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->user_product_info(), output);
  }

  // int32 currency_type = 21;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->currency_type(), output);
  }

  // .pb.OrderID local_order_id = 22;
  if (this->has_local_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, HasBitSetters::local_order_id(this), output);
  }

  // string exchange_order_id = 23;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->exchange_order_id(), output);
  }

  // int32 time_condition_type = 24;
  if (this->time_condition_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->time_condition_type(), output);
  }

  // int32 is_pending = 25;
  if (this->is_pending() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->is_pending(), output);
  }

  // string route_account = 26;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.route_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->route_account(), output);
  }

  // int32 local_type_id = 27;
  if (this->local_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->local_type_id(), output);
  }

  // double commission = 28;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->commission(), output);
  }

  // double margin = 29;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->margin(), output);
  }

  // .pb.OffsetFlag offset_flag = 30;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->offset_flag(), output);
  }

  // int32 error_code = 31;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->error_code(), output);
  }

  // .pb.ProductType product_type = 32;
  if (this->product_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->product_type(), output);
  }

  // int32 settlement_group = 33;
  if (this->settlement_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->settlement_group(), output);
  }

  // string token = 34;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->token(), output);
  }

  // double traded_amount = 35;
  if (this->traded_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->traded_amount(), output);
  }

  // int32 volume_multiple = 36;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 37;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 38;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->price_tick(), output);
  }

  // double frozen_margin = 39;
  if (this->frozen_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->frozen_margin(), output);
  }

  // string symbol_name = 40;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      40, this->symbol_name(), output);
  }

  // string reason_comment = 41;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.reason_comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->reason_comment(), output);
  }

  // double stamp_tax = 42;
  if (this->stamp_tax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->stamp_tax(), output);
  }

  // double transfer_fee = 43;
  if (this->transfer_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->transfer_fee(), output);
  }

  // string account_name = 44;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->account_name(), output);
  }

  // string ip = 45;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->ip(), output);
  }

  // string mac = 46;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->mac(), output);
  }

  // string branch = 47;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->branch(), output);
  }

  // string branch_name = 48;
  if (this->branch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch_name().data(), static_cast<int>(this->branch_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.branch_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->branch_name(), output);
  }

  // int64 route_template_id = 49;
  if (this->route_template_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->route_template_id(), output);
  }

  // string route_template_name = 50;
  if (this->route_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_template_name().data(), static_cast<int>(this->route_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.route_template_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->route_template_name(), output);
  }

  // .pb.TradingAccountType trading_account_type = 51;
  if (this->trading_account_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->trading_account_type(), output);
  }

  // string debug = 52;
  if (this->debug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->debug(), output);
  }

  // string user = 53;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Order)
}

::google::protobuf::uint8* Order::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.OrderID id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // .pb.OrderStatus status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // .pb.OrderPriceType price_type = 6;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->price_type(), target);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->limit_price(), target);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->volume_traded(), target);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volume_canceled(), target);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->frozen_commission(), target);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->send_order_time(), target);
  }

  // int32 trading_day = 13;
  if (this->trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->trading_day(), target);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->request_id(), target);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->local_order_seq(), target);
  }

  // .pb.ForceCloseType force_close_type = 17;
  if (this->force_close_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->force_close_type(), target);
  }

  // .pb.OrderSourceType order_source_type = 18;
  if (this->order_source_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->order_source_type(), target);
  }

  // int32 order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->order_hedge_type(), target);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.user_product_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_product_info(), target);
  }

  // int32 currency_type = 21;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->currency_type(), target);
  }

  // .pb.OrderID local_order_id = 22;
  if (this->has_local_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, HasBitSetters::local_order_id(this), target);
  }

  // string exchange_order_id = 23;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->exchange_order_id(), target);
  }

  // int32 time_condition_type = 24;
  if (this->time_condition_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->time_condition_type(), target);
  }

  // int32 is_pending = 25;
  if (this->is_pending() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->is_pending(), target);
  }

  // string route_account = 26;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.route_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->route_account(), target);
  }

  // int32 local_type_id = 27;
  if (this->local_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->local_type_id(), target);
  }

  // double commission = 28;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->commission(), target);
  }

  // double margin = 29;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->margin(), target);
  }

  // .pb.OffsetFlag offset_flag = 30;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->offset_flag(), target);
  }

  // int32 error_code = 31;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->error_code(), target);
  }

  // .pb.ProductType product_type = 32;
  if (this->product_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->product_type(), target);
  }

  // int32 settlement_group = 33;
  if (this->settlement_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->settlement_group(), target);
  }

  // string token = 34;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->token(), target);
  }

  // double traded_amount = 35;
  if (this->traded_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->traded_amount(), target);
  }

  // int32 volume_multiple = 36;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 37;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 38;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->price_tick(), target);
  }

  // double frozen_margin = 39;
  if (this->frozen_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->frozen_margin(), target);
  }

  // string symbol_name = 40;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->symbol_name(), target);
  }

  // string reason_comment = 41;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.reason_comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->reason_comment(), target);
  }

  // double stamp_tax = 42;
  if (this->stamp_tax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->stamp_tax(), target);
  }

  // double transfer_fee = 43;
  if (this->transfer_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->transfer_fee(), target);
  }

  // string account_name = 44;
  if (this->account_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_name().data(), static_cast<int>(this->account_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->account_name(), target);
  }

  // string ip = 45;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->ip(), target);
  }

  // string mac = 46;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->mac(), target);
  }

  // string branch = 47;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), static_cast<int>(this->branch().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->branch(), target);
  }

  // string branch_name = 48;
  if (this->branch_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch_name().data(), static_cast<int>(this->branch_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.branch_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->branch_name(), target);
  }

  // int64 route_template_id = 49;
  if (this->route_template_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->route_template_id(), target);
  }

  // string route_template_name = 50;
  if (this->route_template_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_template_name().data(), static_cast<int>(this->route_template_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.route_template_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->route_template_name(), target);
  }

  // .pb.TradingAccountType trading_account_type = 51;
  if (this->trading_account_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->trading_account_type(), target);
  }

  // string debug = 52;
  if (this->debug().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->debug(), target);
  }

  // string user = 53;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.Order.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Order)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_product_info());
  }

  // string exchange_order_id = 23;
  if (this->exchange_order_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account = 26;
  if (this->route_account().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account());
  }

  // string token = 34;
  if (this->token().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string symbol_name = 40;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string reason_comment = 41;
  if (this->reason_comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason_comment());
  }

  // string account_name = 44;
  if (this->account_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_name());
  }

  // string ip = 45;
  if (this->ip().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string mac = 46;
  if (this->mac().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // string branch = 47;
  if (this->branch().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // string branch_name = 48;
  if (this->branch_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch_name());
  }

  // string route_template_name = 50;
  if (this->route_template_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_template_name());
  }

  // string debug = 52;
  if (this->debug().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug());
  }

  // string user = 53;
  if (this->user().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.OrderID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .pb.OrderID local_order_id = 22;
  if (this->has_local_order_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_order_id_);
  }

  // .pb.ProductID product_id = 37;
  if (this->has_product_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // .pb.OrderDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .pb.OrderStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.OrderPriceType price_type = 6;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_traded());
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_canceled());
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    total_size += 1 + 8;
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_order_time());
  }

  // int32 trading_day = 13;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_order_seq());
  }

  // .pb.ForceCloseType force_close_type = 17;
  if (this->force_close_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->force_close_type());
  }

  // .pb.OrderSourceType order_source_type = 18;
  if (this->order_source_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_source_type());
  }

  // int32 order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_hedge_type());
  }

  // int32 currency_type = 21;
  if (this->currency_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 time_condition_type = 24;
  if (this->time_condition_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_condition_type());
  }

  // int32 is_pending = 25;
  if (this->is_pending() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_pending());
  }

  // int32 local_type_id = 27;
  if (this->local_type_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // double commission = 28;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // double margin = 29;
  if (this->margin() != 0) {
    total_size += 2 + 8;
  }

  // .pb.OffsetFlag offset_flag = 30;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  // int32 error_code = 31;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // .pb.ProductType product_type = 32;
  if (this->product_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->product_type());
  }

  // int32 settlement_group = 33;
  if (this->settlement_group() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // double traded_amount = 35;
  if (this->traded_amount() != 0) {
    total_size += 2 + 8;
  }

  // double price_tick = 38;
  if (this->price_tick() != 0) {
    total_size += 2 + 8;
  }

  // double frozen_margin = 39;
  if (this->frozen_margin() != 0) {
    total_size += 2 + 8;
  }

  // double stamp_tax = 42;
  if (this->stamp_tax() != 0) {
    total_size += 2 + 8;
  }

  // double transfer_fee = 43;
  if (this->transfer_fee() != 0) {
    total_size += 2 + 8;
  }

  // int32 volume_multiple = 36;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // .pb.TradingAccountType trading_account_type = 51;
  if (this->trading_account_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_account_type());
  }

  // int64 route_template_id = 49;
  if (this->route_template_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->route_template_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::google::protobuf::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.Order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.user_product_info().size() > 0) {

    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account().size() > 0) {

    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.reason_comment().size() > 0) {

    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.branch_name().size() > 0) {

    branch_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_name_);
  }
  if (from.route_template_name().size() > 0) {

    route_template_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_template_name_);
  }
  if (from.debug().size() > 0) {

    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_id()) {
    mutable_id()->::pb::OrderID::MergeFrom(from.id());
  }
  if (from.has_local_order_id()) {
    mutable_local_order_id()->::pb::OrderID::MergeFrom(from.local_order_id());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.limit_price() != 0) {
    set_limit_price(from.limit_price());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.volume_traded() != 0) {
    set_volume_traded(from.volume_traded());
  }
  if (from.volume_canceled() != 0) {
    set_volume_canceled(from.volume_canceled());
  }
  if (from.frozen_commission() != 0) {
    set_frozen_commission(from.frozen_commission());
  }
  if (from.send_order_time() != 0) {
    set_send_order_time(from.send_order_time());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.local_order_seq() != 0) {
    set_local_order_seq(from.local_order_seq());
  }
  if (from.force_close_type() != 0) {
    set_force_close_type(from.force_close_type());
  }
  if (from.order_source_type() != 0) {
    set_order_source_type(from.order_source_type());
  }
  if (from.order_hedge_type() != 0) {
    set_order_hedge_type(from.order_hedge_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.time_condition_type() != 0) {
    set_time_condition_type(from.time_condition_type());
  }
  if (from.is_pending() != 0) {
    set_is_pending(from.is_pending());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.product_type() != 0) {
    set_product_type(from.product_type());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.traded_amount() != 0) {
    set_traded_amount(from.traded_amount());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.frozen_margin() != 0) {
    set_frozen_margin(from.frozen_margin());
  }
  if (from.stamp_tax() != 0) {
    set_stamp_tax(from.stamp_tax());
  }
  if (from.transfer_fee() != 0) {
    set_transfer_fee(from.transfer_fee());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (from.trading_account_type() != 0) {
    set_trading_account_type(from.trading_account_type());
  }
  if (from.route_template_id() != 0) {
    set_route_template_id(from.route_template_id());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_product_info_.Swap(&other->user_product_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_.Swap(&other->route_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_comment_.Swap(&other->reason_comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_name_.Swap(&other->account_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_.Swap(&other->branch_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  branch_name_.Swap(&other->branch_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_template_name_.Swap(&other->route_template_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  debug_.Swap(&other->debug_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(id_, other->id_);
  swap(local_order_id_, other->local_order_id_);
  swap(product_id_, other->product_id_);
  swap(direction_, other->direction_);
  swap(status_, other->status_);
  swap(limit_price_, other->limit_price_);
  swap(price_type_, other->price_type_);
  swap(volume_, other->volume_);
  swap(volume_traded_, other->volume_traded_);
  swap(volume_canceled_, other->volume_canceled_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(send_order_time_, other->send_order_time_);
  swap(trading_day_, other->trading_day_);
  swap(request_id_, other->request_id_);
  swap(local_order_seq_, other->local_order_seq_);
  swap(force_close_type_, other->force_close_type_);
  swap(order_source_type_, other->order_source_type_);
  swap(order_hedge_type_, other->order_hedge_type_);
  swap(currency_type_, other->currency_type_);
  swap(time_condition_type_, other->time_condition_type_);
  swap(is_pending_, other->is_pending_);
  swap(local_type_id_, other->local_type_id_);
  swap(commission_, other->commission_);
  swap(margin_, other->margin_);
  swap(offset_flag_, other->offset_flag_);
  swap(error_code_, other->error_code_);
  swap(product_type_, other->product_type_);
  swap(settlement_group_, other->settlement_group_);
  swap(traded_amount_, other->traded_amount_);
  swap(price_tick_, other->price_tick_);
  swap(frozen_margin_, other->frozen_margin_);
  swap(stamp_tax_, other->stamp_tax_);
  swap(transfer_fee_, other->transfer_fee_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(trading_account_type_, other->trading_account_type_);
  swap(route_template_id_, other->route_template_id_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderList::InitAsDefaultInstance() {
}
class OrderList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderList::OrderList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrderList)
}
OrderList::OrderList(const OrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.OrderList)
}

void OrderList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderList_order_2eproto.base);
}

OrderList::~OrderList() {
  // @@protoc_insertion_point(destructor:pb.OrderList)
  SharedDtor();
}

void OrderList::SharedDtor() {
}

void OrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderList& OrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderList_order_2eproto.base);
  return *internal_default_instance();
}


void OrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.Order list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Order::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.Order list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrderList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Order list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrderList)
}

::google::protobuf::uint8* OrderList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.Order list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrderList)
  return target;
}

size_t OrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Order list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderList* source =
      ::google::protobuf::DynamicCastToGenerated<OrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OrderList)
    MergeFrom(*source);
  }
}

void OrderList::MergeFrom(const OrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void OrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderList::CopyFrom(const OrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderList::IsInitialized() const {
  return true;
}

void OrderList::Swap(OrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderList::InternalSwap(OrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata OrderList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void JointOrder::InitAsDefaultInstance() {
  ::pb::_JointOrder_default_instance_._instance.get_mutable()->local_order_ = const_cast< ::pb::Order*>(
      ::pb::Order::internal_default_instance());
  ::pb::_JointOrder_default_instance_._instance.get_mutable()->exchange_order_ = const_cast< ::pb::Order*>(
      ::pb::Order::internal_default_instance());
}
class JointOrder::HasBitSetters {
 public:
  static const ::pb::Order& local_order(const JointOrder* msg);
  static const ::pb::Order& exchange_order(const JointOrder* msg);
};

const ::pb::Order&
JointOrder::HasBitSetters::local_order(const JointOrder* msg) {
  return *msg->local_order_;
}
const ::pb::Order&
JointOrder::HasBitSetters::exchange_order(const JointOrder* msg) {
  return *msg->exchange_order_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointOrder::kLocalOrderFieldNumber;
const int JointOrder::kExchangeOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointOrder::JointOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.JointOrder)
}
JointOrder::JointOrder(const JointOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_order()) {
    local_order_ = new ::pb::Order(*from.local_order_);
  } else {
    local_order_ = nullptr;
  }
  if (from.has_exchange_order()) {
    exchange_order_ = new ::pb::Order(*from.exchange_order_);
  } else {
    exchange_order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.JointOrder)
}

void JointOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_JointOrder_order_2eproto.base);
  ::memset(&local_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_order_) -
      reinterpret_cast<char*>(&local_order_)) + sizeof(exchange_order_));
}

JointOrder::~JointOrder() {
  // @@protoc_insertion_point(destructor:pb.JointOrder)
  SharedDtor();
}

void JointOrder::SharedDtor() {
  if (this != internal_default_instance()) delete local_order_;
  if (this != internal_default_instance()) delete exchange_order_;
}

void JointOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointOrder& JointOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_JointOrder_order_2eproto.base);
  return *internal_default_instance();
}


void JointOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.JointOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_order_ != nullptr) {
    delete local_order_;
  }
  local_order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && exchange_order_ != nullptr) {
    delete exchange_order_;
  }
  exchange_order_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JointOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<JointOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Order local_order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Order::_InternalParse;
        object = msg->mutable_local_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Order exchange_order = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Order::_InternalParse;
        object = msg->mutable_exchange_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JointOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.JointOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Order local_order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Order exchange_order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exchange_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.JointOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.JointOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JointOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.JointOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order local_order = 1;
  if (this->has_local_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local_order(this), output);
  }

  // .pb.Order exchange_order = 2;
  if (this->has_exchange_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::exchange_order(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.JointOrder)
}

::google::protobuf::uint8* JointOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.JointOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order local_order = 1;
  if (this->has_local_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local_order(this), target);
  }

  // .pb.Order exchange_order = 2;
  if (this->has_exchange_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::exchange_order(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.JointOrder)
  return target;
}

size_t JointOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.JointOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Order local_order = 1;
  if (this->has_local_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_order_);
  }

  // .pb.Order exchange_order = 2;
  if (this->has_exchange_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exchange_order_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.JointOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const JointOrder* source =
      ::google::protobuf::DynamicCastToGenerated<JointOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.JointOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.JointOrder)
    MergeFrom(*source);
  }
}

void JointOrder::MergeFrom(const JointOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.JointOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_order()) {
    mutable_local_order()->::pb::Order::MergeFrom(from.local_order());
  }
  if (from.has_exchange_order()) {
    mutable_exchange_order()->::pb::Order::MergeFrom(from.exchange_order());
  }
}

void JointOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.JointOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointOrder::CopyFrom(const JointOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.JointOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointOrder::IsInitialized() const {
  return true;
}

void JointOrder::Swap(JointOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointOrder::InternalSwap(JointOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_order_, other->local_order_);
  swap(exchange_order_, other->exchange_order_);
}

::google::protobuf::Metadata JointOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OrderLink::InitAsDefaultInstance() {
  ::pb::_OrderLink_default_instance_._instance.get_mutable()->local_ = const_cast< ::pb::Order*>(
      ::pb::Order::internal_default_instance());
}
class OrderLink::HasBitSetters {
 public:
  static const ::pb::Order& local(const OrderLink* msg);
};

const ::pb::Order&
OrderLink::HasBitSetters::local(const OrderLink* msg) {
  return *msg->local_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderLink::kLocalFieldNumber;
const int OrderLink::kUpstreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderLink::OrderLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OrderLink)
}
OrderLink::OrderLink(const OrderLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      upstream_(from.upstream_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local()) {
    local_ = new ::pb::Order(*from.local_);
  } else {
    local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.OrderLink)
}

void OrderLink::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderLink_order_2eproto.base);
  local_ = nullptr;
}

OrderLink::~OrderLink() {
  // @@protoc_insertion_point(destructor:pb.OrderLink)
  SharedDtor();
}

void OrderLink::SharedDtor() {
  if (this != internal_default_instance()) delete local_;
}

void OrderLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderLink& OrderLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderLink_order_2eproto.base);
  return *internal_default_instance();
}


void OrderLink::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upstream_.Clear();
  if (GetArenaNoVirtual() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Order local = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Order::_InternalParse;
        object = msg->mutable_local();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.Order upstream = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::Order::_InternalParse;
          object = msg->add_upstream();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OrderLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Order local = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.Order upstream = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_upstream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OrderLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OrderLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order local = 1;
  if (this->has_local()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local(this), output);
  }

  // repeated .pb.Order upstream = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upstream_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->upstream(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OrderLink)
}

::google::protobuf::uint8* OrderLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order local = 1;
  if (this->has_local()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local(this), target);
  }

  // repeated .pb.Order upstream = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upstream_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->upstream(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OrderLink)
  return target;
}

size_t OrderLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OrderLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.Order upstream = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->upstream_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->upstream(static_cast<int>(i)));
    }
  }

  // .pb.Order local = 1;
  if (this->has_local()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderLink* source =
      ::google::protobuf::DynamicCastToGenerated<OrderLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OrderLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OrderLink)
    MergeFrom(*source);
  }
}

void OrderLink::MergeFrom(const OrderLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  upstream_.MergeFrom(from.upstream_);
  if (from.has_local()) {
    mutable_local()->::pb::Order::MergeFrom(from.local());
  }
}

void OrderLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderLink::CopyFrom(const OrderLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderLink::IsInitialized() const {
  return true;
}

void OrderLink::Swap(OrderLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderLink::InternalSwap(OrderLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&upstream_)->InternalSwap(CastToBase(&other->upstream_));
  swap(local_, other->local_);
}

::google::protobuf::Metadata OrderLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CancelOrderRequest::InitAsDefaultInstance() {
  ::pb::_CancelOrderRequest_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_CancelOrderRequest_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class CancelOrderRequest::HasBitSetters {
 public:
  static const ::pb::OrderID& order_id(const CancelOrderRequest* msg);
  static const ::pb::Symbol& symbol(const CancelOrderRequest* msg);
};

const ::pb::OrderID&
CancelOrderRequest::HasBitSetters::order_id(const CancelOrderRequest* msg) {
  return *msg->order_id_;
}
const ::pb::Symbol&
CancelOrderRequest::HasBitSetters::symbol(const CancelOrderRequest* msg) {
  return *msg->symbol_;
}
void CancelOrderRequest::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelOrderRequest::kAccountFieldNumber;
const int CancelOrderRequest::kOrderIdFieldNumber;
const int CancelOrderRequest::kSymbolFieldNumber;
const int CancelOrderRequest::kRequestIdFieldNumber;
const int CancelOrderRequest::kFrontIdFieldNumber;
const int CancelOrderRequest::kSessionIdFieldNumber;
const int CancelOrderRequest::kExchangeOrderIdFieldNumber;
const int CancelOrderRequest::kTokenFieldNumber;
const int CancelOrderRequest::kRouteAccountFieldNumber;
const int CancelOrderRequest::kSettlementGroupFieldNumber;
const int CancelOrderRequest::kCompanyFieldNumber;
const int CancelOrderRequest::kSendTimeFieldNumber;
const int CancelOrderRequest::kUserTypeFieldNumber;
const int CancelOrderRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelOrderRequest::CancelOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CancelOrderRequest)
}
CancelOrderRequest::CancelOrderRequest(const CancelOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account().size() > 0) {
    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::OrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_type_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(user_type_));
  // @@protoc_insertion_point(copy_constructor:pb.CancelOrderRequest)
}

void CancelOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CancelOrderRequest_order_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(user_type_));
}

CancelOrderRequest::~CancelOrderRequest() {
  // @@protoc_insertion_point(destructor:pb.CancelOrderRequest)
  SharedDtor();
}

void CancelOrderRequest::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_id_;
  if (this != internal_default_instance()) delete symbol_;
}

void CancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOrderRequest& CancelOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CancelOrderRequest_order_2eproto.base);
  return *internal_default_instance();
}


void CancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_type_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(user_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CancelOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CancelOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CancelOrderRequest.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.OrderID order_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::OrderID::_InternalParse;
        object = msg->mutable_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 front_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 session_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CancelOrderRequest.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CancelOrderRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CancelOrderRequest.route_account");
        object = msg->mutable_route_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 settlement_group = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_settlement_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 company = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_company(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 send_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_send_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.TradingAccountType user_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_user_type(static_cast<::pb::TradingAccountType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CancelOrderRequest.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CancelOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CancelOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CancelOrderRequest.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CancelOrderRequest.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CancelOrderRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account().data(), static_cast<int>(this->route_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CancelOrderRequest.route_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 company = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.TradingAccountType user_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_type(static_cast< ::pb::TradingAccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CancelOrderRequest.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CancelOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CancelOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CancelOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // .pb.OrderID order_id = 2;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::order_id(this), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_id(), output);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->front_id(), output);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->session_id(), output);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchange_order_id(), output);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->token(), output);
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.route_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account(), output);
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->settlement_group(), output);
  }

  // int64 company = 11;
  if (this->company() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->company(), output);
  }

  // int64 send_time = 12;
  if (this->send_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->send_time(), output);
  }

  // .pb.TradingAccountType user_type = 13;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->user_type(), output);
  }

  // string user = 15;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CancelOrderRequest)
}

::google::protobuf::uint8* CancelOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // .pb.OrderID order_id = 2;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::order_id(this), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_id(), target);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->front_id(), target);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->session_id(), target);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchange_order_id(), target);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.route_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account(), target);
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->settlement_group(), target);
  }

  // int64 company = 11;
  if (this->company() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->company(), target);
  }

  // int64 send_time = 12;
  if (this->send_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->send_time(), target);
  }

  // .pb.TradingAccountType user_type = 13;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->user_type(), target);
  }

  // string user = 15;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CancelOrderRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CancelOrderRequest)
  return target;
}

size_t CancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CancelOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string token = 8;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account());
  }

  // string user = 15;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .pb.OrderID order_id = 2;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_id());
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // int32 settlement_group = 10;
  if (this->settlement_group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // int64 company = 11;
  if (this->company() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->company());
  }

  // int64 send_time = 12;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_time());
  }

  // .pb.TradingAccountType user_type = 13;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CancelOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CancelOrderRequest)
    MergeFrom(*source);
  }
}

void CancelOrderRequest::MergeFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.route_account().size() > 0) {

    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::OrderID::MergeFrom(from.order_id());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.company() != 0) {
    set_company(from.company());
  }
  if (from.send_time() != 0) {
    set_send_time(from.send_time());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
}

void CancelOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOrderRequest::CopyFrom(const CancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOrderRequest::IsInitialized() const {
  return true;
}

void CancelOrderRequest::Swap(CancelOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelOrderRequest::InternalSwap(CancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_.Swap(&other->route_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_id_, other->order_id_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(settlement_group_, other->settlement_group_);
  swap(company_, other->company_);
  swap(send_time_, other->send_time_);
  swap(user_type_, other->user_type_);
}

::google::protobuf::Metadata CancelOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OnRtnCancelOrder::InitAsDefaultInstance() {
  ::pb::_OnRtnCancelOrder_default_instance_._instance.get_mutable()->orderid_ = const_cast< ::pb::OrderID*>(
      ::pb::OrderID::internal_default_instance());
  ::pb::_OnRtnCancelOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class OnRtnCancelOrder::HasBitSetters {
 public:
  static const ::pb::OrderID& orderid(const OnRtnCancelOrder* msg);
  static const ::pb::Symbol& symbol(const OnRtnCancelOrder* msg);
};

const ::pb::OrderID&
OnRtnCancelOrder::HasBitSetters::orderid(const OnRtnCancelOrder* msg) {
  return *msg->orderid_;
}
const ::pb::Symbol&
OnRtnCancelOrder::HasBitSetters::symbol(const OnRtnCancelOrder* msg) {
  return *msg->symbol_;
}
void OnRtnCancelOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OnRtnCancelOrder::kAccountFieldNumber;
const int OnRtnCancelOrder::kOrderIDFieldNumber;
const int OnRtnCancelOrder::kExchangeOrderIdFieldNumber;
const int OnRtnCancelOrder::kSymbolFieldNumber;
const int OnRtnCancelOrder::kRequestIdFieldNumber;
const int OnRtnCancelOrder::kErrorTypeFieldNumber;
const int OnRtnCancelOrder::kErrorFieldNumber;
const int OnRtnCancelOrder::kMsgFieldNumber;
const int OnRtnCancelOrder::kRouteAccountFieldNumber;
const int OnRtnCancelOrder::kUpstreamNotFoundFieldNumber;
const int OnRtnCancelOrder::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OnRtnCancelOrder::OnRtnCancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.OnRtnCancelOrder)
}
OnRtnCancelOrder::OnRtnCancelOrder(const OnRtnCancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account().size() > 0) {
    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_orderid()) {
    orderid_ = new ::pb::OrderID(*from.orderid_);
  } else {
    orderid_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upstream_not_found_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(upstream_not_found_));
  // @@protoc_insertion_point(copy_constructor:pb.OnRtnCancelOrder)
}

void OnRtnCancelOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OnRtnCancelOrder_order_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upstream_not_found_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(upstream_not_found_));
}

OnRtnCancelOrder::~OnRtnCancelOrder() {
  // @@protoc_insertion_point(destructor:pb.OnRtnCancelOrder)
  SharedDtor();
}

void OnRtnCancelOrder::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orderid_;
  if (this != internal_default_instance()) delete symbol_;
}

void OnRtnCancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnRtnCancelOrder& OnRtnCancelOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OnRtnCancelOrder_order_2eproto.base);
  return *internal_default_instance();
}


void OnRtnCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.OnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && orderid_ != nullptr) {
    delete orderid_;
  }
  orderid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upstream_not_found_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(upstream_not_found_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OnRtnCancelOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OnRtnCancelOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.OnRtnCancelOrder.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.OrderID OrderID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::OrderID::_InternalParse;
        object = msg->mutable_orderid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string exchange_order_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.OnRtnCancelOrder.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_error_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string msg = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.OnRtnCancelOrder.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.OnRtnCancelOrder.route_account");
        object = msg->mutable_route_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool upstream_not_found = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_upstream_not_found(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.OnRtnCancelOrder.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OnRtnCancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.OnRtnCancelOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.OnRtnCancelOrder.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderID OrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_orderid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.OnRtnCancelOrder.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.OnRtnCancelOrder.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account().data(), static_cast<int>(this->route_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.OnRtnCancelOrder.route_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool upstream_not_found = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upstream_not_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (562 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.OnRtnCancelOrder.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.OnRtnCancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.OnRtnCancelOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OnRtnCancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.OnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // .pb.OrderID OrderID = 2;
  if (this->has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::orderid(this), output);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_order_id(), output);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_id(), output);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->error_type(), output);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->error(), output);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.route_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account(), output);
  }

  // bool upstream_not_found = 10;
  if (this->upstream_not_found() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->upstream_not_found(), output);
  }

  // string user = 70;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.OnRtnCancelOrder)
}

::google::protobuf::uint8* OnRtnCancelOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.OnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // .pb.OrderID OrderID = 2;
  if (this->has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::orderid(this), target);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_order_id(), target);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_id(), target);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->error_type(), target);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->error(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account().data(), static_cast<int>(this->route_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.route_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account(), target);
  }

  // bool upstream_not_found = 10;
  if (this->upstream_not_found() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->upstream_not_found(), target);
  }

  // string user = 70;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.OnRtnCancelOrder.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.OnRtnCancelOrder)
  return target;
}

size_t OnRtnCancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.OnRtnCancelOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string route_account = 9;
  if (this->route_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account());
  }

  // string user = 70;
  if (this->user().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .pb.OrderID OrderID = 2;
  if (this->has_orderid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *orderid_);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_type());
  }

  // int32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  // bool upstream_not_found = 10;
  if (this->upstream_not_found() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnRtnCancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.OnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const OnRtnCancelOrder* source =
      ::google::protobuf::DynamicCastToGenerated<OnRtnCancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.OnRtnCancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.OnRtnCancelOrder)
    MergeFrom(*source);
  }
}

void OnRtnCancelOrder::MergeFrom(const OnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.OnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.route_account().size() > 0) {

    route_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_orderid()) {
    mutable_orderid()->::pb::OrderID::MergeFrom(from.orderid());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.error_type() != 0) {
    set_error_type(from.error_type());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
  if (from.upstream_not_found() != 0) {
    set_upstream_not_found(from.upstream_not_found());
  }
}

void OnRtnCancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.OnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnRtnCancelOrder::CopyFrom(const OnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.OnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnRtnCancelOrder::IsInitialized() const {
  return true;
}

void OnRtnCancelOrder::Swap(OnRtnCancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OnRtnCancelOrder::InternalSwap(OnRtnCancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_.Swap(&other->route_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orderid_, other->orderid_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(error_type_, other->error_type_);
  swap(error_, other->error_);
  swap(upstream_not_found_, other->upstream_not_found_);
}

::google::protobuf::Metadata OnRtnCancelOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ConditionOrder::InitAsDefaultInstance() {
  ::pb::_ConditionOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_ConditionOrder_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class ConditionOrder::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const ConditionOrder* msg);
  static const ::pb::ProductID& product_id(const ConditionOrder* msg);
};

const ::pb::Symbol&
ConditionOrder::HasBitSetters::symbol(const ConditionOrder* msg) {
  return *msg->symbol_;
}
const ::pb::ProductID&
ConditionOrder::HasBitSetters::product_id(const ConditionOrder* msg) {
  return *msg->product_id_;
}
void ConditionOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void ConditionOrder::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionOrder::kIdFieldNumber;
const int ConditionOrder::kAccountFieldNumber;
const int ConditionOrder::kSymbolFieldNumber;
const int ConditionOrder::kPositionDirectionFieldNumber;
const int ConditionOrder::kDirectionFieldNumber;
const int ConditionOrder::kOffsetFlagFieldNumber;
const int ConditionOrder::kSymbolNameFieldNumber;
const int ConditionOrder::kVolumeMultipleFieldNumber;
const int ConditionOrder::kProductIdFieldNumber;
const int ConditionOrder::kPriceTickFieldNumber;
const int ConditionOrder::kTriggeredFieldNumber;
const int ConditionOrder::kTriggeredTimeFieldNumber;
const int ConditionOrder::kVolumeFieldNumber;
const int ConditionOrder::kPriceFieldNumber;
const int ConditionOrder::kTriggerConditionPriceFieldNumber;
const int ConditionOrder::kTriggerPriceTypeFieldNumber;
const int ConditionOrder::kTriggerTypeFieldNumber;
const int ConditionOrder::kSendOrderPriceTypeFieldNumber;
const int ConditionOrder::kSendResultFieldNumber;
const int ConditionOrder::kCreateTimeFieldNumber;
const int ConditionOrder::kTagFieldNumber;
const int ConditionOrder::kDeadlineFieldNumber;
const int ConditionOrder::kSettlementGroupFieldNumber;
const int ConditionOrder::kStopLossFieldNumber;
const int ConditionOrder::kIpFieldNumber;
const int ConditionOrder::kMacFieldNumber;
const int ConditionOrder::kUserNameFieldNumber;
const int ConditionOrder::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionOrder::ConditionOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ConditionOrder)
}
ConditionOrder::ConditionOrder(const ConditionOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  send_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.send_result().size() > 0) {
    send_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_result_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&settlement_group_) -
    reinterpret_cast<char*>(&id_)) + sizeof(settlement_group_));
  // @@protoc_insertion_point(copy_constructor:pb.ConditionOrder)
}

void ConditionOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ConditionOrder_order_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settlement_group_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(settlement_group_));
}

ConditionOrder::~ConditionOrder() {
  // @@protoc_insertion_point(destructor:pb.ConditionOrder)
  SharedDtor();
}

void ConditionOrder::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete product_id_;
}

void ConditionOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionOrder& ConditionOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ConditionOrder_order_2eproto.base);
  return *internal_default_instance();
}


void ConditionOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.ConditionOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settlement_group_) -
      reinterpret_cast<char*>(&id_)) + sizeof(settlement_group_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ConditionOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.OrderDirection position_direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_position_direction(static_cast<::pb::OrderDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OrderDirection direction = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::OrderDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.OffsetFlag offset_flag = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::OffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string symbol_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 volume_multiple = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool triggered = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_triggered(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 triggered_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_triggered_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double volume = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double price = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double trigger_condition_price = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_trigger_condition_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger_price_type(static_cast<::pb::ConditionOrderTriggerPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ConditionOrderTriggerType trigger_type = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trigger_type(static_cast<::pb::ConditionOrderTriggerType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.SendOrderPriceType send_order_price_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_send_order_price_type(static_cast<::pb::SendOrderPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string send_result = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.send_result");
        object = msg->mutable_send_result();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 create_time = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_create_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string tag = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 deadline = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_deadline(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 settlement_group = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_settlement_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool stop_loss = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_stop_loss(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ip = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string mac = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 210) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.mac");
        object = msg->mutable_mac();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_name = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.user_name");
        object = msg->mutable_user_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user = 70;
      case 70: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.ConditionOrder.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ConditionOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderDirection position_direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_direction(static_cast< ::pb::OrderDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OrderDirection direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::OrderDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.OffsetFlag offset_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::OffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool triggered = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &triggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 triggered_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &triggered_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double volume = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trigger_condition_price = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trigger_condition_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger_price_type(static_cast< ::pb::ConditionOrderTriggerPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ConditionOrderTriggerType trigger_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trigger_type(static_cast< ::pb::ConditionOrderTriggerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.SendOrderPriceType send_order_price_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_send_order_price_type(static_cast< ::pb::SendOrderPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string send_result = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->send_result().data(), static_cast<int>(this->send_result().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.send_result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deadline = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stop_loss = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (210 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), static_cast<int>(this->mac().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_name = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (562 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.ConditionOrder.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ConditionOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ConditionOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ConditionOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // .pb.OrderDirection position_direction = 4;
  if (this->position_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->position_direction(), output);
  }

  // .pb.OrderDirection direction = 5;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->direction(), output);
  }

  // .pb.OffsetFlag offset_flag = 6;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->offset_flag(), output);
  }

  // string symbol_name = 7;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->symbol_name(), output);
  }

  // int32 volume_multiple = 8;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 9;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 10;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->price_tick(), output);
  }

  // bool triggered = 11;
  if (this->triggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->triggered(), output);
  }

  // int64 triggered_time = 12;
  if (this->triggered_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->triggered_time(), output);
  }

  // double volume = 13;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->volume(), output);
  }

  // double price = 14;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->price(), output);
  }

  // double trigger_condition_price = 15;
  if (this->trigger_condition_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->trigger_condition_price(), output);
  }

  // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
  if (this->trigger_price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->trigger_price_type(), output);
  }

  // .pb.ConditionOrderTriggerType trigger_type = 17;
  if (this->trigger_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->trigger_type(), output);
  }

  // .pb.SendOrderPriceType send_order_price_type = 18;
  if (this->send_order_price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->send_order_price_type(), output);
  }

  // string send_result = 19;
  if (this->send_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_result().data(), static_cast<int>(this->send_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.send_result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->send_result(), output);
  }

  // int64 create_time = 20;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->create_time(), output);
  }

  // string tag = 21;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->tag(), output);
  }

  // int64 deadline = 22;
  if (this->deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->deadline(), output);
  }

  // int32 settlement_group = 23;
  if (this->settlement_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->settlement_group(), output);
  }

  // bool stop_loss = 24;
  if (this->stop_loss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->stop_loss(), output);
  }

  // string ip = 25;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->ip(), output);
  }

  // string mac = 26;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->mac(), output);
  }

  // string user_name = 27;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->user_name(), output);
  }

  // string user = 70;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      70, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ConditionOrder)
}

::google::protobuf::uint8* ConditionOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ConditionOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // .pb.OrderDirection position_direction = 4;
  if (this->position_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->position_direction(), target);
  }

  // .pb.OrderDirection direction = 5;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->direction(), target);
  }

  // .pb.OffsetFlag offset_flag = 6;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->offset_flag(), target);
  }

  // string symbol_name = 7;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol_name(), target);
  }

  // int32 volume_multiple = 8;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 9;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 10;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->price_tick(), target);
  }

  // bool triggered = 11;
  if (this->triggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->triggered(), target);
  }

  // int64 triggered_time = 12;
  if (this->triggered_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->triggered_time(), target);
  }

  // double volume = 13;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->volume(), target);
  }

  // double price = 14;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->price(), target);
  }

  // double trigger_condition_price = 15;
  if (this->trigger_condition_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->trigger_condition_price(), target);
  }

  // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
  if (this->trigger_price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->trigger_price_type(), target);
  }

  // .pb.ConditionOrderTriggerType trigger_type = 17;
  if (this->trigger_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->trigger_type(), target);
  }

  // .pb.SendOrderPriceType send_order_price_type = 18;
  if (this->send_order_price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->send_order_price_type(), target);
  }

  // string send_result = 19;
  if (this->send_result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->send_result().data(), static_cast<int>(this->send_result().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.send_result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->send_result(), target);
  }

  // int64 create_time = 20;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->create_time(), target);
  }

  // string tag = 21;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->tag(), target);
  }

  // int64 deadline = 22;
  if (this->deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->deadline(), target);
  }

  // int32 settlement_group = 23;
  if (this->settlement_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->settlement_group(), target);
  }

  // bool stop_loss = 24;
  if (this->stop_loss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->stop_loss(), target);
  }

  // string ip = 25;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->ip(), target);
  }

  // string mac = 26;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), static_cast<int>(this->mac().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->mac(), target);
  }

  // string user_name = 27;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->user_name(), target);
  }

  // string user = 70;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.ConditionOrder.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ConditionOrder)
  return target;
}

size_t ConditionOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.ConditionOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string symbol_name = 7;
  if (this->symbol_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string send_result = 19;
  if (this->send_result().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->send_result());
  }

  // string tag = 21;
  if (this->tag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // string ip = 25;
  if (this->ip().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string mac = 26;
  if (this->mac().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // string user_name = 27;
  if (this->user_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string user = 70;
  if (this->user().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.ProductID product_id = 9;
  if (this->has_product_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .pb.OrderDirection position_direction = 4;
  if (this->position_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_direction());
  }

  // .pb.OrderDirection direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .pb.OffsetFlag offset_flag = 6;
  if (this->offset_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  // int32 volume_multiple = 8;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // double price_tick = 10;
  if (this->price_tick() != 0) {
    total_size += 1 + 8;
  }

  // int64 triggered_time = 12;
  if (this->triggered_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->triggered_time());
  }

  // double volume = 13;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double price = 14;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double trigger_condition_price = 15;
  if (this->trigger_condition_price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
  if (this->trigger_price_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_price_type());
  }

  // .pb.ConditionOrderTriggerType trigger_type = 17;
  if (this->trigger_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());
  }

  // bool triggered = 11;
  if (this->triggered() != 0) {
    total_size += 1 + 1;
  }

  // bool stop_loss = 24;
  if (this->stop_loss() != 0) {
    total_size += 2 + 1;
  }

  // .pb.SendOrderPriceType send_order_price_type = 18;
  if (this->send_order_price_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->send_order_price_type());
  }

  // int64 create_time = 20;
  if (this->create_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 deadline = 22;
  if (this->deadline() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deadline());
  }

  // int32 settlement_group = 23;
  if (this->settlement_group() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.ConditionOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionOrder* source =
      ::google::protobuf::DynamicCastToGenerated<ConditionOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.ConditionOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.ConditionOrder)
    MergeFrom(*source);
  }
}

void ConditionOrder::MergeFrom(const ConditionOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.ConditionOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.send_result().size() > 0) {

    send_result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_result_);
  }
  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.position_direction() != 0) {
    set_position_direction(from.position_direction());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.triggered_time() != 0) {
    set_triggered_time(from.triggered_time());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.trigger_condition_price() != 0) {
    set_trigger_condition_price(from.trigger_condition_price());
  }
  if (from.trigger_price_type() != 0) {
    set_trigger_price_type(from.trigger_price_type());
  }
  if (from.trigger_type() != 0) {
    set_trigger_type(from.trigger_type());
  }
  if (from.triggered() != 0) {
    set_triggered(from.triggered());
  }
  if (from.stop_loss() != 0) {
    set_stop_loss(from.stop_loss());
  }
  if (from.send_order_price_type() != 0) {
    set_send_order_price_type(from.send_order_price_type());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.deadline() != 0) {
    set_deadline(from.deadline());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
}

void ConditionOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.ConditionOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionOrder::CopyFrom(const ConditionOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.ConditionOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionOrder::IsInitialized() const {
  return true;
}

void ConditionOrder::Swap(ConditionOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionOrder::InternalSwap(ConditionOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  send_result_.Swap(&other->send_result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_name_.Swap(&other->user_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(product_id_, other->product_id_);
  swap(id_, other->id_);
  swap(position_direction_, other->position_direction_);
  swap(direction_, other->direction_);
  swap(offset_flag_, other->offset_flag_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(price_tick_, other->price_tick_);
  swap(triggered_time_, other->triggered_time_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
  swap(trigger_condition_price_, other->trigger_condition_price_);
  swap(trigger_price_type_, other->trigger_price_type_);
  swap(trigger_type_, other->trigger_type_);
  swap(triggered_, other->triggered_);
  swap(stop_loss_, other->stop_loss_);
  swap(send_order_price_type_, other->send_order_price_type_);
  swap(create_time_, other->create_time_);
  swap(deadline_, other->deadline_);
  swap(settlement_group_, other->settlement_group_);
}

::google::protobuf::Metadata ConditionOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradeCmd::InitAsDefaultInstance() {
}
class TradeCmd::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeCmd::kTypeFieldNumber;
const int TradeCmd::kDataFieldNumber;
const int TradeCmd::kNodeIdFieldNumber;
const int TradeCmd::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeCmd::TradeCmd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradeCmd)
}
TradeCmd::TradeCmd(const TradeCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:pb.TradeCmd)
}

void TradeCmd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradeCmd_order_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
}

TradeCmd::~TradeCmd() {
  // @@protoc_insertion_point(destructor:pb.TradeCmd)
  SharedDtor();
}

void TradeCmd::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeCmd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradeCmd& TradeCmd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradeCmd_order_2eproto.base);
  return *internal_default_instance();
}


void TradeCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradeCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradeCmd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradeCmd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.TradeCmdType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::pb::TradeCmdType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 node_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 request_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradeCmd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.TradeCmdType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pb::TradeCmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradeCmd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradeCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TradeCmdType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // int64 node_id = 3;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->node_id(), output);
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradeCmd)
}

::google::protobuf::uint8* TradeCmd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradeCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.TradeCmdType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // int64 node_id = 3;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->node_id(), target);
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradeCmd)
  return target;
}

size_t TradeCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradeCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 node_id = 3;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  // .pb.TradeCmdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradeCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeCmd* source =
      ::google::protobuf::DynamicCastToGenerated<TradeCmd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradeCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradeCmd)
    MergeFrom(*source);
  }
}

void TradeCmd::MergeFrom(const TradeCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradeCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TradeCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeCmd::CopyFrom(const TradeCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradeCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeCmd::IsInitialized() const {
  return true;
}

void TradeCmd::Swap(TradeCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeCmd::InternalSwap(TradeCmd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(request_id_, other->request_id_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata TradeCmd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DemoOrder::InitAsDefaultInstance() {
  ::pb::_DemoOrder_default_instance_._instance.get_mutable()->order_ = const_cast< ::pb::Order*>(
      ::pb::Order::internal_default_instance());
  ::pb::_DemoOrder_default_instance_._instance.get_mutable()->time_rule_ = const_cast< ::pb::MarketTimeRule*>(
      ::pb::MarketTimeRule::internal_default_instance());
}
class DemoOrder::HasBitSetters {
 public:
  static const ::pb::Order& order(const DemoOrder* msg);
  static const ::pb::MarketTimeRule& time_rule(const DemoOrder* msg);
};

const ::pb::Order&
DemoOrder::HasBitSetters::order(const DemoOrder* msg) {
  return *msg->order_;
}
const ::pb::MarketTimeRule&
DemoOrder::HasBitSetters::time_rule(const DemoOrder* msg) {
  return *msg->time_rule_;
}
void DemoOrder::clear_time_rule() {
  if (GetArenaNoVirtual() == nullptr && time_rule_ != nullptr) {
    delete time_rule_;
  }
  time_rule_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoOrder::kOrderFieldNumber;
const int DemoOrder::kUpperLimitPriceFieldNumber;
const int DemoOrder::kLowerLimitPriceFieldNumber;
const int DemoOrder::kMinLimitOrderVolumeFieldNumber;
const int DemoOrder::kMinMarketOrderVolumeFieldNumber;
const int DemoOrder::kTimeRuleFieldNumber;
const int DemoOrder::kUpdateTradingDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoOrder::DemoOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.DemoOrder)
}
DemoOrder::DemoOrder(const DemoOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_order()) {
    order_ = new ::pb::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  if (from.has_time_rule()) {
    time_rule_ = new ::pb::MarketTimeRule(*from.time_rule_);
  } else {
    time_rule_ = nullptr;
  }
  ::memcpy(&upper_limit_price_, &from.upper_limit_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_trading_day_) -
    reinterpret_cast<char*>(&upper_limit_price_)) + sizeof(update_trading_day_));
  // @@protoc_insertion_point(copy_constructor:pb.DemoOrder)
}

void DemoOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DemoOrder_order_2eproto.base);
  ::memset(&order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_trading_day_) -
      reinterpret_cast<char*>(&order_)) + sizeof(update_trading_day_));
}

DemoOrder::~DemoOrder() {
  // @@protoc_insertion_point(destructor:pb.DemoOrder)
  SharedDtor();
}

void DemoOrder::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
  if (this != internal_default_instance()) delete time_rule_;
}

void DemoOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemoOrder& DemoOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DemoOrder_order_2eproto.base);
  return *internal_default_instance();
}


void DemoOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.DemoOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_rule_ != nullptr) {
    delete time_rule_;
  }
  time_rule_ = nullptr;
  ::memset(&upper_limit_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_trading_day_) -
      reinterpret_cast<char*>(&upper_limit_price_)) + sizeof(update_trading_day_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DemoOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DemoOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Order order = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Order::_InternalParse;
        object = msg->mutable_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double upper_limit_price = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_upper_limit_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double lower_limit_price = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_lower_limit_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 min_limit_order_volume = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_min_limit_order_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 min_market_order_volume = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_min_market_order_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.MarketTimeRule time_rule = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::MarketTimeRule::_InternalParse;
        object = msg->mutable_time_rule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 update_trading_day = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_update_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DemoOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.DemoOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Order order = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double upper_limit_price = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upper_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lower_limit_price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lower_limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_limit_order_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_limit_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_market_order_volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_market_order_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.MarketTimeRule time_rule = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 update_trading_day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.DemoOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.DemoOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DemoOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.DemoOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order order = 1;
  if (this->has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::order(this), output);
  }

  // double upper_limit_price = 2;
  if (this->upper_limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->upper_limit_price(), output);
  }

  // double lower_limit_price = 3;
  if (this->lower_limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lower_limit_price(), output);
  }

  // int32 min_limit_order_volume = 4;
  if (this->min_limit_order_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_limit_order_volume(), output);
  }

  // int32 min_market_order_volume = 5;
  if (this->min_market_order_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_market_order_volume(), output);
  }

  // .pb.MarketTimeRule time_rule = 6;
  if (this->has_time_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::time_rule(this), output);
  }

  // int32 update_trading_day = 7;
  if (this->update_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->update_trading_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.DemoOrder)
}

::google::protobuf::uint8* DemoOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.DemoOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Order order = 1;
  if (this->has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::order(this), target);
  }

  // double upper_limit_price = 2;
  if (this->upper_limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->upper_limit_price(), target);
  }

  // double lower_limit_price = 3;
  if (this->lower_limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lower_limit_price(), target);
  }

  // int32 min_limit_order_volume = 4;
  if (this->min_limit_order_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_limit_order_volume(), target);
  }

  // int32 min_market_order_volume = 5;
  if (this->min_market_order_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_market_order_volume(), target);
  }

  // .pb.MarketTimeRule time_rule = 6;
  if (this->has_time_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::time_rule(this), target);
  }

  // int32 update_trading_day = 7;
  if (this->update_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->update_trading_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.DemoOrder)
  return target;
}

size_t DemoOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.DemoOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_);
  }

  // .pb.MarketTimeRule time_rule = 6;
  if (this->has_time_rule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *time_rule_);
  }

  // double upper_limit_price = 2;
  if (this->upper_limit_price() != 0) {
    total_size += 1 + 8;
  }

  // double lower_limit_price = 3;
  if (this->lower_limit_price() != 0) {
    total_size += 1 + 8;
  }

  // int32 min_limit_order_volume = 4;
  if (this->min_limit_order_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_limit_order_volume());
  }

  // int32 min_market_order_volume = 5;
  if (this->min_market_order_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_market_order_volume());
  }

  // int32 update_trading_day = 7;
  if (this->update_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->update_trading_day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemoOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.DemoOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const DemoOrder* source =
      ::google::protobuf::DynamicCastToGenerated<DemoOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.DemoOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.DemoOrder)
    MergeFrom(*source);
  }
}

void DemoOrder::MergeFrom(const DemoOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.DemoOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    mutable_order()->::pb::Order::MergeFrom(from.order());
  }
  if (from.has_time_rule()) {
    mutable_time_rule()->::pb::MarketTimeRule::MergeFrom(from.time_rule());
  }
  if (from.upper_limit_price() != 0) {
    set_upper_limit_price(from.upper_limit_price());
  }
  if (from.lower_limit_price() != 0) {
    set_lower_limit_price(from.lower_limit_price());
  }
  if (from.min_limit_order_volume() != 0) {
    set_min_limit_order_volume(from.min_limit_order_volume());
  }
  if (from.min_market_order_volume() != 0) {
    set_min_market_order_volume(from.min_market_order_volume());
  }
  if (from.update_trading_day() != 0) {
    set_update_trading_day(from.update_trading_day());
  }
}

void DemoOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.DemoOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoOrder::CopyFrom(const DemoOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.DemoOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoOrder::IsInitialized() const {
  return true;
}

void DemoOrder::Swap(DemoOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoOrder::InternalSwap(DemoOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
  swap(time_rule_, other->time_rule_);
  swap(upper_limit_price_, other->upper_limit_price_);
  swap(lower_limit_price_, other->lower_limit_price_);
  swap(min_limit_order_volume_, other->min_limit_order_volume_);
  swap(min_market_order_volume_, other->min_market_order_volume_);
  swap(update_trading_day_, other->update_trading_day_);
}

::google::protobuf::Metadata DemoOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_order_2eproto);
  return ::file_level_metadata_order_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::OrderID* Arena::CreateMaybeMessage< ::pb::OrderID >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OrderID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Order* Arena::CreateMaybeMessage< ::pb::Order >(Arena* arena) {
  return Arena::CreateInternal< ::pb::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OrderList* Arena::CreateMaybeMessage< ::pb::OrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::JointOrder* Arena::CreateMaybeMessage< ::pb::JointOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::JointOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OrderLink* Arena::CreateMaybeMessage< ::pb::OrderLink >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OrderLink >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CancelOrderRequest* Arena::CreateMaybeMessage< ::pb::CancelOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::OnRtnCancelOrder* Arena::CreateMaybeMessage< ::pb::OnRtnCancelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::OnRtnCancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::ConditionOrder* Arena::CreateMaybeMessage< ::pb::ConditionOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::ConditionOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradeCmd* Arena::CreateMaybeMessage< ::pb::TradeCmd >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradeCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::DemoOrder* Arena::CreateMaybeMessage< ::pb::DemoOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::DemoOrder >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
