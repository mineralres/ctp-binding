// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: goshare.proto

#ifndef PROTOBUF_INCLUDED_goshare_2eproto
#define PROTOBUF_INCLUDED_goshare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "market_data.pb.h"
#include "google/api/annotations.pb.h"
#include "strategy.pb.h"
#include "trading.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_goshare_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_goshare_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_goshare_2eproto();
namespace pb {
class EmptyRequest;
class EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class EmptyResponse;
class EmptyResponseDefaultTypeInternal;
extern EmptyResponseDefaultTypeInternal _EmptyResponse_default_instance_;
class I18Item;
class I18ItemDefaultTypeInternal;
extern I18ItemDefaultTypeInternal _I18Item_default_instance_;
class ReqSSEStockOptionList;
class ReqSSEStockOptionListDefaultTypeInternal;
extern ReqSSEStockOptionListDefaultTypeInternal _ReqSSEStockOptionList_default_instance_;
class ReqUserLogin;
class ReqUserLoginDefaultTypeInternal;
extern ReqUserLoginDefaultTypeInternal _ReqUserLogin_default_instance_;
class RouteItem;
class RouteItemDefaultTypeInternal;
extern RouteItemDefaultTypeInternal _RouteItem_default_instance_;
class RspCurrentUser;
class RspCurrentUserDefaultTypeInternal;
extern RspCurrentUserDefaultTypeInternal _RspCurrentUser_default_instance_;
class RspGetRoutes;
class RspGetRoutesDefaultTypeInternal;
extern RspGetRoutesDefaultTypeInternal _RspGetRoutes_default_instance_;
class RspSSEStockOptionList;
class RspSSEStockOptionListDefaultTypeInternal;
extern RspSSEStockOptionListDefaultTypeInternal _RspSSEStockOptionList_default_instance_;
class RspUserLogin;
class RspUserLoginDefaultTypeInternal;
extern RspUserLoginDefaultTypeInternal _RspUserLogin_default_instance_;
class XPermission;
class XPermissionDefaultTypeInternal;
extern XPermissionDefaultTypeInternal _XPermission_default_instance_;
class XUser;
class XUserDefaultTypeInternal;
extern XUserDefaultTypeInternal _XUser_default_instance_;
class XUsersItem;
class XUsersItemDefaultTypeInternal;
extern XUsersItemDefaultTypeInternal _XUsersItem_default_instance_;
class XUsersItemList;
class XUsersItemListDefaultTypeInternal;
extern XUsersItemListDefaultTypeInternal _XUsersItemList_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::EmptyRequest* Arena::CreateMaybeMessage<::pb::EmptyRequest>(Arena*);
template<> ::pb::EmptyResponse* Arena::CreateMaybeMessage<::pb::EmptyResponse>(Arena*);
template<> ::pb::I18Item* Arena::CreateMaybeMessage<::pb::I18Item>(Arena*);
template<> ::pb::ReqSSEStockOptionList* Arena::CreateMaybeMessage<::pb::ReqSSEStockOptionList>(Arena*);
template<> ::pb::ReqUserLogin* Arena::CreateMaybeMessage<::pb::ReqUserLogin>(Arena*);
template<> ::pb::RouteItem* Arena::CreateMaybeMessage<::pb::RouteItem>(Arena*);
template<> ::pb::RspCurrentUser* Arena::CreateMaybeMessage<::pb::RspCurrentUser>(Arena*);
template<> ::pb::RspGetRoutes* Arena::CreateMaybeMessage<::pb::RspGetRoutes>(Arena*);
template<> ::pb::RspSSEStockOptionList* Arena::CreateMaybeMessage<::pb::RspSSEStockOptionList>(Arena*);
template<> ::pb::RspUserLogin* Arena::CreateMaybeMessage<::pb::RspUserLogin>(Arena*);
template<> ::pb::XPermission* Arena::CreateMaybeMessage<::pb::XPermission>(Arena*);
template<> ::pb::XUser* Arena::CreateMaybeMessage<::pb::XUser>(Arena*);
template<> ::pb::XUsersItem* Arena::CreateMaybeMessage<::pb::XUsersItem>(Arena*);
template<> ::pb::XUsersItemList* Arena::CreateMaybeMessage<::pb::XUsersItemList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class EmptyRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EmptyRequest) */ {
 public:
  EmptyRequest();
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EmptyRequest* other);
  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const final {
    return CreateMaybeMessage<EmptyRequest>(nullptr);
  }

  EmptyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.EmptyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class EmptyResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.EmptyResponse) */ {
 public:
  EmptyResponse();
  virtual ~EmptyResponse();

  EmptyResponse(const EmptyResponse& from);

  inline EmptyResponse& operator=(const EmptyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmptyResponse(EmptyResponse&& from) noexcept
    : EmptyResponse() {
    *this = ::std::move(from);
  }

  inline EmptyResponse& operator=(EmptyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmptyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyResponse* internal_default_instance() {
    return reinterpret_cast<const EmptyResponse*>(
               &_EmptyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EmptyResponse* other);
  friend void swap(EmptyResponse& a, EmptyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmptyResponse* New() const final {
    return CreateMaybeMessage<EmptyResponse>(nullptr);
  }

  EmptyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmptyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmptyResponse& from);
  void MergeFrom(const EmptyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.EmptyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSSEStockOptionList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqSSEStockOptionList) */ {
 public:
  ReqSSEStockOptionList();
  virtual ~ReqSSEStockOptionList();

  ReqSSEStockOptionList(const ReqSSEStockOptionList& from);

  inline ReqSSEStockOptionList& operator=(const ReqSSEStockOptionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSSEStockOptionList(ReqSSEStockOptionList&& from) noexcept
    : ReqSSEStockOptionList() {
    *this = ::std::move(from);
  }

  inline ReqSSEStockOptionList& operator=(ReqSSEStockOptionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqSSEStockOptionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSSEStockOptionList* internal_default_instance() {
    return reinterpret_cast<const ReqSSEStockOptionList*>(
               &_ReqSSEStockOptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqSSEStockOptionList* other);
  friend void swap(ReqSSEStockOptionList& a, ReqSSEStockOptionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSSEStockOptionList* New() const final {
    return CreateMaybeMessage<ReqSSEStockOptionList>(nullptr);
  }

  ReqSSEStockOptionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSSEStockOptionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSSEStockOptionList& from);
  void MergeFrom(const ReqSSEStockOptionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSSEStockOptionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.ReqSSEStockOptionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RspSSEStockOptionList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RspSSEStockOptionList) */ {
 public:
  RspSSEStockOptionList();
  virtual ~RspSSEStockOptionList();

  RspSSEStockOptionList(const RspSSEStockOptionList& from);

  inline RspSSEStockOptionList& operator=(const RspSSEStockOptionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspSSEStockOptionList(RspSSEStockOptionList&& from) noexcept
    : RspSSEStockOptionList() {
    *this = ::std::move(from);
  }

  inline RspSSEStockOptionList& operator=(RspSSEStockOptionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RspSSEStockOptionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSSEStockOptionList* internal_default_instance() {
    return reinterpret_cast<const RspSSEStockOptionList*>(
               &_RspSSEStockOptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RspSSEStockOptionList* other);
  friend void swap(RspSSEStockOptionList& a, RspSSEStockOptionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSSEStockOptionList* New() const final {
    return CreateMaybeMessage<RspSSEStockOptionList>(nullptr);
  }

  RspSSEStockOptionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspSSEStockOptionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspSSEStockOptionList& from);
  void MergeFrom(const RspSSEStockOptionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSSEStockOptionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SSEStockOption list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::SSEStockOption* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SSEStockOption >*
      mutable_list();
  const ::pb::SSEStockOption& list(int index) const;
  ::pb::SSEStockOption* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::SSEStockOption >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.RspSSEStockOptionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SSEStockOption > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUserLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqUserLogin) */ {
 public:
  ReqUserLogin();
  virtual ~ReqUserLogin();

  ReqUserLogin(const ReqUserLogin& from);

  inline ReqUserLogin& operator=(const ReqUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqUserLogin(ReqUserLogin&& from) noexcept
    : ReqUserLogin() {
    *this = ::std::move(from);
  }

  inline ReqUserLogin& operator=(ReqUserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqUserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqUserLogin* internal_default_instance() {
    return reinterpret_cast<const ReqUserLogin*>(
               &_ReqUserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqUserLogin* other);
  friend void swap(ReqUserLogin& a, ReqUserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqUserLogin* New() const final {
    return CreateMaybeMessage<ReqUserLogin>(nullptr);
  }

  ReqUserLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqUserLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqUserLogin& from);
  void MergeFrom(const ReqUserLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUserLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:pb.ReqUserLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RspUserLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RspUserLogin) */ {
 public:
  RspUserLogin();
  virtual ~RspUserLogin();

  RspUserLogin(const RspUserLogin& from);

  inline RspUserLogin& operator=(const RspUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspUserLogin(RspUserLogin&& from) noexcept
    : RspUserLogin() {
    *this = ::std::move(from);
  }

  inline RspUserLogin& operator=(RspUserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RspUserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspUserLogin* internal_default_instance() {
    return reinterpret_cast<const RspUserLogin*>(
               &_RspUserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RspUserLogin* other);
  friend void swap(RspUserLogin& a, RspUserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspUserLogin* New() const final {
    return CreateMaybeMessage<RspUserLogin>(nullptr);
  }

  RspUserLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspUserLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspUserLogin& from);
  void MergeFrom(const RspUserLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspUserLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pb.RspUserLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class I18Item :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.I18Item) */ {
 public:
  I18Item();
  virtual ~I18Item();

  I18Item(const I18Item& from);

  inline I18Item& operator=(const I18Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  I18Item(I18Item&& from) noexcept
    : I18Item() {
    *this = ::std::move(from);
  }

  inline I18Item& operator=(I18Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const I18Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const I18Item* internal_default_instance() {
    return reinterpret_cast<const I18Item*>(
               &_I18Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(I18Item* other);
  friend void swap(I18Item& a, I18Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline I18Item* New() const final {
    return CreateMaybeMessage<I18Item>(nullptr);
  }

  I18Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<I18Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const I18Item& from);
  void MergeFrom(const I18Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(I18Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.I18Item)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RouteItem :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RouteItem) */ {
 public:
  RouteItem();
  virtual ~RouteItem();

  RouteItem(const RouteItem& from);

  inline RouteItem& operator=(const RouteItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RouteItem(RouteItem&& from) noexcept
    : RouteItem() {
    *this = ::std::move(from);
  }

  inline RouteItem& operator=(RouteItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RouteItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteItem* internal_default_instance() {
    return reinterpret_cast<const RouteItem*>(
               &_RouteItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RouteItem* other);
  friend void swap(RouteItem& a, RouteItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RouteItem* New() const final {
    return CreateMaybeMessage<RouteItem>(nullptr);
  }

  RouteItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RouteItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RouteItem& from);
  void MergeFrom(const RouteItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string icon = 1;
  void clear_icon();
  static const int kIconFieldNumber = 1;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string route = 6;
  void clear_route();
  static const int kRouteFieldNumber = 6;
  const ::std::string& route() const;
  void set_route(const ::std::string& value);
  #if LANG_CXX11
  void set_route(::std::string&& value);
  #endif
  void set_route(const char* value);
  void set_route(const char* value, size_t size);
  ::std::string* mutable_route();
  ::std::string* release_route();
  void set_allocated_route(::std::string* route);

  // string breadcrumb_parent_id = 7;
  void clear_breadcrumb_parent_id();
  static const int kBreadcrumbParentIdFieldNumber = 7;
  const ::std::string& breadcrumb_parent_id() const;
  void set_breadcrumb_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_breadcrumb_parent_id(::std::string&& value);
  #endif
  void set_breadcrumb_parent_id(const char* value);
  void set_breadcrumb_parent_id(const char* value, size_t size);
  ::std::string* mutable_breadcrumb_parent_id();
  ::std::string* release_breadcrumb_parent_id();
  void set_allocated_breadcrumb_parent_id(::std::string* breadcrumb_parent_id);

  // string menu_parent_id = 8;
  void clear_menu_parent_id();
  static const int kMenuParentIdFieldNumber = 8;
  const ::std::string& menu_parent_id() const;
  void set_menu_parent_id(const ::std::string& value);
  #if LANG_CXX11
  void set_menu_parent_id(::std::string&& value);
  #endif
  void set_menu_parent_id(const char* value);
  void set_menu_parent_id(const char* value, size_t size);
  ::std::string* mutable_menu_parent_id();
  ::std::string* release_menu_parent_id();
  void set_allocated_menu_parent_id(::std::string* menu_parent_id);

  // .pb.I18Item en = 4;
  bool has_en() const;
  void clear_en();
  static const int kEnFieldNumber = 4;
  const ::pb::I18Item& en() const;
  ::pb::I18Item* release_en();
  ::pb::I18Item* mutable_en();
  void set_allocated_en(::pb::I18Item* en);

  // .pb.I18Item zh = 5;
  bool has_zh() const;
  void clear_zh();
  static const int kZhFieldNumber = 5;
  const ::pb::I18Item& zh() const;
  ::pb::I18Item* release_zh();
  ::pb::I18Item* mutable_zh();
  void set_allocated_zh(::pb::I18Item* zh);

  // @@protoc_insertion_point(class_scope:pb.RouteItem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr route_;
  ::google::protobuf::internal::ArenaStringPtr breadcrumb_parent_id_;
  ::google::protobuf::internal::ArenaStringPtr menu_parent_id_;
  ::pb::I18Item* en_;
  ::pb::I18Item* zh_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RspGetRoutes :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RspGetRoutes) */ {
 public:
  RspGetRoutes();
  virtual ~RspGetRoutes();

  RspGetRoutes(const RspGetRoutes& from);

  inline RspGetRoutes& operator=(const RspGetRoutes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspGetRoutes(RspGetRoutes&& from) noexcept
    : RspGetRoutes() {
    *this = ::std::move(from);
  }

  inline RspGetRoutes& operator=(RspGetRoutes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RspGetRoutes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspGetRoutes* internal_default_instance() {
    return reinterpret_cast<const RspGetRoutes*>(
               &_RspGetRoutes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RspGetRoutes* other);
  friend void swap(RspGetRoutes& a, RspGetRoutes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspGetRoutes* New() const final {
    return CreateMaybeMessage<RspGetRoutes>(nullptr);
  }

  RspGetRoutes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspGetRoutes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspGetRoutes& from);
  void MergeFrom(const RspGetRoutes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspGetRoutes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.RouteItem list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::RouteItem* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::RouteItem >*
      mutable_list();
  const ::pb::RouteItem& list(int index) const;
  ::pb::RouteItem* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::RouteItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.RspGetRoutes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::RouteItem > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class XUser :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.XUser) */ {
 public:
  XUser();
  virtual ~XUser();

  XUser(const XUser& from);

  inline XUser& operator=(const XUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XUser(XUser&& from) noexcept
    : XUser() {
    *this = ::std::move(from);
  }

  inline XUser& operator=(XUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XUser* internal_default_instance() {
    return reinterpret_cast<const XUser*>(
               &_XUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(XUser* other);
  friend void swap(XUser& a, XUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XUser* New() const final {
    return CreateMaybeMessage<XUser>(nullptr);
  }

  XUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XUser& from);
  void MergeFrom(const XUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string avatar = 1;
  void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .pb.XPermission permissions = 4;
  bool has_permissions() const;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 4;
  const ::pb::XPermission& permissions() const;
  ::pb::XPermission* release_permissions();
  ::pb::XPermission* mutable_permissions();
  void set_allocated_permissions(::pb::XPermission* permissions);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.XUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::pb::XPermission* permissions_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class RspCurrentUser :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RspCurrentUser) */ {
 public:
  RspCurrentUser();
  virtual ~RspCurrentUser();

  RspCurrentUser(const RspCurrentUser& from);

  inline RspCurrentUser& operator=(const RspCurrentUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspCurrentUser(RspCurrentUser&& from) noexcept
    : RspCurrentUser() {
    *this = ::std::move(from);
  }

  inline RspCurrentUser& operator=(RspCurrentUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RspCurrentUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspCurrentUser* internal_default_instance() {
    return reinterpret_cast<const RspCurrentUser*>(
               &_RspCurrentUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RspCurrentUser* other);
  friend void swap(RspCurrentUser& a, RspCurrentUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspCurrentUser* New() const final {
    return CreateMaybeMessage<RspCurrentUser>(nullptr);
  }

  RspCurrentUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspCurrentUser>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspCurrentUser& from);
  void MergeFrom(const RspCurrentUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspCurrentUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.XUser user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::pb::XUser& user() const;
  ::pb::XUser* release_user();
  ::pb::XUser* mutable_user();
  void set_allocated_user(::pb::XUser* user);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:pb.RspCurrentUser)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::XUser* user_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class XPermission :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.XPermission) */ {
 public:
  XPermission();
  virtual ~XPermission();

  XPermission(const XPermission& from);

  inline XPermission& operator=(const XPermission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XPermission(XPermission&& from) noexcept
    : XPermission() {
    *this = ::std::move(from);
  }

  inline XPermission& operator=(XPermission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XPermission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XPermission* internal_default_instance() {
    return reinterpret_cast<const XPermission*>(
               &_XPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(XPermission* other);
  friend void swap(XPermission& a, XPermission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XPermission* New() const final {
    return CreateMaybeMessage<XPermission>(nullptr);
  }

  XPermission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XPermission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XPermission& from);
  void MergeFrom(const XPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XPermission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string visit = 2;
  int visit_size() const;
  void clear_visit();
  static const int kVisitFieldNumber = 2;
  const ::std::string& visit(int index) const;
  ::std::string* mutable_visit(int index);
  void set_visit(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_visit(int index, ::std::string&& value);
  #endif
  void set_visit(int index, const char* value);
  void set_visit(int index, const char* value, size_t size);
  ::std::string* add_visit();
  void add_visit(const ::std::string& value);
  #if LANG_CXX11
  void add_visit(::std::string&& value);
  #endif
  void add_visit(const char* value);
  void add_visit(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& visit() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_visit();

  // string role = 1;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  const ::std::string& role() const;
  void set_role(const ::std::string& value);
  #if LANG_CXX11
  void set_role(::std::string&& value);
  #endif
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  ::std::string* mutable_role();
  ::std::string* release_role();
  void set_allocated_role(::std::string* role);

  // @@protoc_insertion_point(class_scope:pb.XPermission)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> visit_;
  ::google::protobuf::internal::ArenaStringPtr role_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class XUsersItem :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.XUsersItem) */ {
 public:
  XUsersItem();
  virtual ~XUsersItem();

  XUsersItem(const XUsersItem& from);

  inline XUsersItem& operator=(const XUsersItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XUsersItem(XUsersItem&& from) noexcept
    : XUsersItem() {
    *this = ::std::move(from);
  }

  inline XUsersItem& operator=(XUsersItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XUsersItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XUsersItem* internal_default_instance() {
    return reinterpret_cast<const XUsersItem*>(
               &_XUsersItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(XUsersItem* other);
  friend void swap(XUsersItem& a, XUsersItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XUsersItem* New() const final {
    return CreateMaybeMessage<XUsersItem>(nullptr);
  }

  XUsersItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XUsersItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XUsersItem& from);
  void MergeFrom(const XUsersItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XUsersItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string avatar = 3;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // string create_time = 4;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // string email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string id = 6;
  void clear_id();
  static const int kIdFieldNumber = 6;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 8;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string nick_name = 9;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 9;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // string phone = 10;
  void clear_phone();
  static const int kPhoneFieldNumber = 10;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // int32 age = 2;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // bool is_male = 7;
  void clear_is_male();
  static const int kIsMaleFieldNumber = 7;
  bool is_male() const;
  void set_is_male(bool value);

  // @@protoc_insertion_point(class_scope:pb.XUsersItem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::int32 age_;
  bool is_male_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// -------------------------------------------------------------------

class XUsersItemList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.XUsersItemList) */ {
 public:
  XUsersItemList();
  virtual ~XUsersItemList();

  XUsersItemList(const XUsersItemList& from);

  inline XUsersItemList& operator=(const XUsersItemList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XUsersItemList(XUsersItemList&& from) noexcept
    : XUsersItemList() {
    *this = ::std::move(from);
  }

  inline XUsersItemList& operator=(XUsersItemList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XUsersItemList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XUsersItemList* internal_default_instance() {
    return reinterpret_cast<const XUsersItemList*>(
               &_XUsersItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(XUsersItemList* other);
  friend void swap(XUsersItemList& a, XUsersItemList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XUsersItemList* New() const final {
    return CreateMaybeMessage<XUsersItemList>(nullptr);
  }

  XUsersItemList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XUsersItemList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XUsersItemList& from);
  void MergeFrom(const XUsersItemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XUsersItemList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.XUsersItem list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::XUsersItem* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::XUsersItem >*
      mutable_list();
  const ::pb::XUsersItem& list(int index) const;
  ::pb::XUsersItem* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::XUsersItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.XUsersItemList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::XUsersItem > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_goshare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyRequest

// -------------------------------------------------------------------

// EmptyResponse

// -------------------------------------------------------------------

// ReqSSEStockOptionList

// -------------------------------------------------------------------

// RspSSEStockOptionList

// repeated .pb.SSEStockOption list = 1;
inline int RspSSEStockOptionList::list_size() const {
  return list_.size();
}
inline ::pb::SSEStockOption* RspSSEStockOptionList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspSSEStockOptionList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SSEStockOption >*
RspSSEStockOptionList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspSSEStockOptionList.list)
  return &list_;
}
inline const ::pb::SSEStockOption& RspSSEStockOptionList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspSSEStockOptionList.list)
  return list_.Get(index);
}
inline ::pb::SSEStockOption* RspSSEStockOptionList::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspSSEStockOptionList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SSEStockOption >&
RspSSEStockOptionList::list() const {
  // @@protoc_insertion_point(field_list:pb.RspSSEStockOptionList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqUserLogin

// string user = 1;
inline void ReqUserLogin::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqUserLogin::user() const {
  // @@protoc_insertion_point(field_get:pb.ReqUserLogin.user)
  return user_.GetNoArena();
}
inline void ReqUserLogin::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqUserLogin.user)
}
#if LANG_CXX11
inline void ReqUserLogin::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqUserLogin.user)
}
#endif
inline void ReqUserLogin::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqUserLogin.user)
}
inline void ReqUserLogin::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqUserLogin.user)
}
inline ::std::string* ReqUserLogin::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqUserLogin.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqUserLogin::release_user() {
  // @@protoc_insertion_point(field_release:pb.ReqUserLogin.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqUserLogin::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqUserLogin.user)
}

// string password = 2;
inline void ReqUserLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqUserLogin::password() const {
  // @@protoc_insertion_point(field_get:pb.ReqUserLogin.password)
  return password_.GetNoArena();
}
inline void ReqUserLogin::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqUserLogin.password)
}
#if LANG_CXX11
inline void ReqUserLogin::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqUserLogin.password)
}
#endif
inline void ReqUserLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqUserLogin.password)
}
inline void ReqUserLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqUserLogin.password)
}
inline ::std::string* ReqUserLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqUserLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqUserLogin::release_password() {
  // @@protoc_insertion_point(field_release:pb.ReqUserLogin.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqUserLogin::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqUserLogin.password)
}

// string type = 3;
inline void ReqUserLogin::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqUserLogin::type() const {
  // @@protoc_insertion_point(field_get:pb.ReqUserLogin.type)
  return type_.GetNoArena();
}
inline void ReqUserLogin::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqUserLogin.type)
}
#if LANG_CXX11
inline void ReqUserLogin::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqUserLogin.type)
}
#endif
inline void ReqUserLogin::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqUserLogin.type)
}
inline void ReqUserLogin::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqUserLogin.type)
}
inline ::std::string* ReqUserLogin::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqUserLogin.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqUserLogin::release_type() {
  // @@protoc_insertion_point(field_release:pb.ReqUserLogin.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqUserLogin::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqUserLogin.type)
}

// -------------------------------------------------------------------

// RspUserLogin

// string message = 1;
inline void RspUserLogin::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RspUserLogin::message() const {
  // @@protoc_insertion_point(field_get:pb.RspUserLogin.message)
  return message_.GetNoArena();
}
inline void RspUserLogin::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RspUserLogin.message)
}
#if LANG_CXX11
inline void RspUserLogin::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RspUserLogin.message)
}
#endif
inline void RspUserLogin::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RspUserLogin.message)
}
inline void RspUserLogin::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RspUserLogin.message)
}
inline ::std::string* RspUserLogin::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pb.RspUserLogin.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RspUserLogin::release_message() {
  // @@protoc_insertion_point(field_release:pb.RspUserLogin.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RspUserLogin::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pb.RspUserLogin.message)
}

// bool success = 2;
inline void RspUserLogin::clear_success() {
  success_ = false;
}
inline bool RspUserLogin::success() const {
  // @@protoc_insertion_point(field_get:pb.RspUserLogin.success)
  return success_;
}
inline void RspUserLogin::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.RspUserLogin.success)
}

// -------------------------------------------------------------------

// I18Item

// string name = 1;
inline void I18Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& I18Item::name() const {
  // @@protoc_insertion_point(field_get:pb.I18Item.name)
  return name_.GetNoArena();
}
inline void I18Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.I18Item.name)
}
#if LANG_CXX11
inline void I18Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.I18Item.name)
}
#endif
inline void I18Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.I18Item.name)
}
inline void I18Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.I18Item.name)
}
inline ::std::string* I18Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.I18Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* I18Item::release_name() {
  // @@protoc_insertion_point(field_release:pb.I18Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void I18Item::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.I18Item.name)
}

// -------------------------------------------------------------------

// RouteItem

// string icon = 1;
inline void RouteItem::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::icon() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.icon)
  return icon_.GetNoArena();
}
inline void RouteItem::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.icon)
}
#if LANG_CXX11
inline void RouteItem::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.icon)
}
#endif
inline void RouteItem::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.icon)
}
inline void RouteItem::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.icon)
}
inline ::std::string* RouteItem::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_icon() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_icon(::std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.icon)
}

// string id = 2;
inline void RouteItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::id() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.id)
  return id_.GetNoArena();
}
inline void RouteItem::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.id)
}
#if LANG_CXX11
inline void RouteItem::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.id)
}
#endif
inline void RouteItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.id)
}
inline void RouteItem::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.id)
}
inline ::std::string* RouteItem::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_id() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.id)
}

// string name = 3;
inline void RouteItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::name() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.name)
  return name_.GetNoArena();
}
inline void RouteItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.name)
}
#if LANG_CXX11
inline void RouteItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.name)
}
#endif
inline void RouteItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.name)
}
inline void RouteItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.name)
}
inline ::std::string* RouteItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_name() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.name)
}

// .pb.I18Item en = 4;
inline bool RouteItem::has_en() const {
  return this != internal_default_instance() && en_ != nullptr;
}
inline void RouteItem::clear_en() {
  if (GetArenaNoVirtual() == nullptr && en_ != nullptr) {
    delete en_;
  }
  en_ = nullptr;
}
inline const ::pb::I18Item& RouteItem::en() const {
  const ::pb::I18Item* p = en_;
  // @@protoc_insertion_point(field_get:pb.RouteItem.en)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::I18Item*>(
      &::pb::_I18Item_default_instance_);
}
inline ::pb::I18Item* RouteItem::release_en() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.en)
  
  ::pb::I18Item* temp = en_;
  en_ = nullptr;
  return temp;
}
inline ::pb::I18Item* RouteItem::mutable_en() {
  
  if (en_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::I18Item>(GetArenaNoVirtual());
    en_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.en)
  return en_;
}
inline void RouteItem::set_allocated_en(::pb::I18Item* en) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete en_;
  }
  if (en) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      en = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, en, submessage_arena);
    }
    
  } else {
    
  }
  en_ = en;
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.en)
}

// .pb.I18Item zh = 5;
inline bool RouteItem::has_zh() const {
  return this != internal_default_instance() && zh_ != nullptr;
}
inline void RouteItem::clear_zh() {
  if (GetArenaNoVirtual() == nullptr && zh_ != nullptr) {
    delete zh_;
  }
  zh_ = nullptr;
}
inline const ::pb::I18Item& RouteItem::zh() const {
  const ::pb::I18Item* p = zh_;
  // @@protoc_insertion_point(field_get:pb.RouteItem.zh)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::I18Item*>(
      &::pb::_I18Item_default_instance_);
}
inline ::pb::I18Item* RouteItem::release_zh() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.zh)
  
  ::pb::I18Item* temp = zh_;
  zh_ = nullptr;
  return temp;
}
inline ::pb::I18Item* RouteItem::mutable_zh() {
  
  if (zh_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::I18Item>(GetArenaNoVirtual());
    zh_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.zh)
  return zh_;
}
inline void RouteItem::set_allocated_zh(::pb::I18Item* zh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zh_;
  }
  if (zh) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zh, submessage_arena);
    }
    
  } else {
    
  }
  zh_ = zh;
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.zh)
}

// string route = 6;
inline void RouteItem::clear_route() {
  route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::route() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.route)
  return route_.GetNoArena();
}
inline void RouteItem::set_route(const ::std::string& value) {
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.route)
}
#if LANG_CXX11
inline void RouteItem::set_route(::std::string&& value) {
  
  route_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.route)
}
#endif
inline void RouteItem::set_route(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.route)
}
inline void RouteItem::set_route(const char* value, size_t size) {
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.route)
}
inline ::std::string* RouteItem::mutable_route() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.route)
  return route_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_route() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.route)
  
  return route_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_route(::std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  route_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.route)
}

// string breadcrumb_parent_id = 7;
inline void RouteItem::clear_breadcrumb_parent_id() {
  breadcrumb_parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::breadcrumb_parent_id() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.breadcrumb_parent_id)
  return breadcrumb_parent_id_.GetNoArena();
}
inline void RouteItem::set_breadcrumb_parent_id(const ::std::string& value) {
  
  breadcrumb_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.breadcrumb_parent_id)
}
#if LANG_CXX11
inline void RouteItem::set_breadcrumb_parent_id(::std::string&& value) {
  
  breadcrumb_parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.breadcrumb_parent_id)
}
#endif
inline void RouteItem::set_breadcrumb_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  breadcrumb_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.breadcrumb_parent_id)
}
inline void RouteItem::set_breadcrumb_parent_id(const char* value, size_t size) {
  
  breadcrumb_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.breadcrumb_parent_id)
}
inline ::std::string* RouteItem::mutable_breadcrumb_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.breadcrumb_parent_id)
  return breadcrumb_parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_breadcrumb_parent_id() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.breadcrumb_parent_id)
  
  return breadcrumb_parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_breadcrumb_parent_id(::std::string* breadcrumb_parent_id) {
  if (breadcrumb_parent_id != nullptr) {
    
  } else {
    
  }
  breadcrumb_parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), breadcrumb_parent_id);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.breadcrumb_parent_id)
}

// string menu_parent_id = 8;
inline void RouteItem::clear_menu_parent_id() {
  menu_parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouteItem::menu_parent_id() const {
  // @@protoc_insertion_point(field_get:pb.RouteItem.menu_parent_id)
  return menu_parent_id_.GetNoArena();
}
inline void RouteItem::set_menu_parent_id(const ::std::string& value) {
  
  menu_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.RouteItem.menu_parent_id)
}
#if LANG_CXX11
inline void RouteItem::set_menu_parent_id(::std::string&& value) {
  
  menu_parent_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RouteItem.menu_parent_id)
}
#endif
inline void RouteItem::set_menu_parent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  menu_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RouteItem.menu_parent_id)
}
inline void RouteItem::set_menu_parent_id(const char* value, size_t size) {
  
  menu_parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RouteItem.menu_parent_id)
}
inline ::std::string* RouteItem::mutable_menu_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.RouteItem.menu_parent_id)
  return menu_parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouteItem::release_menu_parent_id() {
  // @@protoc_insertion_point(field_release:pb.RouteItem.menu_parent_id)
  
  return menu_parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouteItem::set_allocated_menu_parent_id(::std::string* menu_parent_id) {
  if (menu_parent_id != nullptr) {
    
  } else {
    
  }
  menu_parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), menu_parent_id);
  // @@protoc_insertion_point(field_set_allocated:pb.RouteItem.menu_parent_id)
}

// -------------------------------------------------------------------

// RspGetRoutes

// repeated .pb.RouteItem list = 1;
inline int RspGetRoutes::list_size() const {
  return list_.size();
}
inline void RspGetRoutes::clear_list() {
  list_.Clear();
}
inline ::pb::RouteItem* RspGetRoutes::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RspGetRoutes.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::RouteItem >*
RspGetRoutes::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RspGetRoutes.list)
  return &list_;
}
inline const ::pb::RouteItem& RspGetRoutes::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RspGetRoutes.list)
  return list_.Get(index);
}
inline ::pb::RouteItem* RspGetRoutes::add_list() {
  // @@protoc_insertion_point(field_add:pb.RspGetRoutes.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::RouteItem >&
RspGetRoutes::list() const {
  // @@protoc_insertion_point(field_list:pb.RspGetRoutes.list)
  return list_;
}

// -------------------------------------------------------------------

// XUser

// string avatar = 1;
inline void XUser::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUser::avatar() const {
  // @@protoc_insertion_point(field_get:pb.XUser.avatar)
  return avatar_.GetNoArena();
}
inline void XUser::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUser.avatar)
}
#if LANG_CXX11
inline void XUser::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUser.avatar)
}
#endif
inline void XUser::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUser.avatar)
}
inline void XUser::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUser.avatar)
}
inline ::std::string* XUser::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUser.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUser::release_avatar() {
  // @@protoc_insertion_point(field_release:pb.XUser.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUser::set_allocated_avatar(::std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:pb.XUser.avatar)
}

// int32 id = 2;
inline void XUser::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 XUser::id() const {
  // @@protoc_insertion_point(field_get:pb.XUser.id)
  return id_;
}
inline void XUser::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.XUser.id)
}

// string username = 3;
inline void XUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUser::username() const {
  // @@protoc_insertion_point(field_get:pb.XUser.username)
  return username_.GetNoArena();
}
inline void XUser::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUser.username)
}
#if LANG_CXX11
inline void XUser::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUser.username)
}
#endif
inline void XUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUser.username)
}
inline void XUser::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUser.username)
}
inline ::std::string* XUser::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUser::release_username() {
  // @@protoc_insertion_point(field_release:pb.XUser.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUser::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pb.XUser.username)
}

// .pb.XPermission permissions = 4;
inline bool XUser::has_permissions() const {
  return this != internal_default_instance() && permissions_ != nullptr;
}
inline void XUser::clear_permissions() {
  if (GetArenaNoVirtual() == nullptr && permissions_ != nullptr) {
    delete permissions_;
  }
  permissions_ = nullptr;
}
inline const ::pb::XPermission& XUser::permissions() const {
  const ::pb::XPermission* p = permissions_;
  // @@protoc_insertion_point(field_get:pb.XUser.permissions)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::XPermission*>(
      &::pb::_XPermission_default_instance_);
}
inline ::pb::XPermission* XUser::release_permissions() {
  // @@protoc_insertion_point(field_release:pb.XUser.permissions)
  
  ::pb::XPermission* temp = permissions_;
  permissions_ = nullptr;
  return temp;
}
inline ::pb::XPermission* XUser::mutable_permissions() {
  
  if (permissions_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::XPermission>(GetArenaNoVirtual());
    permissions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.XUser.permissions)
  return permissions_;
}
inline void XUser::set_allocated_permissions(::pb::XPermission* permissions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete permissions_;
  }
  if (permissions) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      permissions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, permissions, submessage_arena);
    }
    
  } else {
    
  }
  permissions_ = permissions;
  // @@protoc_insertion_point(field_set_allocated:pb.XUser.permissions)
}

// -------------------------------------------------------------------

// RspCurrentUser

// bool success = 1;
inline void RspCurrentUser::clear_success() {
  success_ = false;
}
inline bool RspCurrentUser::success() const {
  // @@protoc_insertion_point(field_get:pb.RspCurrentUser.success)
  return success_;
}
inline void RspCurrentUser::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.RspCurrentUser.success)
}

// .pb.XUser user = 2;
inline bool RspCurrentUser::has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline void RspCurrentUser::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::pb::XUser& RspCurrentUser::user() const {
  const ::pb::XUser* p = user_;
  // @@protoc_insertion_point(field_get:pb.RspCurrentUser.user)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::XUser*>(
      &::pb::_XUser_default_instance_);
}
inline ::pb::XUser* RspCurrentUser::release_user() {
  // @@protoc_insertion_point(field_release:pb.RspCurrentUser.user)
  
  ::pb::XUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::pb::XUser* RspCurrentUser::mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::XUser>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RspCurrentUser.user)
  return user_;
}
inline void RspCurrentUser::set_allocated_user(::pb::XUser* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:pb.RspCurrentUser.user)
}

// -------------------------------------------------------------------

// XPermission

// string role = 1;
inline void XPermission::clear_role() {
  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XPermission::role() const {
  // @@protoc_insertion_point(field_get:pb.XPermission.role)
  return role_.GetNoArena();
}
inline void XPermission::set_role(const ::std::string& value) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XPermission.role)
}
#if LANG_CXX11
inline void XPermission::set_role(::std::string&& value) {
  
  role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XPermission.role)
}
#endif
inline void XPermission::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XPermission.role)
}
inline void XPermission::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XPermission.role)
}
inline ::std::string* XPermission::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:pb.XPermission.role)
  return role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XPermission::release_role() {
  // @@protoc_insertion_point(field_release:pb.XPermission.role)
  
  return role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XPermission::set_allocated_role(::std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:pb.XPermission.role)
}

// repeated string visit = 2;
inline int XPermission::visit_size() const {
  return visit_.size();
}
inline void XPermission::clear_visit() {
  visit_.Clear();
}
inline const ::std::string& XPermission::visit(int index) const {
  // @@protoc_insertion_point(field_get:pb.XPermission.visit)
  return visit_.Get(index);
}
inline ::std::string* XPermission::mutable_visit(int index) {
  // @@protoc_insertion_point(field_mutable:pb.XPermission.visit)
  return visit_.Mutable(index);
}
inline void XPermission::set_visit(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.XPermission.visit)
  visit_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XPermission::set_visit(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.XPermission.visit)
  visit_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XPermission::set_visit(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  visit_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.XPermission.visit)
}
inline void XPermission::set_visit(int index, const char* value, size_t size) {
  visit_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.XPermission.visit)
}
inline ::std::string* XPermission::add_visit() {
  // @@protoc_insertion_point(field_add_mutable:pb.XPermission.visit)
  return visit_.Add();
}
inline void XPermission::add_visit(const ::std::string& value) {
  visit_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.XPermission.visit)
}
#if LANG_CXX11
inline void XPermission::add_visit(::std::string&& value) {
  visit_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.XPermission.visit)
}
#endif
inline void XPermission::add_visit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  visit_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.XPermission.visit)
}
inline void XPermission::add_visit(const char* value, size_t size) {
  visit_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.XPermission.visit)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
XPermission::visit() const {
  // @@protoc_insertion_point(field_list:pb.XPermission.visit)
  return visit_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
XPermission::mutable_visit() {
  // @@protoc_insertion_point(field_mutable_list:pb.XPermission.visit)
  return &visit_;
}

// -------------------------------------------------------------------

// XUsersItem

// string address = 1;
inline void XUsersItem::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::address() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.address)
  return address_.GetNoArena();
}
inline void XUsersItem::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.address)
}
#if LANG_CXX11
inline void XUsersItem::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.address)
}
#endif
inline void XUsersItem::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.address)
}
inline void XUsersItem::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.address)
}
inline ::std::string* XUsersItem::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_address() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.address)
}

// int32 age = 2;
inline void XUsersItem::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 XUsersItem::age() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.age)
  return age_;
}
inline void XUsersItem::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:pb.XUsersItem.age)
}

// string avatar = 3;
inline void XUsersItem::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::avatar() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.avatar)
  return avatar_.GetNoArena();
}
inline void XUsersItem::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.avatar)
}
#if LANG_CXX11
inline void XUsersItem::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.avatar)
}
#endif
inline void XUsersItem::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.avatar)
}
inline void XUsersItem::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.avatar)
}
inline ::std::string* XUsersItem::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_avatar() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_avatar(::std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.avatar)
}

// string create_time = 4;
inline void XUsersItem::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::create_time() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.create_time)
  return create_time_.GetNoArena();
}
inline void XUsersItem::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.create_time)
}
#if LANG_CXX11
inline void XUsersItem::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.create_time)
}
#endif
inline void XUsersItem::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.create_time)
}
inline void XUsersItem::set_create_time(const char* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.create_time)
}
inline ::std::string* XUsersItem::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_create_time() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_create_time(::std::string* create_time) {
  if (create_time != nullptr) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.create_time)
}

// string email = 5;
inline void XUsersItem::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::email() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.email)
  return email_.GetNoArena();
}
inline void XUsersItem::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.email)
}
#if LANG_CXX11
inline void XUsersItem::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.email)
}
#endif
inline void XUsersItem::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.email)
}
inline void XUsersItem::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.email)
}
inline ::std::string* XUsersItem::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_email() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_email(::std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.email)
}

// string id = 6;
inline void XUsersItem::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::id() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.id)
  return id_.GetNoArena();
}
inline void XUsersItem::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.id)
}
#if LANG_CXX11
inline void XUsersItem::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.id)
}
#endif
inline void XUsersItem::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.id)
}
inline void XUsersItem::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.id)
}
inline ::std::string* XUsersItem::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_id() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.id)
}

// bool is_male = 7;
inline void XUsersItem::clear_is_male() {
  is_male_ = false;
}
inline bool XUsersItem::is_male() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.is_male)
  return is_male_;
}
inline void XUsersItem::set_is_male(bool value) {
  
  is_male_ = value;
  // @@protoc_insertion_point(field_set:pb.XUsersItem.is_male)
}

// string name = 8;
inline void XUsersItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::name() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.name)
  return name_.GetNoArena();
}
inline void XUsersItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.name)
}
#if LANG_CXX11
inline void XUsersItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.name)
}
#endif
inline void XUsersItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.name)
}
inline void XUsersItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.name)
}
inline ::std::string* XUsersItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_name() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.name)
}

// string nick_name = 9;
inline void XUsersItem::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::nick_name() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.nick_name)
  return nick_name_.GetNoArena();
}
inline void XUsersItem::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.nick_name)
}
#if LANG_CXX11
inline void XUsersItem::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.nick_name)
}
#endif
inline void XUsersItem::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.nick_name)
}
inline void XUsersItem::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.nick_name)
}
inline ::std::string* XUsersItem::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_nick_name() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.nick_name)
}

// string phone = 10;
inline void XUsersItem::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XUsersItem::phone() const {
  // @@protoc_insertion_point(field_get:pb.XUsersItem.phone)
  return phone_.GetNoArena();
}
inline void XUsersItem::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.XUsersItem.phone)
}
#if LANG_CXX11
inline void XUsersItem::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.XUsersItem.phone)
}
#endif
inline void XUsersItem::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.XUsersItem.phone)
}
inline void XUsersItem::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.XUsersItem.phone)
}
inline ::std::string* XUsersItem::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:pb.XUsersItem.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XUsersItem::release_phone() {
  // @@protoc_insertion_point(field_release:pb.XUsersItem.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XUsersItem::set_allocated_phone(::std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:pb.XUsersItem.phone)
}

// -------------------------------------------------------------------

// XUsersItemList

// repeated .pb.XUsersItem list = 1;
inline int XUsersItemList::list_size() const {
  return list_.size();
}
inline void XUsersItemList::clear_list() {
  list_.Clear();
}
inline ::pb::XUsersItem* XUsersItemList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.XUsersItemList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::XUsersItem >*
XUsersItemList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.XUsersItemList.list)
  return &list_;
}
inline const ::pb::XUsersItem& XUsersItemList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.XUsersItemList.list)
  return list_.Get(index);
}
inline ::pb::XUsersItem* XUsersItemList::add_list() {
  // @@protoc_insertion_point(field_add:pb.XUsersItemList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::XUsersItem >&
XUsersItemList::list() const {
  // @@protoc_insertion_point(field_list:pb.XUsersItemList.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_goshare_2eproto
