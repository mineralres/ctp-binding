// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef PROTOBUF_INCLUDED_market_5fdata_2eproto
#define PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_market_5fdata_2eproto();
namespace pb {
class Kline;
class KlineDefaultTypeInternal;
extern KlineDefaultTypeInternal _Kline_default_instance_;
class KlineSeries;
class KlineSeriesDefaultTypeInternal;
extern KlineSeriesDefaultTypeInternal _KlineSeries_default_instance_;
class MarketDataSnapshot;
class MarketDataSnapshotDefaultTypeInternal;
extern MarketDataSnapshotDefaultTypeInternal _MarketDataSnapshot_default_instance_;
class MdsList;
class MdsListDefaultTypeInternal;
extern MdsListDefaultTypeInternal _MdsList_default_instance_;
class OptionTMarket;
class OptionTMarketDefaultTypeInternal;
extern OptionTMarketDefaultTypeInternal _OptionTMarket_default_instance_;
class OptionTQuoteItem;
class OptionTQuoteItemDefaultTypeInternal;
extern OptionTQuoteItemDefaultTypeInternal _OptionTQuoteItem_default_instance_;
class OptionTQuoteItemList;
class OptionTQuoteItemListDefaultTypeInternal;
extern OptionTQuoteItemListDefaultTypeInternal _OptionTQuoteItemList_default_instance_;
class OrderBook;
class OrderBookDefaultTypeInternal;
extern OrderBookDefaultTypeInternal _OrderBook_default_instance_;
class ReqSubscribeMarketData;
class ReqSubscribeMarketDataDefaultTypeInternal;
extern ReqSubscribeMarketDataDefaultTypeInternal _ReqSubscribeMarketData_default_instance_;
class RspSubscribeMarketData;
class RspSubscribeMarketDataDefaultTypeInternal;
extern RspSubscribeMarketDataDefaultTypeInternal _RspSubscribeMarketData_default_instance_;
class RtnMarketDataUpdate;
class RtnMarketDataUpdateDefaultTypeInternal;
extern RtnMarketDataUpdateDefaultTypeInternal _RtnMarketDataUpdate_default_instance_;
class SimpleTick;
class SimpleTickDefaultTypeInternal;
extern SimpleTickDefaultTypeInternal _SimpleTick_default_instance_;
class SimpleTickForTQuote;
class SimpleTickForTQuoteDefaultTypeInternal;
extern SimpleTickForTQuoteDefaultTypeInternal _SimpleTickForTQuote_default_instance_;
class SimpleTickSeries;
class SimpleTickSeriesDefaultTypeInternal;
extern SimpleTickSeriesDefaultTypeInternal _SimpleTickSeries_default_instance_;
class TickSeries;
class TickSeriesDefaultTypeInternal;
extern TickSeriesDefaultTypeInternal _TickSeries_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::Kline* Arena::CreateMaybeMessage<::pb::Kline>(Arena*);
template<> ::pb::KlineSeries* Arena::CreateMaybeMessage<::pb::KlineSeries>(Arena*);
template<> ::pb::MarketDataSnapshot* Arena::CreateMaybeMessage<::pb::MarketDataSnapshot>(Arena*);
template<> ::pb::MdsList* Arena::CreateMaybeMessage<::pb::MdsList>(Arena*);
template<> ::pb::OptionTMarket* Arena::CreateMaybeMessage<::pb::OptionTMarket>(Arena*);
template<> ::pb::OptionTQuoteItem* Arena::CreateMaybeMessage<::pb::OptionTQuoteItem>(Arena*);
template<> ::pb::OptionTQuoteItemList* Arena::CreateMaybeMessage<::pb::OptionTQuoteItemList>(Arena*);
template<> ::pb::OrderBook* Arena::CreateMaybeMessage<::pb::OrderBook>(Arena*);
template<> ::pb::ReqSubscribeMarketData* Arena::CreateMaybeMessage<::pb::ReqSubscribeMarketData>(Arena*);
template<> ::pb::RspSubscribeMarketData* Arena::CreateMaybeMessage<::pb::RspSubscribeMarketData>(Arena*);
template<> ::pb::RtnMarketDataUpdate* Arena::CreateMaybeMessage<::pb::RtnMarketDataUpdate>(Arena*);
template<> ::pb::SimpleTick* Arena::CreateMaybeMessage<::pb::SimpleTick>(Arena*);
template<> ::pb::SimpleTickForTQuote* Arena::CreateMaybeMessage<::pb::SimpleTickForTQuote>(Arena*);
template<> ::pb::SimpleTickSeries* Arena::CreateMaybeMessage<::pb::SimpleTickSeries>(Arena*);
template<> ::pb::TickSeries* Arena::CreateMaybeMessage<::pb::TickSeries>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class OrderBook :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OrderBook) */ {
 public:
  OrderBook();
  virtual ~OrderBook();

  OrderBook(const OrderBook& from);

  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBook(OrderBook&& from) noexcept
    : OrderBook() {
    *this = ::std::move(from);
  }

  inline OrderBook& operator=(OrderBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBook* internal_default_instance() {
    return reinterpret_cast<const OrderBook*>(
               &_OrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OrderBook* other);
  friend void swap(OrderBook& a, OrderBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBook* New() const final {
    return CreateMaybeMessage<OrderBook>(nullptr);
  }

  OrderBook* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderBook>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderBook& from);
  void MergeFrom(const OrderBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double ask = 1;
  void clear_ask();
  static const int kAskFieldNumber = 1;
  double ask() const;
  void set_ask(double value);

  // double ask_volume = 2;
  void clear_ask_volume();
  static const int kAskVolumeFieldNumber = 2;
  double ask_volume() const;
  void set_ask_volume(double value);

  // double bid = 3;
  void clear_bid();
  static const int kBidFieldNumber = 3;
  double bid() const;
  void set_bid(double value);

  // double bid_volume = 4;
  void clear_bid_volume();
  static const int kBidVolumeFieldNumber = 4;
  double bid_volume() const;
  void set_bid_volume(double value);

  // @@protoc_insertion_point(class_scope:pb.OrderBook)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double ask_;
  double ask_volume_;
  double bid_;
  double bid_volume_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataSnapshot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MarketDataSnapshot) */ {
 public:
  MarketDataSnapshot();
  virtual ~MarketDataSnapshot();

  MarketDataSnapshot(const MarketDataSnapshot& from);

  inline MarketDataSnapshot& operator=(const MarketDataSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketDataSnapshot(MarketDataSnapshot&& from) noexcept
    : MarketDataSnapshot() {
    *this = ::std::move(from);
  }

  inline MarketDataSnapshot& operator=(MarketDataSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarketDataSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataSnapshot* internal_default_instance() {
    return reinterpret_cast<const MarketDataSnapshot*>(
               &_MarketDataSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MarketDataSnapshot* other);
  friend void swap(MarketDataSnapshot& a, MarketDataSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketDataSnapshot* New() const final {
    return CreateMaybeMessage<MarketDataSnapshot>(nullptr);
  }

  MarketDataSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketDataSnapshot& from);
  void MergeFrom(const MarketDataSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OrderBook order_book_list = 22;
  int order_book_list_size() const;
  void clear_order_book_list();
  static const int kOrderBookListFieldNumber = 22;
  ::pb::OrderBook* mutable_order_book_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OrderBook >*
      mutable_order_book_list();
  const ::pb::OrderBook& order_book_list(int index) const;
  ::pb::OrderBook* add_order_book_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::OrderBook >&
      order_book_list() const;

  // string name = 23;
  void clear_name();
  static const int kNameFieldNumber = 23;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double open = 4;
  void clear_open();
  static const int kOpenFieldNumber = 4;
  double open() const;
  void set_open(double value);

  // double high = 5;
  void clear_high();
  static const int kHighFieldNumber = 5;
  double high() const;
  void set_high(double value);

  // double low = 6;
  void clear_low();
  static const int kLowFieldNumber = 6;
  double low() const;
  void set_low(double value);

  // double close = 7;
  void clear_close();
  static const int kCloseFieldNumber = 7;
  double close() const;
  void set_close(double value);

  // double volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  double volume() const;
  void set_volume(double value);

  // double amount = 9;
  void clear_amount();
  static const int kAmountFieldNumber = 9;
  double amount() const;
  void set_amount(double value);

  // double position = 10;
  void clear_position();
  static const int kPositionFieldNumber = 10;
  double position() const;
  void set_position(double value);

  // double price = 11;
  void clear_price();
  static const int kPriceFieldNumber = 11;
  double price() const;
  void set_price(double value);

  // double pre_close = 12;
  void clear_pre_close();
  static const int kPreCloseFieldNumber = 12;
  double pre_close() const;
  void set_pre_close(double value);

  // int32 milliseconds = 3;
  void clear_milliseconds();
  static const int kMillisecondsFieldNumber = 3;
  ::google::protobuf::int32 milliseconds() const;
  void set_milliseconds(::google::protobuf::int32 value);

  // int32 trading_day = 21;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 21;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // double pre_settlement_price = 13;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 13;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // double pre_position = 14;
  void clear_pre_position();
  static const int kPrePositionFieldNumber = 14;
  double pre_position() const;
  void set_pre_position(double value);

  // double settlement_price = 15;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 15;
  double settlement_price() const;
  void set_settlement_price(double value);

  // double upper_limit_price = 16;
  void clear_upper_limit_price();
  static const int kUpperLimitPriceFieldNumber = 16;
  double upper_limit_price() const;
  void set_upper_limit_price(double value);

  // double lower_limit_price = 17;
  void clear_lower_limit_price();
  static const int kLowerLimitPriceFieldNumber = 17;
  double lower_limit_price() const;
  void set_lower_limit_price(double value);

  // double pre_delta = 18;
  void clear_pre_delta();
  static const int kPreDeltaFieldNumber = 18;
  double pre_delta() const;
  void set_pre_delta(double value);

  // double delta = 19;
  void clear_delta();
  static const int kDeltaFieldNumber = 19;
  double delta() const;
  void set_delta(double value);

  // double average_price = 20;
  void clear_average_price();
  static const int kAveragePriceFieldNumber = 20;
  double average_price() const;
  void set_average_price(double value);

  // double exercise_price = 24;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 24;
  double exercise_price() const;
  void set_exercise_price(double value);

  // double volume_delta = 25;
  void clear_volume_delta();
  static const int kVolumeDeltaFieldNumber = 25;
  double volume_delta() const;
  void set_volume_delta(double value);

  // @@protoc_insertion_point(class_scope:pb.MarketDataSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OrderBook > order_book_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int64 time_;
  double open_;
  double high_;
  double low_;
  double close_;
  double volume_;
  double amount_;
  double position_;
  double price_;
  double pre_close_;
  ::google::protobuf::int32 milliseconds_;
  ::google::protobuf::int32 trading_day_;
  double pre_settlement_price_;
  double pre_position_;
  double settlement_price_;
  double upper_limit_price_;
  double lower_limit_price_;
  double pre_delta_;
  double delta_;
  double average_price_;
  double exercise_price_;
  double volume_delta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MdsList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MdsList) */ {
 public:
  MdsList();
  virtual ~MdsList();

  MdsList(const MdsList& from);

  inline MdsList& operator=(const MdsList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MdsList(MdsList&& from) noexcept
    : MdsList() {
    *this = ::std::move(from);
  }

  inline MdsList& operator=(MdsList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MdsList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MdsList* internal_default_instance() {
    return reinterpret_cast<const MdsList*>(
               &_MdsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MdsList* other);
  friend void swap(MdsList& a, MdsList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MdsList* New() const final {
    return CreateMaybeMessage<MdsList>(nullptr);
  }

  MdsList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MdsList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MdsList& from);
  void MergeFrom(const MdsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MdsList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MarketDataSnapshot list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::MarketDataSnapshot* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >*
      mutable_list();
  const ::pb::MarketDataSnapshot& list(int index) const;
  ::pb::MarketDataSnapshot* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.MdsList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OptionTMarket :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OptionTMarket) */ {
 public:
  OptionTMarket();
  virtual ~OptionTMarket();

  OptionTMarket(const OptionTMarket& from);

  inline OptionTMarket& operator=(const OptionTMarket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionTMarket(OptionTMarket&& from) noexcept
    : OptionTMarket() {
    *this = ::std::move(from);
  }

  inline OptionTMarket& operator=(OptionTMarket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OptionTMarket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionTMarket* internal_default_instance() {
    return reinterpret_cast<const OptionTMarket*>(
               &_OptionTMarket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OptionTMarket* other);
  friend void swap(OptionTMarket& a, OptionTMarket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionTMarket* New() const final {
    return CreateMaybeMessage<OptionTMarket>(nullptr);
  }

  OptionTMarket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionTMarket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionTMarket& from);
  void MergeFrom(const OptionTMarket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionTMarket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.MarketDataSnapshot callTk = 1;
  bool has_calltk() const;
  void clear_calltk();
  static const int kCallTkFieldNumber = 1;
  const ::pb::MarketDataSnapshot& calltk() const;
  ::pb::MarketDataSnapshot* release_calltk();
  ::pb::MarketDataSnapshot* mutable_calltk();
  void set_allocated_calltk(::pb::MarketDataSnapshot* calltk);

  // .pb.MarketDataSnapshot putTk = 2;
  bool has_puttk() const;
  void clear_puttk();
  static const int kPutTkFieldNumber = 2;
  const ::pb::MarketDataSnapshot& puttk() const;
  ::pb::MarketDataSnapshot* release_puttk();
  ::pb::MarketDataSnapshot* mutable_puttk();
  void set_allocated_puttk(::pb::MarketDataSnapshot* puttk);

  // @@protoc_insertion_point(class_scope:pb.OptionTMarket)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::MarketDataSnapshot* calltk_;
  ::pb::MarketDataSnapshot* puttk_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SimpleTickForTQuote :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SimpleTickForTQuote) */ {
 public:
  SimpleTickForTQuote();
  virtual ~SimpleTickForTQuote();

  SimpleTickForTQuote(const SimpleTickForTQuote& from);

  inline SimpleTickForTQuote& operator=(const SimpleTickForTQuote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleTickForTQuote(SimpleTickForTQuote&& from) noexcept
    : SimpleTickForTQuote() {
    *this = ::std::move(from);
  }

  inline SimpleTickForTQuote& operator=(SimpleTickForTQuote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleTickForTQuote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleTickForTQuote* internal_default_instance() {
    return reinterpret_cast<const SimpleTickForTQuote*>(
               &_SimpleTickForTQuote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SimpleTickForTQuote* other);
  friend void swap(SimpleTickForTQuote& a, SimpleTickForTQuote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleTickForTQuote* New() const final {
    return CreateMaybeMessage<SimpleTickForTQuote>(nullptr);
  }

  SimpleTickForTQuote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleTickForTQuote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleTickForTQuote& from);
  void MergeFrom(const SimpleTickForTQuote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTickForTQuote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // double up_down_ratio = 3;
  void clear_up_down_ratio();
  static const int kUpDownRatioFieldNumber = 3;
  double up_down_ratio() const;
  void set_up_down_ratio(double value);

  // double pre_settlement_price = 4;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 4;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // @@protoc_insertion_point(class_scope:pb.SimpleTickForTQuote)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::pb::Symbol* symbol_;
  double price_;
  double up_down_ratio_;
  double pre_settlement_price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OptionTQuoteItem :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OptionTQuoteItem) */ {
 public:
  OptionTQuoteItem();
  virtual ~OptionTQuoteItem();

  OptionTQuoteItem(const OptionTQuoteItem& from);

  inline OptionTQuoteItem& operator=(const OptionTQuoteItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionTQuoteItem(OptionTQuoteItem&& from) noexcept
    : OptionTQuoteItem() {
    *this = ::std::move(from);
  }

  inline OptionTQuoteItem& operator=(OptionTQuoteItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OptionTQuoteItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionTQuoteItem* internal_default_instance() {
    return reinterpret_cast<const OptionTQuoteItem*>(
               &_OptionTQuoteItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OptionTQuoteItem* other);
  friend void swap(OptionTQuoteItem& a, OptionTQuoteItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionTQuoteItem* New() const final {
    return CreateMaybeMessage<OptionTQuoteItem>(nullptr);
  }

  OptionTQuoteItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionTQuoteItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionTQuoteItem& from);
  void MergeFrom(const OptionTQuoteItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionTQuoteItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exercise_price_flag = 4;
  void clear_exercise_price_flag();
  static const int kExercisePriceFlagFieldNumber = 4;
  const ::std::string& exercise_price_flag() const;
  void set_exercise_price_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_exercise_price_flag(::std::string&& value);
  #endif
  void set_exercise_price_flag(const char* value);
  void set_exercise_price_flag(const char* value, size_t size);
  ::std::string* mutable_exercise_price_flag();
  ::std::string* release_exercise_price_flag();
  void set_allocated_exercise_price_flag(::std::string* exercise_price_flag);

  // .pb.SimpleTickForTQuote call = 2;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 2;
  const ::pb::SimpleTickForTQuote& call() const;
  ::pb::SimpleTickForTQuote* release_call();
  ::pb::SimpleTickForTQuote* mutable_call();
  void set_allocated_call(::pb::SimpleTickForTQuote* call);

  // .pb.SimpleTickForTQuote put = 3;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 3;
  const ::pb::SimpleTickForTQuote& put() const;
  ::pb::SimpleTickForTQuote* release_put();
  ::pb::SimpleTickForTQuote* mutable_put();
  void set_allocated_put(::pb::SimpleTickForTQuote* put);

  // double exercise_price = 1;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 1;
  double exercise_price() const;
  void set_exercise_price(double value);

  // @@protoc_insertion_point(class_scope:pb.OptionTQuoteItem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exercise_price_flag_;
  ::pb::SimpleTickForTQuote* call_;
  ::pb::SimpleTickForTQuote* put_;
  double exercise_price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OptionTQuoteItemList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OptionTQuoteItemList) */ {
 public:
  OptionTQuoteItemList();
  virtual ~OptionTQuoteItemList();

  OptionTQuoteItemList(const OptionTQuoteItemList& from);

  inline OptionTQuoteItemList& operator=(const OptionTQuoteItemList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionTQuoteItemList(OptionTQuoteItemList&& from) noexcept
    : OptionTQuoteItemList() {
    *this = ::std::move(from);
  }

  inline OptionTQuoteItemList& operator=(OptionTQuoteItemList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OptionTQuoteItemList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionTQuoteItemList* internal_default_instance() {
    return reinterpret_cast<const OptionTQuoteItemList*>(
               &_OptionTQuoteItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OptionTQuoteItemList* other);
  friend void swap(OptionTQuoteItemList& a, OptionTQuoteItemList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionTQuoteItemList* New() const final {
    return CreateMaybeMessage<OptionTQuoteItemList>(nullptr);
  }

  OptionTQuoteItemList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionTQuoteItemList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionTQuoteItemList& from);
  void MergeFrom(const OptionTQuoteItemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionTQuoteItemList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OptionTQuoteItem list = 4;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 4;
  ::pb::OptionTQuoteItem* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OptionTQuoteItem >*
      mutable_list();
  const ::pb::OptionTQuoteItem& list(int index) const;
  ::pb::OptionTQuoteItem* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::OptionTQuoteItem >&
      list() const;

  // string strike_symbol = 2;
  void clear_strike_symbol();
  static const int kStrikeSymbolFieldNumber = 2;
  const ::std::string& strike_symbol() const;
  void set_strike_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_strike_symbol(::std::string&& value);
  #endif
  void set_strike_symbol(const char* value);
  void set_strike_symbol(const char* value, size_t size);
  ::std::string* mutable_strike_symbol();
  ::std::string* release_strike_symbol();
  void set_allocated_strike_symbol(::std::string* strike_symbol);

  // string month = 3;
  void clear_month();
  static const int kMonthFieldNumber = 3;
  const ::std::string& month() const;
  void set_month(const ::std::string& value);
  #if LANG_CXX11
  void set_month(::std::string&& value);
  #endif
  void set_month(const char* value);
  void set_month(const char* value, size_t size);
  ::std::string* mutable_month();
  ::std::string* release_month();
  void set_allocated_month(::std::string* month);

  // int32 exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::google::protobuf::int32 exchange() const;
  void set_exchange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OptionTQuoteItemList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OptionTQuoteItem > list_;
  ::google::protobuf::internal::ArenaStringPtr strike_symbol_;
  ::google::protobuf::internal::ArenaStringPtr month_;
  ::google::protobuf::int32 exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Kline :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Kline) */ {
 public:
  Kline();
  virtual ~Kline();

  Kline(const Kline& from);

  inline Kline& operator=(const Kline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Kline(Kline&& from) noexcept
    : Kline() {
    *this = ::std::move(from);
  }

  inline Kline& operator=(Kline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Kline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kline* internal_default_instance() {
    return reinterpret_cast<const Kline*>(
               &_Kline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Kline* other);
  friend void swap(Kline& a, Kline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Kline* New() const final {
    return CreateMaybeMessage<Kline>(nullptr);
  }

  Kline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Kline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Kline& from);
  void MergeFrom(const Kline& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double open = 2;
  void clear_open();
  static const int kOpenFieldNumber = 2;
  double open() const;
  void set_open(double value);

  // double high = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  double high() const;
  void set_high(double value);

  // double low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  double low() const;
  void set_low(double value);

  // double close = 5;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  double close() const;
  void set_close(double value);

  // double volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  double volume() const;
  void set_volume(double value);

  // double amount = 7;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  double amount() const;
  void set_amount(double value);

  // double position = 8;
  void clear_position();
  static const int kPositionFieldNumber = 8;
  double position() const;
  void set_position(double value);

  // int32 trading_day = 9;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 9;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Kline)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 time_;
  double open_;
  double high_;
  double low_;
  double close_;
  double volume_;
  double amount_;
  double position_;
  ::google::protobuf::int32 trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class KlineSeries :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.KlineSeries) */ {
 public:
  KlineSeries();
  virtual ~KlineSeries();

  KlineSeries(const KlineSeries& from);

  inline KlineSeries& operator=(const KlineSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KlineSeries(KlineSeries&& from) noexcept
    : KlineSeries() {
    *this = ::std::move(from);
  }

  inline KlineSeries& operator=(KlineSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KlineSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KlineSeries* internal_default_instance() {
    return reinterpret_cast<const KlineSeries*>(
               &_KlineSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(KlineSeries* other);
  friend void swap(KlineSeries& a, KlineSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KlineSeries* New() const final {
    return CreateMaybeMessage<KlineSeries>(nullptr);
  }

  KlineSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KlineSeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KlineSeries& from);
  void MergeFrom(const KlineSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KlineSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Kline list = 4;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 4;
  ::pb::Kline* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Kline >*
      mutable_list();
  const ::pb::Kline& list(int index) const;
  ::pb::Kline* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::Kline >&
      list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.PeriodType period = 2;
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  ::pb::PeriodType period() const;
  void set_period(::pb::PeriodType value);

  // int32 period_in_seconds = 3;
  void clear_period_in_seconds();
  static const int kPeriodInSecondsFieldNumber = 3;
  ::google::protobuf::int32 period_in_seconds() const;
  void set_period_in_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.KlineSeries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Kline > list_;
  ::pb::Symbol* symbol_;
  int period_;
  ::google::protobuf::int32 period_in_seconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class ReqSubscribeMarketData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqSubscribeMarketData) */ {
 public:
  ReqSubscribeMarketData();
  virtual ~ReqSubscribeMarketData();

  ReqSubscribeMarketData(const ReqSubscribeMarketData& from);

  inline ReqSubscribeMarketData& operator=(const ReqSubscribeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSubscribeMarketData(ReqSubscribeMarketData&& from) noexcept
    : ReqSubscribeMarketData() {
    *this = ::std::move(from);
  }

  inline ReqSubscribeMarketData& operator=(ReqSubscribeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqSubscribeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSubscribeMarketData* internal_default_instance() {
    return reinterpret_cast<const ReqSubscribeMarketData*>(
               &_ReqSubscribeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ReqSubscribeMarketData* other);
  friend void swap(ReqSubscribeMarketData& a, ReqSubscribeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSubscribeMarketData* New() const final {
    return CreateMaybeMessage<ReqSubscribeMarketData>(nullptr);
  }

  ReqSubscribeMarketData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSubscribeMarketData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSubscribeMarketData& from);
  void MergeFrom(const ReqSubscribeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSubscribeMarketData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.PeriodType periodList = 2;
  int periodlist_size() const;
  void clear_periodlist();
  static const int kPeriodListFieldNumber = 2;
  ::pb::PeriodType periodlist(int index) const;
  void set_periodlist(int index, ::pb::PeriodType value);
  void add_periodlist(::pb::PeriodType value);
  const ::google::protobuf::RepeatedField<int>& periodlist() const;
  ::google::protobuf::RepeatedField<int>* mutable_periodlist();

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // @@protoc_insertion_point(class_scope:pb.ReqSubscribeMarketData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> periodlist_;
  mutable std::atomic<int> _periodlist_cached_byte_size_;
  ::pb::Symbol* symbol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class RspSubscribeMarketData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RspSubscribeMarketData) */ {
 public:
  RspSubscribeMarketData();
  virtual ~RspSubscribeMarketData();

  RspSubscribeMarketData(const RspSubscribeMarketData& from);

  inline RspSubscribeMarketData& operator=(const RspSubscribeMarketData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RspSubscribeMarketData(RspSubscribeMarketData&& from) noexcept
    : RspSubscribeMarketData() {
    *this = ::std::move(from);
  }

  inline RspSubscribeMarketData& operator=(RspSubscribeMarketData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RspSubscribeMarketData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RspSubscribeMarketData* internal_default_instance() {
    return reinterpret_cast<const RspSubscribeMarketData*>(
               &_RspSubscribeMarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RspSubscribeMarketData* other);
  friend void swap(RspSubscribeMarketData& a, RspSubscribeMarketData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RspSubscribeMarketData* New() const final {
    return CreateMaybeMessage<RspSubscribeMarketData>(nullptr);
  }

  RspSubscribeMarketData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RspSubscribeMarketData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RspSubscribeMarketData& from);
  void MergeFrom(const RspSubscribeMarketData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspSubscribeMarketData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.RspSubscribeMarketData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class RtnMarketDataUpdate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RtnMarketDataUpdate) */ {
 public:
  RtnMarketDataUpdate();
  virtual ~RtnMarketDataUpdate();

  RtnMarketDataUpdate(const RtnMarketDataUpdate& from);

  inline RtnMarketDataUpdate& operator=(const RtnMarketDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RtnMarketDataUpdate(RtnMarketDataUpdate&& from) noexcept
    : RtnMarketDataUpdate() {
    *this = ::std::move(from);
  }

  inline RtnMarketDataUpdate& operator=(RtnMarketDataUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RtnMarketDataUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RtnMarketDataUpdate* internal_default_instance() {
    return reinterpret_cast<const RtnMarketDataUpdate*>(
               &_RtnMarketDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RtnMarketDataUpdate* other);
  friend void swap(RtnMarketDataUpdate& a, RtnMarketDataUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RtnMarketDataUpdate* New() const final {
    return CreateMaybeMessage<RtnMarketDataUpdate>(nullptr);
  }

  RtnMarketDataUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RtnMarketDataUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RtnMarketDataUpdate& from);
  void MergeFrom(const RtnMarketDataUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtnMarketDataUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Kline kline_list = 2;
  int kline_list_size() const;
  void clear_kline_list();
  static const int kKlineListFieldNumber = 2;
  ::pb::Kline* mutable_kline_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Kline >*
      mutable_kline_list();
  const ::pb::Kline& kline_list(int index) const;
  ::pb::Kline* add_kline_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::Kline >&
      kline_list() const;

  // .pb.MarketDataSnapshot tick = 1;
  bool has_tick() const;
  void clear_tick();
  static const int kTickFieldNumber = 1;
  const ::pb::MarketDataSnapshot& tick() const;
  ::pb::MarketDataSnapshot* release_tick();
  ::pb::MarketDataSnapshot* mutable_tick();
  void set_allocated_tick(::pb::MarketDataSnapshot* tick);

  // @@protoc_insertion_point(class_scope:pb.RtnMarketDataUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Kline > kline_list_;
  ::pb::MarketDataSnapshot* tick_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class TickSeries :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TickSeries) */ {
 public:
  TickSeries();
  virtual ~TickSeries();

  TickSeries(const TickSeries& from);

  inline TickSeries& operator=(const TickSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TickSeries(TickSeries&& from) noexcept
    : TickSeries() {
    *this = ::std::move(from);
  }

  inline TickSeries& operator=(TickSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TickSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TickSeries* internal_default_instance() {
    return reinterpret_cast<const TickSeries*>(
               &_TickSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TickSeries* other);
  friend void swap(TickSeries& a, TickSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TickSeries* New() const final {
    return CreateMaybeMessage<TickSeries>(nullptr);
  }

  TickSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TickSeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TickSeries& from);
  void MergeFrom(const TickSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MarketDataSnapshot list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  ::pb::MarketDataSnapshot* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >*
      mutable_list();
  const ::pb::MarketDataSnapshot& list(int index) const;
  ::pb::MarketDataSnapshot* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >&
      list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 trading_day = 2;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TickSeries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot > list_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int32 trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SimpleTick :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SimpleTick) */ {
 public:
  SimpleTick();
  virtual ~SimpleTick();

  SimpleTick(const SimpleTick& from);

  inline SimpleTick& operator=(const SimpleTick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleTick(SimpleTick&& from) noexcept
    : SimpleTick() {
    *this = ::std::move(from);
  }

  inline SimpleTick& operator=(SimpleTick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleTick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleTick* internal_default_instance() {
    return reinterpret_cast<const SimpleTick*>(
               &_SimpleTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SimpleTick* other);
  friend void swap(SimpleTick& a, SimpleTick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleTick* New() const final {
    return CreateMaybeMessage<SimpleTick>(nullptr);
  }

  SimpleTick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleTick>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleTick& from);
  void MergeFrom(const SimpleTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // double volume = 3;
  void clear_volume();
  static const int kVolumeFieldNumber = 3;
  double volume() const;
  void set_volume(double value);

  // @@protoc_insertion_point(class_scope:pb.SimpleTick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 time_;
  double price_;
  double volume_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SimpleTickSeries :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SimpleTickSeries) */ {
 public:
  SimpleTickSeries();
  virtual ~SimpleTickSeries();

  SimpleTickSeries(const SimpleTickSeries& from);

  inline SimpleTickSeries& operator=(const SimpleTickSeries& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleTickSeries(SimpleTickSeries&& from) noexcept
    : SimpleTickSeries() {
    *this = ::std::move(from);
  }

  inline SimpleTickSeries& operator=(SimpleTickSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleTickSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleTickSeries* internal_default_instance() {
    return reinterpret_cast<const SimpleTickSeries*>(
               &_SimpleTickSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SimpleTickSeries* other);
  friend void swap(SimpleTickSeries& a, SimpleTickSeries& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleTickSeries* New() const final {
    return CreateMaybeMessage<SimpleTickSeries>(nullptr);
  }

  SimpleTickSeries* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleTickSeries>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleTickSeries& from);
  void MergeFrom(const SimpleTickSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTickSeries* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SimpleTick list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  ::pb::SimpleTick* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTick >*
      mutable_list();
  const ::pb::SimpleTick& list(int index) const;
  ::pb::SimpleTick* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTick >&
      list() const;

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 trading_day = 2;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 2;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SimpleTickSeries)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTick > list_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int32 trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderBook

// double ask = 1;
inline void OrderBook::clear_ask() {
  ask_ = 0;
}
inline double OrderBook::ask() const {
  // @@protoc_insertion_point(field_get:pb.OrderBook.ask)
  return ask_;
}
inline void OrderBook::set_ask(double value) {
  
  ask_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderBook.ask)
}

// double ask_volume = 2;
inline void OrderBook::clear_ask_volume() {
  ask_volume_ = 0;
}
inline double OrderBook::ask_volume() const {
  // @@protoc_insertion_point(field_get:pb.OrderBook.ask_volume)
  return ask_volume_;
}
inline void OrderBook::set_ask_volume(double value) {
  
  ask_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderBook.ask_volume)
}

// double bid = 3;
inline void OrderBook::clear_bid() {
  bid_ = 0;
}
inline double OrderBook::bid() const {
  // @@protoc_insertion_point(field_get:pb.OrderBook.bid)
  return bid_;
}
inline void OrderBook::set_bid(double value) {
  
  bid_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderBook.bid)
}

// double bid_volume = 4;
inline void OrderBook::clear_bid_volume() {
  bid_volume_ = 0;
}
inline double OrderBook::bid_volume() const {
  // @@protoc_insertion_point(field_get:pb.OrderBook.bid_volume)
  return bid_volume_;
}
inline void OrderBook::set_bid_volume(double value) {
  
  bid_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderBook.bid_volume)
}

// -------------------------------------------------------------------

// MarketDataSnapshot

// .pb.Symbol symbol = 1;
inline bool MarketDataSnapshot::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& MarketDataSnapshot::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* MarketDataSnapshot::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.MarketDataSnapshot.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* MarketDataSnapshot::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.MarketDataSnapshot.symbol)
  return symbol_;
}
inline void MarketDataSnapshot::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.MarketDataSnapshot.symbol)
}

// int64 time = 2;
inline void MarketDataSnapshot::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketDataSnapshot::time() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.time)
  return time_;
}
inline void MarketDataSnapshot::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.time)
}

// int32 milliseconds = 3;
inline void MarketDataSnapshot::clear_milliseconds() {
  milliseconds_ = 0;
}
inline ::google::protobuf::int32 MarketDataSnapshot::milliseconds() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.milliseconds)
  return milliseconds_;
}
inline void MarketDataSnapshot::set_milliseconds(::google::protobuf::int32 value) {
  
  milliseconds_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.milliseconds)
}

// double open = 4;
inline void MarketDataSnapshot::clear_open() {
  open_ = 0;
}
inline double MarketDataSnapshot::open() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.open)
  return open_;
}
inline void MarketDataSnapshot::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.open)
}

// double high = 5;
inline void MarketDataSnapshot::clear_high() {
  high_ = 0;
}
inline double MarketDataSnapshot::high() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.high)
  return high_;
}
inline void MarketDataSnapshot::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.high)
}

// double low = 6;
inline void MarketDataSnapshot::clear_low() {
  low_ = 0;
}
inline double MarketDataSnapshot::low() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.low)
  return low_;
}
inline void MarketDataSnapshot::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.low)
}

// double close = 7;
inline void MarketDataSnapshot::clear_close() {
  close_ = 0;
}
inline double MarketDataSnapshot::close() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.close)
  return close_;
}
inline void MarketDataSnapshot::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.close)
}

// double volume = 8;
inline void MarketDataSnapshot::clear_volume() {
  volume_ = 0;
}
inline double MarketDataSnapshot::volume() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.volume)
  return volume_;
}
inline void MarketDataSnapshot::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.volume)
}

// double amount = 9;
inline void MarketDataSnapshot::clear_amount() {
  amount_ = 0;
}
inline double MarketDataSnapshot::amount() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.amount)
  return amount_;
}
inline void MarketDataSnapshot::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.amount)
}

// double position = 10;
inline void MarketDataSnapshot::clear_position() {
  position_ = 0;
}
inline double MarketDataSnapshot::position() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.position)
  return position_;
}
inline void MarketDataSnapshot::set_position(double value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.position)
}

// double price = 11;
inline void MarketDataSnapshot::clear_price() {
  price_ = 0;
}
inline double MarketDataSnapshot::price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.price)
  return price_;
}
inline void MarketDataSnapshot::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.price)
}

// double pre_close = 12;
inline void MarketDataSnapshot::clear_pre_close() {
  pre_close_ = 0;
}
inline double MarketDataSnapshot::pre_close() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.pre_close)
  return pre_close_;
}
inline void MarketDataSnapshot::set_pre_close(double value) {
  
  pre_close_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.pre_close)
}

// double pre_settlement_price = 13;
inline void MarketDataSnapshot::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double MarketDataSnapshot::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.pre_settlement_price)
  return pre_settlement_price_;
}
inline void MarketDataSnapshot::set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.pre_settlement_price)
}

// double pre_position = 14;
inline void MarketDataSnapshot::clear_pre_position() {
  pre_position_ = 0;
}
inline double MarketDataSnapshot::pre_position() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.pre_position)
  return pre_position_;
}
inline void MarketDataSnapshot::set_pre_position(double value) {
  
  pre_position_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.pre_position)
}

// double settlement_price = 15;
inline void MarketDataSnapshot::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double MarketDataSnapshot::settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.settlement_price)
  return settlement_price_;
}
inline void MarketDataSnapshot::set_settlement_price(double value) {
  
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.settlement_price)
}

// double upper_limit_price = 16;
inline void MarketDataSnapshot::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double MarketDataSnapshot::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.upper_limit_price)
  return upper_limit_price_;
}
inline void MarketDataSnapshot::set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.upper_limit_price)
}

// double lower_limit_price = 17;
inline void MarketDataSnapshot::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double MarketDataSnapshot::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.lower_limit_price)
  return lower_limit_price_;
}
inline void MarketDataSnapshot::set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.lower_limit_price)
}

// double pre_delta = 18;
inline void MarketDataSnapshot::clear_pre_delta() {
  pre_delta_ = 0;
}
inline double MarketDataSnapshot::pre_delta() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.pre_delta)
  return pre_delta_;
}
inline void MarketDataSnapshot::set_pre_delta(double value) {
  
  pre_delta_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.pre_delta)
}

// double delta = 19;
inline void MarketDataSnapshot::clear_delta() {
  delta_ = 0;
}
inline double MarketDataSnapshot::delta() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.delta)
  return delta_;
}
inline void MarketDataSnapshot::set_delta(double value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.delta)
}

// double average_price = 20;
inline void MarketDataSnapshot::clear_average_price() {
  average_price_ = 0;
}
inline double MarketDataSnapshot::average_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.average_price)
  return average_price_;
}
inline void MarketDataSnapshot::set_average_price(double value) {
  
  average_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.average_price)
}

// int32 trading_day = 21;
inline void MarketDataSnapshot::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 MarketDataSnapshot::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.trading_day)
  return trading_day_;
}
inline void MarketDataSnapshot::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.trading_day)
}

// repeated .pb.OrderBook order_book_list = 22;
inline int MarketDataSnapshot::order_book_list_size() const {
  return order_book_list_.size();
}
inline void MarketDataSnapshot::clear_order_book_list() {
  order_book_list_.Clear();
}
inline ::pb::OrderBook* MarketDataSnapshot::mutable_order_book_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MarketDataSnapshot.order_book_list)
  return order_book_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OrderBook >*
MarketDataSnapshot::mutable_order_book_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.MarketDataSnapshot.order_book_list)
  return &order_book_list_;
}
inline const ::pb::OrderBook& MarketDataSnapshot::order_book_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.order_book_list)
  return order_book_list_.Get(index);
}
inline ::pb::OrderBook* MarketDataSnapshot::add_order_book_list() {
  // @@protoc_insertion_point(field_add:pb.MarketDataSnapshot.order_book_list)
  return order_book_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OrderBook >&
MarketDataSnapshot::order_book_list() const {
  // @@protoc_insertion_point(field_list:pb.MarketDataSnapshot.order_book_list)
  return order_book_list_;
}

// string name = 23;
inline void MarketDataSnapshot::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketDataSnapshot::name() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.name)
  return name_.GetNoArena();
}
inline void MarketDataSnapshot::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.name)
}
#if LANG_CXX11
inline void MarketDataSnapshot::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MarketDataSnapshot.name)
}
#endif
inline void MarketDataSnapshot::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MarketDataSnapshot.name)
}
inline void MarketDataSnapshot::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MarketDataSnapshot.name)
}
inline ::std::string* MarketDataSnapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.MarketDataSnapshot.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketDataSnapshot::release_name() {
  // @@protoc_insertion_point(field_release:pb.MarketDataSnapshot.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketDataSnapshot::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.MarketDataSnapshot.name)
}

// double exercise_price = 24;
inline void MarketDataSnapshot::clear_exercise_price() {
  exercise_price_ = 0;
}
inline double MarketDataSnapshot::exercise_price() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.exercise_price)
  return exercise_price_;
}
inline void MarketDataSnapshot::set_exercise_price(double value) {
  
  exercise_price_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.exercise_price)
}

// double volume_delta = 25;
inline void MarketDataSnapshot::clear_volume_delta() {
  volume_delta_ = 0;
}
inline double MarketDataSnapshot::volume_delta() const {
  // @@protoc_insertion_point(field_get:pb.MarketDataSnapshot.volume_delta)
  return volume_delta_;
}
inline void MarketDataSnapshot::set_volume_delta(double value) {
  
  volume_delta_ = value;
  // @@protoc_insertion_point(field_set:pb.MarketDataSnapshot.volume_delta)
}

// -------------------------------------------------------------------

// MdsList

// repeated .pb.MarketDataSnapshot list = 1;
inline int MdsList::list_size() const {
  return list_.size();
}
inline void MdsList::clear_list() {
  list_.Clear();
}
inline ::pb::MarketDataSnapshot* MdsList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MdsList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >*
MdsList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.MdsList.list)
  return &list_;
}
inline const ::pb::MarketDataSnapshot& MdsList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.MdsList.list)
  return list_.Get(index);
}
inline ::pb::MarketDataSnapshot* MdsList::add_list() {
  // @@protoc_insertion_point(field_add:pb.MdsList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >&
MdsList::list() const {
  // @@protoc_insertion_point(field_list:pb.MdsList.list)
  return list_;
}

// -------------------------------------------------------------------

// OptionTMarket

// .pb.MarketDataSnapshot callTk = 1;
inline bool OptionTMarket::has_calltk() const {
  return this != internal_default_instance() && calltk_ != nullptr;
}
inline void OptionTMarket::clear_calltk() {
  if (GetArenaNoVirtual() == nullptr && calltk_ != nullptr) {
    delete calltk_;
  }
  calltk_ = nullptr;
}
inline const ::pb::MarketDataSnapshot& OptionTMarket::calltk() const {
  const ::pb::MarketDataSnapshot* p = calltk_;
  // @@protoc_insertion_point(field_get:pb.OptionTMarket.callTk)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketDataSnapshot*>(
      &::pb::_MarketDataSnapshot_default_instance_);
}
inline ::pb::MarketDataSnapshot* OptionTMarket::release_calltk() {
  // @@protoc_insertion_point(field_release:pb.OptionTMarket.callTk)
  
  ::pb::MarketDataSnapshot* temp = calltk_;
  calltk_ = nullptr;
  return temp;
}
inline ::pb::MarketDataSnapshot* OptionTMarket::mutable_calltk() {
  
  if (calltk_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketDataSnapshot>(GetArenaNoVirtual());
    calltk_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OptionTMarket.callTk)
  return calltk_;
}
inline void OptionTMarket::set_allocated_calltk(::pb::MarketDataSnapshot* calltk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete calltk_;
  }
  if (calltk) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      calltk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calltk, submessage_arena);
    }
    
  } else {
    
  }
  calltk_ = calltk;
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTMarket.callTk)
}

// .pb.MarketDataSnapshot putTk = 2;
inline bool OptionTMarket::has_puttk() const {
  return this != internal_default_instance() && puttk_ != nullptr;
}
inline void OptionTMarket::clear_puttk() {
  if (GetArenaNoVirtual() == nullptr && puttk_ != nullptr) {
    delete puttk_;
  }
  puttk_ = nullptr;
}
inline const ::pb::MarketDataSnapshot& OptionTMarket::puttk() const {
  const ::pb::MarketDataSnapshot* p = puttk_;
  // @@protoc_insertion_point(field_get:pb.OptionTMarket.putTk)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketDataSnapshot*>(
      &::pb::_MarketDataSnapshot_default_instance_);
}
inline ::pb::MarketDataSnapshot* OptionTMarket::release_puttk() {
  // @@protoc_insertion_point(field_release:pb.OptionTMarket.putTk)
  
  ::pb::MarketDataSnapshot* temp = puttk_;
  puttk_ = nullptr;
  return temp;
}
inline ::pb::MarketDataSnapshot* OptionTMarket::mutable_puttk() {
  
  if (puttk_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketDataSnapshot>(GetArenaNoVirtual());
    puttk_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OptionTMarket.putTk)
  return puttk_;
}
inline void OptionTMarket::set_allocated_puttk(::pb::MarketDataSnapshot* puttk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puttk_;
  }
  if (puttk) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puttk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puttk, submessage_arena);
    }
    
  } else {
    
  }
  puttk_ = puttk;
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTMarket.putTk)
}

// -------------------------------------------------------------------

// SimpleTickForTQuote

// .pb.Symbol symbol = 1;
inline bool SimpleTickForTQuote::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& SimpleTickForTQuote::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.SimpleTickForTQuote.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* SimpleTickForTQuote::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.SimpleTickForTQuote.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* SimpleTickForTQuote::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SimpleTickForTQuote.symbol)
  return symbol_;
}
inline void SimpleTickForTQuote::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.SimpleTickForTQuote.symbol)
}

// double price = 2;
inline void SimpleTickForTQuote::clear_price() {
  price_ = 0;
}
inline double SimpleTickForTQuote::price() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickForTQuote.price)
  return price_;
}
inline void SimpleTickForTQuote::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTickForTQuote.price)
}

// double up_down_ratio = 3;
inline void SimpleTickForTQuote::clear_up_down_ratio() {
  up_down_ratio_ = 0;
}
inline double SimpleTickForTQuote::up_down_ratio() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickForTQuote.up_down_ratio)
  return up_down_ratio_;
}
inline void SimpleTickForTQuote::set_up_down_ratio(double value) {
  
  up_down_ratio_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTickForTQuote.up_down_ratio)
}

// double pre_settlement_price = 4;
inline void SimpleTickForTQuote::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double SimpleTickForTQuote::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickForTQuote.pre_settlement_price)
  return pre_settlement_price_;
}
inline void SimpleTickForTQuote::set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTickForTQuote.pre_settlement_price)
}

// string name = 5;
inline void SimpleTickForTQuote::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SimpleTickForTQuote::name() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickForTQuote.name)
  return name_.GetNoArena();
}
inline void SimpleTickForTQuote::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SimpleTickForTQuote.name)
}
#if LANG_CXX11
inline void SimpleTickForTQuote::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SimpleTickForTQuote.name)
}
#endif
inline void SimpleTickForTQuote::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SimpleTickForTQuote.name)
}
inline void SimpleTickForTQuote::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SimpleTickForTQuote.name)
}
inline ::std::string* SimpleTickForTQuote::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.SimpleTickForTQuote.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SimpleTickForTQuote::release_name() {
  // @@protoc_insertion_point(field_release:pb.SimpleTickForTQuote.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SimpleTickForTQuote::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.SimpleTickForTQuote.name)
}

// -------------------------------------------------------------------

// OptionTQuoteItem

// double exercise_price = 1;
inline void OptionTQuoteItem::clear_exercise_price() {
  exercise_price_ = 0;
}
inline double OptionTQuoteItem::exercise_price() const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItem.exercise_price)
  return exercise_price_;
}
inline void OptionTQuoteItem::set_exercise_price(double value) {
  
  exercise_price_ = value;
  // @@protoc_insertion_point(field_set:pb.OptionTQuoteItem.exercise_price)
}

// .pb.SimpleTickForTQuote call = 2;
inline bool OptionTQuoteItem::has_call() const {
  return this != internal_default_instance() && call_ != nullptr;
}
inline void OptionTQuoteItem::clear_call() {
  if (GetArenaNoVirtual() == nullptr && call_ != nullptr) {
    delete call_;
  }
  call_ = nullptr;
}
inline const ::pb::SimpleTickForTQuote& OptionTQuoteItem::call() const {
  const ::pb::SimpleTickForTQuote* p = call_;
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItem.call)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SimpleTickForTQuote*>(
      &::pb::_SimpleTickForTQuote_default_instance_);
}
inline ::pb::SimpleTickForTQuote* OptionTQuoteItem::release_call() {
  // @@protoc_insertion_point(field_release:pb.OptionTQuoteItem.call)
  
  ::pb::SimpleTickForTQuote* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::pb::SimpleTickForTQuote* OptionTQuoteItem::mutable_call() {
  
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SimpleTickForTQuote>(GetArenaNoVirtual());
    call_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItem.call)
  return call_;
}
inline void OptionTQuoteItem::set_allocated_call(::pb::SimpleTickForTQuote* call) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete call_;
  }
  if (call) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      call = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    
  } else {
    
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTQuoteItem.call)
}

// .pb.SimpleTickForTQuote put = 3;
inline bool OptionTQuoteItem::has_put() const {
  return this != internal_default_instance() && put_ != nullptr;
}
inline void OptionTQuoteItem::clear_put() {
  if (GetArenaNoVirtual() == nullptr && put_ != nullptr) {
    delete put_;
  }
  put_ = nullptr;
}
inline const ::pb::SimpleTickForTQuote& OptionTQuoteItem::put() const {
  const ::pb::SimpleTickForTQuote* p = put_;
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItem.put)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::SimpleTickForTQuote*>(
      &::pb::_SimpleTickForTQuote_default_instance_);
}
inline ::pb::SimpleTickForTQuote* OptionTQuoteItem::release_put() {
  // @@protoc_insertion_point(field_release:pb.OptionTQuoteItem.put)
  
  ::pb::SimpleTickForTQuote* temp = put_;
  put_ = nullptr;
  return temp;
}
inline ::pb::SimpleTickForTQuote* OptionTQuoteItem::mutable_put() {
  
  if (put_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::SimpleTickForTQuote>(GetArenaNoVirtual());
    put_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItem.put)
  return put_;
}
inline void OptionTQuoteItem::set_allocated_put(::pb::SimpleTickForTQuote* put) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete put_;
  }
  if (put) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      put = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    
  } else {
    
  }
  put_ = put;
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTQuoteItem.put)
}

// string exercise_price_flag = 4;
inline void OptionTQuoteItem::clear_exercise_price_flag() {
  exercise_price_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTQuoteItem::exercise_price_flag() const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItem.exercise_price_flag)
  return exercise_price_flag_.GetNoArena();
}
inline void OptionTQuoteItem::set_exercise_price_flag(const ::std::string& value) {
  
  exercise_price_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionTQuoteItem.exercise_price_flag)
}
#if LANG_CXX11
inline void OptionTQuoteItem::set_exercise_price_flag(::std::string&& value) {
  
  exercise_price_flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionTQuoteItem.exercise_price_flag)
}
#endif
inline void OptionTQuoteItem::set_exercise_price_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exercise_price_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionTQuoteItem.exercise_price_flag)
}
inline void OptionTQuoteItem::set_exercise_price_flag(const char* value, size_t size) {
  
  exercise_price_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionTQuoteItem.exercise_price_flag)
}
inline ::std::string* OptionTQuoteItem::mutable_exercise_price_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItem.exercise_price_flag)
  return exercise_price_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTQuoteItem::release_exercise_price_flag() {
  // @@protoc_insertion_point(field_release:pb.OptionTQuoteItem.exercise_price_flag)
  
  return exercise_price_flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTQuoteItem::set_allocated_exercise_price_flag(::std::string* exercise_price_flag) {
  if (exercise_price_flag != nullptr) {
    
  } else {
    
  }
  exercise_price_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exercise_price_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTQuoteItem.exercise_price_flag)
}

// -------------------------------------------------------------------

// OptionTQuoteItemList

// int32 exchange = 1;
inline void OptionTQuoteItemList::clear_exchange() {
  exchange_ = 0;
}
inline ::google::protobuf::int32 OptionTQuoteItemList::exchange() const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItemList.exchange)
  return exchange_;
}
inline void OptionTQuoteItemList::set_exchange(::google::protobuf::int32 value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.OptionTQuoteItemList.exchange)
}

// string strike_symbol = 2;
inline void OptionTQuoteItemList::clear_strike_symbol() {
  strike_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTQuoteItemList::strike_symbol() const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItemList.strike_symbol)
  return strike_symbol_.GetNoArena();
}
inline void OptionTQuoteItemList::set_strike_symbol(const ::std::string& value) {
  
  strike_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionTQuoteItemList.strike_symbol)
}
#if LANG_CXX11
inline void OptionTQuoteItemList::set_strike_symbol(::std::string&& value) {
  
  strike_symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionTQuoteItemList.strike_symbol)
}
#endif
inline void OptionTQuoteItemList::set_strike_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strike_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionTQuoteItemList.strike_symbol)
}
inline void OptionTQuoteItemList::set_strike_symbol(const char* value, size_t size) {
  
  strike_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionTQuoteItemList.strike_symbol)
}
inline ::std::string* OptionTQuoteItemList::mutable_strike_symbol() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItemList.strike_symbol)
  return strike_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTQuoteItemList::release_strike_symbol() {
  // @@protoc_insertion_point(field_release:pb.OptionTQuoteItemList.strike_symbol)
  
  return strike_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTQuoteItemList::set_allocated_strike_symbol(::std::string* strike_symbol) {
  if (strike_symbol != nullptr) {
    
  } else {
    
  }
  strike_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strike_symbol);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTQuoteItemList.strike_symbol)
}

// string month = 3;
inline void OptionTQuoteItemList::clear_month() {
  month_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionTQuoteItemList::month() const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItemList.month)
  return month_.GetNoArena();
}
inline void OptionTQuoteItemList::set_month(const ::std::string& value) {
  
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionTQuoteItemList.month)
}
#if LANG_CXX11
inline void OptionTQuoteItemList::set_month(::std::string&& value) {
  
  month_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionTQuoteItemList.month)
}
#endif
inline void OptionTQuoteItemList::set_month(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionTQuoteItemList.month)
}
inline void OptionTQuoteItemList::set_month(const char* value, size_t size) {
  
  month_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionTQuoteItemList.month)
}
inline ::std::string* OptionTQuoteItemList::mutable_month() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItemList.month)
  return month_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionTQuoteItemList::release_month() {
  // @@protoc_insertion_point(field_release:pb.OptionTQuoteItemList.month)
  
  return month_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionTQuoteItemList::set_allocated_month(::std::string* month) {
  if (month != nullptr) {
    
  } else {
    
  }
  month_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), month);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionTQuoteItemList.month)
}

// repeated .pb.OptionTQuoteItem list = 4;
inline int OptionTQuoteItemList::list_size() const {
  return list_.size();
}
inline void OptionTQuoteItemList::clear_list() {
  list_.Clear();
}
inline ::pb::OptionTQuoteItem* OptionTQuoteItemList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OptionTQuoteItemList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OptionTQuoteItem >*
OptionTQuoteItemList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.OptionTQuoteItemList.list)
  return &list_;
}
inline const ::pb::OptionTQuoteItem& OptionTQuoteItemList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.OptionTQuoteItemList.list)
  return list_.Get(index);
}
inline ::pb::OptionTQuoteItem* OptionTQuoteItemList::add_list() {
  // @@protoc_insertion_point(field_add:pb.OptionTQuoteItemList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OptionTQuoteItem >&
OptionTQuoteItemList::list() const {
  // @@protoc_insertion_point(field_list:pb.OptionTQuoteItemList.list)
  return list_;
}

// -------------------------------------------------------------------

// Kline

// int64 time = 1;
inline void Kline::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Kline::time() const {
  // @@protoc_insertion_point(field_get:pb.Kline.time)
  return time_;
}
inline void Kline::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.time)
}

// double open = 2;
inline void Kline::clear_open() {
  open_ = 0;
}
inline double Kline::open() const {
  // @@protoc_insertion_point(field_get:pb.Kline.open)
  return open_;
}
inline void Kline::set_open(double value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.open)
}

// double high = 3;
inline void Kline::clear_high() {
  high_ = 0;
}
inline double Kline::high() const {
  // @@protoc_insertion_point(field_get:pb.Kline.high)
  return high_;
}
inline void Kline::set_high(double value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.high)
}

// double low = 4;
inline void Kline::clear_low() {
  low_ = 0;
}
inline double Kline::low() const {
  // @@protoc_insertion_point(field_get:pb.Kline.low)
  return low_;
}
inline void Kline::set_low(double value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.low)
}

// double close = 5;
inline void Kline::clear_close() {
  close_ = 0;
}
inline double Kline::close() const {
  // @@protoc_insertion_point(field_get:pb.Kline.close)
  return close_;
}
inline void Kline::set_close(double value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.close)
}

// double volume = 6;
inline void Kline::clear_volume() {
  volume_ = 0;
}
inline double Kline::volume() const {
  // @@protoc_insertion_point(field_get:pb.Kline.volume)
  return volume_;
}
inline void Kline::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.volume)
}

// double amount = 7;
inline void Kline::clear_amount() {
  amount_ = 0;
}
inline double Kline::amount() const {
  // @@protoc_insertion_point(field_get:pb.Kline.amount)
  return amount_;
}
inline void Kline::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.amount)
}

// double position = 8;
inline void Kline::clear_position() {
  position_ = 0;
}
inline double Kline::position() const {
  // @@protoc_insertion_point(field_get:pb.Kline.position)
  return position_;
}
inline void Kline::set_position(double value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.position)
}

// int32 trading_day = 9;
inline void Kline::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 Kline::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.Kline.trading_day)
  return trading_day_;
}
inline void Kline::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.Kline.trading_day)
}

// -------------------------------------------------------------------

// KlineSeries

// .pb.Symbol symbol = 1;
inline bool KlineSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& KlineSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.KlineSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* KlineSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.KlineSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* KlineSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.KlineSeries.symbol)
  return symbol_;
}
inline void KlineSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.KlineSeries.symbol)
}

// .pb.PeriodType period = 2;
inline void KlineSeries::clear_period() {
  period_ = 0;
}
inline ::pb::PeriodType KlineSeries::period() const {
  // @@protoc_insertion_point(field_get:pb.KlineSeries.period)
  return static_cast< ::pb::PeriodType >(period_);
}
inline void KlineSeries::set_period(::pb::PeriodType value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:pb.KlineSeries.period)
}

// int32 period_in_seconds = 3;
inline void KlineSeries::clear_period_in_seconds() {
  period_in_seconds_ = 0;
}
inline ::google::protobuf::int32 KlineSeries::period_in_seconds() const {
  // @@protoc_insertion_point(field_get:pb.KlineSeries.period_in_seconds)
  return period_in_seconds_;
}
inline void KlineSeries::set_period_in_seconds(::google::protobuf::int32 value) {
  
  period_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:pb.KlineSeries.period_in_seconds)
}

// repeated .pb.Kline list = 4;
inline int KlineSeries::list_size() const {
  return list_.size();
}
inline void KlineSeries::clear_list() {
  list_.Clear();
}
inline ::pb::Kline* KlineSeries::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.KlineSeries.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Kline >*
KlineSeries::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.KlineSeries.list)
  return &list_;
}
inline const ::pb::Kline& KlineSeries::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.KlineSeries.list)
  return list_.Get(index);
}
inline ::pb::Kline* KlineSeries::add_list() {
  // @@protoc_insertion_point(field_add:pb.KlineSeries.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Kline >&
KlineSeries::list() const {
  // @@protoc_insertion_point(field_list:pb.KlineSeries.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqSubscribeMarketData

// .pb.Symbol symbol = 1;
inline bool ReqSubscribeMarketData::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ReqSubscribeMarketData::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqSubscribeMarketData.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqSubscribeMarketData::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqSubscribeMarketData.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqSubscribeMarketData::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqSubscribeMarketData.symbol)
  return symbol_;
}
inline void ReqSubscribeMarketData::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqSubscribeMarketData.symbol)
}

// repeated .pb.PeriodType periodList = 2;
inline int ReqSubscribeMarketData::periodlist_size() const {
  return periodlist_.size();
}
inline void ReqSubscribeMarketData::clear_periodlist() {
  periodlist_.Clear();
}
inline ::pb::PeriodType ReqSubscribeMarketData::periodlist(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqSubscribeMarketData.periodList)
  return static_cast< ::pb::PeriodType >(periodlist_.Get(index));
}
inline void ReqSubscribeMarketData::set_periodlist(int index, ::pb::PeriodType value) {
  periodlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.ReqSubscribeMarketData.periodList)
}
inline void ReqSubscribeMarketData::add_periodlist(::pb::PeriodType value) {
  periodlist_.Add(value);
  // @@protoc_insertion_point(field_add:pb.ReqSubscribeMarketData.periodList)
}
inline const ::google::protobuf::RepeatedField<int>&
ReqSubscribeMarketData::periodlist() const {
  // @@protoc_insertion_point(field_list:pb.ReqSubscribeMarketData.periodList)
  return periodlist_;
}
inline ::google::protobuf::RepeatedField<int>*
ReqSubscribeMarketData::mutable_periodlist() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqSubscribeMarketData.periodList)
  return &periodlist_;
}

// -------------------------------------------------------------------

// RspSubscribeMarketData

// -------------------------------------------------------------------

// RtnMarketDataUpdate

// .pb.MarketDataSnapshot tick = 1;
inline bool RtnMarketDataUpdate::has_tick() const {
  return this != internal_default_instance() && tick_ != nullptr;
}
inline void RtnMarketDataUpdate::clear_tick() {
  if (GetArenaNoVirtual() == nullptr && tick_ != nullptr) {
    delete tick_;
  }
  tick_ = nullptr;
}
inline const ::pb::MarketDataSnapshot& RtnMarketDataUpdate::tick() const {
  const ::pb::MarketDataSnapshot* p = tick_;
  // @@protoc_insertion_point(field_get:pb.RtnMarketDataUpdate.tick)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketDataSnapshot*>(
      &::pb::_MarketDataSnapshot_default_instance_);
}
inline ::pb::MarketDataSnapshot* RtnMarketDataUpdate::release_tick() {
  // @@protoc_insertion_point(field_release:pb.RtnMarketDataUpdate.tick)
  
  ::pb::MarketDataSnapshot* temp = tick_;
  tick_ = nullptr;
  return temp;
}
inline ::pb::MarketDataSnapshot* RtnMarketDataUpdate::mutable_tick() {
  
  if (tick_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketDataSnapshot>(GetArenaNoVirtual());
    tick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.RtnMarketDataUpdate.tick)
  return tick_;
}
inline void RtnMarketDataUpdate::set_allocated_tick(::pb::MarketDataSnapshot* tick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tick_;
  }
  if (tick) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tick, submessage_arena);
    }
    
  } else {
    
  }
  tick_ = tick;
  // @@protoc_insertion_point(field_set_allocated:pb.RtnMarketDataUpdate.tick)
}

// repeated .pb.Kline kline_list = 2;
inline int RtnMarketDataUpdate::kline_list_size() const {
  return kline_list_.size();
}
inline void RtnMarketDataUpdate::clear_kline_list() {
  kline_list_.Clear();
}
inline ::pb::Kline* RtnMarketDataUpdate::mutable_kline_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.RtnMarketDataUpdate.kline_list)
  return kline_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Kline >*
RtnMarketDataUpdate::mutable_kline_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.RtnMarketDataUpdate.kline_list)
  return &kline_list_;
}
inline const ::pb::Kline& RtnMarketDataUpdate::kline_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.RtnMarketDataUpdate.kline_list)
  return kline_list_.Get(index);
}
inline ::pb::Kline* RtnMarketDataUpdate::add_kline_list() {
  // @@protoc_insertion_point(field_add:pb.RtnMarketDataUpdate.kline_list)
  return kline_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Kline >&
RtnMarketDataUpdate::kline_list() const {
  // @@protoc_insertion_point(field_list:pb.RtnMarketDataUpdate.kline_list)
  return kline_list_;
}

// -------------------------------------------------------------------

// TickSeries

// .pb.Symbol symbol = 1;
inline bool TickSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& TickSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.TickSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* TickSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.TickSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* TickSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TickSeries.symbol)
  return symbol_;
}
inline void TickSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.TickSeries.symbol)
}

// int32 trading_day = 2;
inline void TickSeries::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 TickSeries::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.TickSeries.trading_day)
  return trading_day_;
}
inline void TickSeries::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.TickSeries.trading_day)
}

// repeated .pb.MarketDataSnapshot list = 3;
inline int TickSeries::list_size() const {
  return list_.size();
}
inline void TickSeries::clear_list() {
  list_.Clear();
}
inline ::pb::MarketDataSnapshot* TickSeries::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TickSeries.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >*
TickSeries::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TickSeries.list)
  return &list_;
}
inline const ::pb::MarketDataSnapshot& TickSeries::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TickSeries.list)
  return list_.Get(index);
}
inline ::pb::MarketDataSnapshot* TickSeries::add_list() {
  // @@protoc_insertion_point(field_add:pb.TickSeries.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MarketDataSnapshot >&
TickSeries::list() const {
  // @@protoc_insertion_point(field_list:pb.TickSeries.list)
  return list_;
}

// -------------------------------------------------------------------

// SimpleTick

// int64 time = 1;
inline void SimpleTick::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SimpleTick::time() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTick.time)
  return time_;
}
inline void SimpleTick::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTick.time)
}

// double price = 2;
inline void SimpleTick::clear_price() {
  price_ = 0;
}
inline double SimpleTick::price() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTick.price)
  return price_;
}
inline void SimpleTick::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTick.price)
}

// double volume = 3;
inline void SimpleTick::clear_volume() {
  volume_ = 0;
}
inline double SimpleTick::volume() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTick.volume)
  return volume_;
}
inline void SimpleTick::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTick.volume)
}

// -------------------------------------------------------------------

// SimpleTickSeries

// .pb.Symbol symbol = 1;
inline bool SimpleTickSeries::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& SimpleTickSeries::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.SimpleTickSeries.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* SimpleTickSeries::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.SimpleTickSeries.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* SimpleTickSeries::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.SimpleTickSeries.symbol)
  return symbol_;
}
inline void SimpleTickSeries::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.SimpleTickSeries.symbol)
}

// int32 trading_day = 2;
inline void SimpleTickSeries::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 SimpleTickSeries::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickSeries.trading_day)
  return trading_day_;
}
inline void SimpleTickSeries::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTickSeries.trading_day)
}

// repeated .pb.SimpleTick list = 3;
inline int SimpleTickSeries::list_size() const {
  return list_.size();
}
inline void SimpleTickSeries::clear_list() {
  list_.Clear();
}
inline ::pb::SimpleTick* SimpleTickSeries::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SimpleTickSeries.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SimpleTick >*
SimpleTickSeries::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SimpleTickSeries.list)
  return &list_;
}
inline const ::pb::SimpleTick& SimpleTickSeries::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SimpleTickSeries.list)
  return list_.Get(index);
}
inline ::pb::SimpleTick* SimpleTickSeries::add_list() {
  // @@protoc_insertion_point(field_add:pb.SimpleTickSeries.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTick >&
SimpleTickSeries::list() const {
  // @@protoc_insertion_point(field_list:pb.SimpleTickSeries.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_market_5fdata_2eproto
