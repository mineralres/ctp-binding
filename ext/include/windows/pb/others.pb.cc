// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: others.proto

#include "others.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_others_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NetInAmountDetail_others_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_others_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RealtimeMoneyTrendItem_others_2eproto;
namespace pb {
class NetInAmountDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetInAmountDetail> _instance;
} _NetInAmountDetail_default_instance_;
class RealtimeMoneyTrendItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RealtimeMoneyTrendItem> _instance;
} _RealtimeMoneyTrendItem_default_instance_;
class RealtimeMoneyTrendItemListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RealtimeMoneyTrendItemList> _instance;
} _RealtimeMoneyTrendItemList_default_instance_;
}  // namespace pb
static void InitDefaultsNetInAmountDetail_others_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_NetInAmountDetail_default_instance_;
    new (ptr) ::pb::NetInAmountDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::NetInAmountDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetInAmountDetail_others_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetInAmountDetail_others_2eproto}, {}};

static void InitDefaultsRealtimeMoneyTrendItem_others_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RealtimeMoneyTrendItem_default_instance_;
    new (ptr) ::pb::RealtimeMoneyTrendItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RealtimeMoneyTrendItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RealtimeMoneyTrendItem_others_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRealtimeMoneyTrendItem_others_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_NetInAmountDetail_others_2eproto.base,}};

static void InitDefaultsRealtimeMoneyTrendItemList_others_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_RealtimeMoneyTrendItemList_default_instance_;
    new (ptr) ::pb::RealtimeMoneyTrendItemList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::RealtimeMoneyTrendItemList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RealtimeMoneyTrendItemList_others_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRealtimeMoneyTrendItemList_others_2eproto}, {
      &scc_info_RealtimeMoneyTrendItem_others_2eproto.base,}};

void InitDefaults_others_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetInAmountDetail_others_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RealtimeMoneyTrendItem_others_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RealtimeMoneyTrendItemList_others_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_others_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_others_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_others_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_others_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::NetInAmountDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::NetInAmountDetail, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::NetInAmountDetail, percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, name_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, price_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, updown_percentage_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, time_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, super_super_big_order_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, super_big_order_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, big_order_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, middle_order_),
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItem, small_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::RealtimeMoneyTrendItemList, list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::NetInAmountDetail)},
  { 7, -1, sizeof(::pb::RealtimeMoneyTrendItem)},
  { 22, -1, sizeof(::pb::RealtimeMoneyTrendItemList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_NetInAmountDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RealtimeMoneyTrendItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_RealtimeMoneyTrendItemList_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_others_2eproto = {
  {}, AddDescriptors_others_2eproto, "others.proto", schemas,
  file_default_instances, TableStruct_others_2eproto::offsets,
  file_level_metadata_others_2eproto, 3, file_level_enum_descriptors_others_2eproto, file_level_service_descriptors_others_2eproto,
};

const char descriptor_table_protodef_others_2eproto[] =
  "\n\014others.proto\022\002pb\032\014common.proto\"7\n\021NetI"
  "nAmountDetail\022\016\n\006amount\030\001 \001(\001\022\022\n\npercent"
  "age\030\002 \001(\001\"\343\002\n\026RealtimeMoneyTrendItem\022\032\n\006"
  "symbol\030\001 \001(\0132\n.pb.Symbol\022\014\n\004name\030\002 \001(\t\022\r"
  "\n\005price\030\003 \001(\001\022\031\n\021updown_percentage\030\004 \001(\001"
  "\022\014\n\004time\030\006 \001(\003\0224\n\025super_super_big_order\030"
  "\007 \001(\0132\025.pb.NetInAmountDetail\022.\n\017super_bi"
  "g_order\030\010 \001(\0132\025.pb.NetInAmountDetail\022(\n\t"
  "big_order\030\t \001(\0132\025.pb.NetInAmountDetail\022+"
  "\n\014middle_order\030\n \001(\0132\025.pb.NetInAmountDet"
  "ail\022*\n\013small_order\030\013 \001(\0132\025.pb.NetInAmoun"
  "tDetail\"F\n\032RealtimeMoneyTrendItemList\022(\n"
  "\004list\030\001 \003(\0132\032.pb.RealtimeMoneyTrendItemb"
  "\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_others_2eproto = {
  false, InitDefaults_others_2eproto, 
  descriptor_table_protodef_others_2eproto,
  "others.proto", &assign_descriptors_table_others_2eproto, 527,
};

void AddDescriptors_others_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_common_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_others_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_others_2eproto = []() { AddDescriptors_others_2eproto(); return true; }();
namespace pb {

// ===================================================================

void NetInAmountDetail::InitAsDefaultInstance() {
}
class NetInAmountDetail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetInAmountDetail::kAmountFieldNumber;
const int NetInAmountDetail::kPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetInAmountDetail::NetInAmountDetail()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.NetInAmountDetail)
}
NetInAmountDetail::NetInAmountDetail(const NetInAmountDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentage_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(percentage_));
  // @@protoc_insertion_point(copy_constructor:pb.NetInAmountDetail)
}

void NetInAmountDetail::SharedCtor() {
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(percentage_));
}

NetInAmountDetail::~NetInAmountDetail() {
  // @@protoc_insertion_point(destructor:pb.NetInAmountDetail)
  SharedDtor();
}

void NetInAmountDetail::SharedDtor() {
}

void NetInAmountDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetInAmountDetail& NetInAmountDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NetInAmountDetail_others_2eproto.base);
  return *internal_default_instance();
}


void NetInAmountDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.NetInAmountDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(percentage_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetInAmountDetail::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NetInAmountDetail*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double percentage = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_percentage(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetInAmountDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.NetInAmountDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.NetInAmountDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.NetInAmountDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetInAmountDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.NetInAmountDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->amount(), output);
  }

  // double percentage = 2;
  if (this->percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->percentage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.NetInAmountDetail)
}

::google::protobuf::uint8* NetInAmountDetail::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.NetInAmountDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->amount(), target);
  }

  // double percentage = 2;
  if (this->percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->percentage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.NetInAmountDetail)
  return target;
}

size_t NetInAmountDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.NetInAmountDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount = 1;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // double percentage = 2;
  if (this->percentage() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetInAmountDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.NetInAmountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const NetInAmountDetail* source =
      ::google::protobuf::DynamicCastToGenerated<NetInAmountDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.NetInAmountDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.NetInAmountDetail)
    MergeFrom(*source);
  }
}

void NetInAmountDetail::MergeFrom(const NetInAmountDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.NetInAmountDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.percentage() != 0) {
    set_percentage(from.percentage());
  }
}

void NetInAmountDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.NetInAmountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetInAmountDetail::CopyFrom(const NetInAmountDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.NetInAmountDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInAmountDetail::IsInitialized() const {
  return true;
}

void NetInAmountDetail::Swap(NetInAmountDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetInAmountDetail::InternalSwap(NetInAmountDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
  swap(percentage_, other->percentage_);
}

::google::protobuf::Metadata NetInAmountDetail::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_others_2eproto);
  return ::file_level_metadata_others_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RealtimeMoneyTrendItem::InitAsDefaultInstance() {
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->super_super_big_order_ = const_cast< ::pb::NetInAmountDetail*>(
      ::pb::NetInAmountDetail::internal_default_instance());
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->super_big_order_ = const_cast< ::pb::NetInAmountDetail*>(
      ::pb::NetInAmountDetail::internal_default_instance());
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->big_order_ = const_cast< ::pb::NetInAmountDetail*>(
      ::pb::NetInAmountDetail::internal_default_instance());
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->middle_order_ = const_cast< ::pb::NetInAmountDetail*>(
      ::pb::NetInAmountDetail::internal_default_instance());
  ::pb::_RealtimeMoneyTrendItem_default_instance_._instance.get_mutable()->small_order_ = const_cast< ::pb::NetInAmountDetail*>(
      ::pb::NetInAmountDetail::internal_default_instance());
}
class RealtimeMoneyTrendItem::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const RealtimeMoneyTrendItem* msg);
  static const ::pb::NetInAmountDetail& super_super_big_order(const RealtimeMoneyTrendItem* msg);
  static const ::pb::NetInAmountDetail& super_big_order(const RealtimeMoneyTrendItem* msg);
  static const ::pb::NetInAmountDetail& big_order(const RealtimeMoneyTrendItem* msg);
  static const ::pb::NetInAmountDetail& middle_order(const RealtimeMoneyTrendItem* msg);
  static const ::pb::NetInAmountDetail& small_order(const RealtimeMoneyTrendItem* msg);
};

const ::pb::Symbol&
RealtimeMoneyTrendItem::HasBitSetters::symbol(const RealtimeMoneyTrendItem* msg) {
  return *msg->symbol_;
}
const ::pb::NetInAmountDetail&
RealtimeMoneyTrendItem::HasBitSetters::super_super_big_order(const RealtimeMoneyTrendItem* msg) {
  return *msg->super_super_big_order_;
}
const ::pb::NetInAmountDetail&
RealtimeMoneyTrendItem::HasBitSetters::super_big_order(const RealtimeMoneyTrendItem* msg) {
  return *msg->super_big_order_;
}
const ::pb::NetInAmountDetail&
RealtimeMoneyTrendItem::HasBitSetters::big_order(const RealtimeMoneyTrendItem* msg) {
  return *msg->big_order_;
}
const ::pb::NetInAmountDetail&
RealtimeMoneyTrendItem::HasBitSetters::middle_order(const RealtimeMoneyTrendItem* msg) {
  return *msg->middle_order_;
}
const ::pb::NetInAmountDetail&
RealtimeMoneyTrendItem::HasBitSetters::small_order(const RealtimeMoneyTrendItem* msg) {
  return *msg->small_order_;
}
void RealtimeMoneyTrendItem::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealtimeMoneyTrendItem::kSymbolFieldNumber;
const int RealtimeMoneyTrendItem::kNameFieldNumber;
const int RealtimeMoneyTrendItem::kPriceFieldNumber;
const int RealtimeMoneyTrendItem::kUpdownPercentageFieldNumber;
const int RealtimeMoneyTrendItem::kTimeFieldNumber;
const int RealtimeMoneyTrendItem::kSuperSuperBigOrderFieldNumber;
const int RealtimeMoneyTrendItem::kSuperBigOrderFieldNumber;
const int RealtimeMoneyTrendItem::kBigOrderFieldNumber;
const int RealtimeMoneyTrendItem::kMiddleOrderFieldNumber;
const int RealtimeMoneyTrendItem::kSmallOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealtimeMoneyTrendItem::RealtimeMoneyTrendItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RealtimeMoneyTrendItem)
}
RealtimeMoneyTrendItem::RealtimeMoneyTrendItem(const RealtimeMoneyTrendItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_super_super_big_order()) {
    super_super_big_order_ = new ::pb::NetInAmountDetail(*from.super_super_big_order_);
  } else {
    super_super_big_order_ = nullptr;
  }
  if (from.has_super_big_order()) {
    super_big_order_ = new ::pb::NetInAmountDetail(*from.super_big_order_);
  } else {
    super_big_order_ = nullptr;
  }
  if (from.has_big_order()) {
    big_order_ = new ::pb::NetInAmountDetail(*from.big_order_);
  } else {
    big_order_ = nullptr;
  }
  if (from.has_middle_order()) {
    middle_order_ = new ::pb::NetInAmountDetail(*from.middle_order_);
  } else {
    middle_order_ = nullptr;
  }
  if (from.has_small_order()) {
    small_order_ = new ::pb::NetInAmountDetail(*from.small_order_);
  } else {
    small_order_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&price_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:pb.RealtimeMoneyTrendItem)
}

void RealtimeMoneyTrendItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RealtimeMoneyTrendItem_others_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(time_));
}

RealtimeMoneyTrendItem::~RealtimeMoneyTrendItem() {
  // @@protoc_insertion_point(destructor:pb.RealtimeMoneyTrendItem)
  SharedDtor();
}

void RealtimeMoneyTrendItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete super_super_big_order_;
  if (this != internal_default_instance()) delete super_big_order_;
  if (this != internal_default_instance()) delete big_order_;
  if (this != internal_default_instance()) delete middle_order_;
  if (this != internal_default_instance()) delete small_order_;
}

void RealtimeMoneyTrendItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealtimeMoneyTrendItem& RealtimeMoneyTrendItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RealtimeMoneyTrendItem_others_2eproto.base);
  return *internal_default_instance();
}


void RealtimeMoneyTrendItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RealtimeMoneyTrendItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && super_super_big_order_ != nullptr) {
    delete super_super_big_order_;
  }
  super_super_big_order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && super_big_order_ != nullptr) {
    delete super_big_order_;
  }
  super_big_order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && big_order_ != nullptr) {
    delete big_order_;
  }
  big_order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && middle_order_ != nullptr) {
    delete middle_order_;
  }
  middle_order_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && small_order_ != nullptr) {
    delete small_order_;
  }
  small_order_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&price_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RealtimeMoneyTrendItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RealtimeMoneyTrendItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.RealtimeMoneyTrendItem.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double price = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double updown_percentage = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_updown_percentage(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.NetInAmountDetail super_super_big_order = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::NetInAmountDetail::_InternalParse;
        object = msg->mutable_super_super_big_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.NetInAmountDetail super_big_order = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::NetInAmountDetail::_InternalParse;
        object = msg->mutable_super_big_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.NetInAmountDetail big_order = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::NetInAmountDetail::_InternalParse;
        object = msg->mutable_big_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.NetInAmountDetail middle_order = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::NetInAmountDetail::_InternalParse;
        object = msg->mutable_middle_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.NetInAmountDetail small_order = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::NetInAmountDetail::_InternalParse;
        object = msg->mutable_small_order();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RealtimeMoneyTrendItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RealtimeMoneyTrendItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.RealtimeMoneyTrendItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double updown_percentage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &updown_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.NetInAmountDetail super_super_big_order = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_super_super_big_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.NetInAmountDetail super_big_order = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_super_big_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.NetInAmountDetail big_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_big_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.NetInAmountDetail middle_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_middle_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.NetInAmountDetail small_order = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_small_order()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RealtimeMoneyTrendItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RealtimeMoneyTrendItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RealtimeMoneyTrendItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RealtimeMoneyTrendItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RealtimeMoneyTrendItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // double price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // double updown_percentage = 4;
  if (this->updown_percentage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->updown_percentage(), output);
  }

  // int64 time = 6;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  // .pb.NetInAmountDetail super_super_big_order = 7;
  if (this->has_super_super_big_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::super_super_big_order(this), output);
  }

  // .pb.NetInAmountDetail super_big_order = 8;
  if (this->has_super_big_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::super_big_order(this), output);
  }

  // .pb.NetInAmountDetail big_order = 9;
  if (this->has_big_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::big_order(this), output);
  }

  // .pb.NetInAmountDetail middle_order = 10;
  if (this->has_middle_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::middle_order(this), output);
  }

  // .pb.NetInAmountDetail small_order = 11;
  if (this->has_small_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::small_order(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RealtimeMoneyTrendItem)
}

::google::protobuf::uint8* RealtimeMoneyTrendItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RealtimeMoneyTrendItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.RealtimeMoneyTrendItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // double price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // double updown_percentage = 4;
  if (this->updown_percentage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->updown_percentage(), target);
  }

  // int64 time = 6;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  // .pb.NetInAmountDetail super_super_big_order = 7;
  if (this->has_super_super_big_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::super_super_big_order(this), target);
  }

  // .pb.NetInAmountDetail super_big_order = 8;
  if (this->has_super_big_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::super_big_order(this), target);
  }

  // .pb.NetInAmountDetail big_order = 9;
  if (this->has_big_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::big_order(this), target);
  }

  // .pb.NetInAmountDetail middle_order = 10;
  if (this->has_middle_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::middle_order(this), target);
  }

  // .pb.NetInAmountDetail small_order = 11;
  if (this->has_small_order()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::small_order(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RealtimeMoneyTrendItem)
  return target;
}

size_t RealtimeMoneyTrendItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RealtimeMoneyTrendItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.NetInAmountDetail super_super_big_order = 7;
  if (this->has_super_super_big_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *super_super_big_order_);
  }

  // .pb.NetInAmountDetail super_big_order = 8;
  if (this->has_super_big_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *super_big_order_);
  }

  // .pb.NetInAmountDetail big_order = 9;
  if (this->has_big_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *big_order_);
  }

  // .pb.NetInAmountDetail middle_order = 10;
  if (this->has_middle_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *middle_order_);
  }

  // .pb.NetInAmountDetail small_order = 11;
  if (this->has_small_order()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *small_order_);
  }

  // double price = 3;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // double updown_percentage = 4;
  if (this->updown_percentage() != 0) {
    total_size += 1 + 8;
  }

  // int64 time = 6;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealtimeMoneyTrendItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RealtimeMoneyTrendItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RealtimeMoneyTrendItem* source =
      ::google::protobuf::DynamicCastToGenerated<RealtimeMoneyTrendItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RealtimeMoneyTrendItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RealtimeMoneyTrendItem)
    MergeFrom(*source);
  }
}

void RealtimeMoneyTrendItem::MergeFrom(const RealtimeMoneyTrendItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RealtimeMoneyTrendItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_super_super_big_order()) {
    mutable_super_super_big_order()->::pb::NetInAmountDetail::MergeFrom(from.super_super_big_order());
  }
  if (from.has_super_big_order()) {
    mutable_super_big_order()->::pb::NetInAmountDetail::MergeFrom(from.super_big_order());
  }
  if (from.has_big_order()) {
    mutable_big_order()->::pb::NetInAmountDetail::MergeFrom(from.big_order());
  }
  if (from.has_middle_order()) {
    mutable_middle_order()->::pb::NetInAmountDetail::MergeFrom(from.middle_order());
  }
  if (from.has_small_order()) {
    mutable_small_order()->::pb::NetInAmountDetail::MergeFrom(from.small_order());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.updown_percentage() != 0) {
    set_updown_percentage(from.updown_percentage());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void RealtimeMoneyTrendItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RealtimeMoneyTrendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealtimeMoneyTrendItem::CopyFrom(const RealtimeMoneyTrendItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RealtimeMoneyTrendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealtimeMoneyTrendItem::IsInitialized() const {
  return true;
}

void RealtimeMoneyTrendItem::Swap(RealtimeMoneyTrendItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealtimeMoneyTrendItem::InternalSwap(RealtimeMoneyTrendItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(super_super_big_order_, other->super_super_big_order_);
  swap(super_big_order_, other->super_big_order_);
  swap(big_order_, other->big_order_);
  swap(middle_order_, other->middle_order_);
  swap(small_order_, other->small_order_);
  swap(price_, other->price_);
  swap(updown_percentage_, other->updown_percentage_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata RealtimeMoneyTrendItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_others_2eproto);
  return ::file_level_metadata_others_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RealtimeMoneyTrendItemList::InitAsDefaultInstance() {
}
class RealtimeMoneyTrendItemList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealtimeMoneyTrendItemList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealtimeMoneyTrendItemList::RealtimeMoneyTrendItemList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RealtimeMoneyTrendItemList)
}
RealtimeMoneyTrendItemList::RealtimeMoneyTrendItemList(const RealtimeMoneyTrendItemList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.RealtimeMoneyTrendItemList)
}

void RealtimeMoneyTrendItemList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RealtimeMoneyTrendItemList_others_2eproto.base);
}

RealtimeMoneyTrendItemList::~RealtimeMoneyTrendItemList() {
  // @@protoc_insertion_point(destructor:pb.RealtimeMoneyTrendItemList)
  SharedDtor();
}

void RealtimeMoneyTrendItemList::SharedDtor() {
}

void RealtimeMoneyTrendItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealtimeMoneyTrendItemList& RealtimeMoneyTrendItemList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RealtimeMoneyTrendItemList_others_2eproto.base);
  return *internal_default_instance();
}


void RealtimeMoneyTrendItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.RealtimeMoneyTrendItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RealtimeMoneyTrendItemList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RealtimeMoneyTrendItemList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.RealtimeMoneyTrendItem list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::RealtimeMoneyTrendItem::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RealtimeMoneyTrendItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RealtimeMoneyTrendItemList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.RealtimeMoneyTrendItem list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RealtimeMoneyTrendItemList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RealtimeMoneyTrendItemList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RealtimeMoneyTrendItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RealtimeMoneyTrendItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.RealtimeMoneyTrendItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RealtimeMoneyTrendItemList)
}

::google::protobuf::uint8* RealtimeMoneyTrendItemList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RealtimeMoneyTrendItemList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.RealtimeMoneyTrendItem list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RealtimeMoneyTrendItemList)
  return target;
}

size_t RealtimeMoneyTrendItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.RealtimeMoneyTrendItemList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.RealtimeMoneyTrendItem list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealtimeMoneyTrendItemList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.RealtimeMoneyTrendItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const RealtimeMoneyTrendItemList* source =
      ::google::protobuf::DynamicCastToGenerated<RealtimeMoneyTrendItemList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.RealtimeMoneyTrendItemList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.RealtimeMoneyTrendItemList)
    MergeFrom(*source);
  }
}

void RealtimeMoneyTrendItemList::MergeFrom(const RealtimeMoneyTrendItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.RealtimeMoneyTrendItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void RealtimeMoneyTrendItemList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.RealtimeMoneyTrendItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealtimeMoneyTrendItemList::CopyFrom(const RealtimeMoneyTrendItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.RealtimeMoneyTrendItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealtimeMoneyTrendItemList::IsInitialized() const {
  return true;
}

void RealtimeMoneyTrendItemList::Swap(RealtimeMoneyTrendItemList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealtimeMoneyTrendItemList::InternalSwap(RealtimeMoneyTrendItemList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata RealtimeMoneyTrendItemList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_others_2eproto);
  return ::file_level_metadata_others_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::NetInAmountDetail* Arena::CreateMaybeMessage< ::pb::NetInAmountDetail >(Arena* arena) {
  return Arena::CreateInternal< ::pb::NetInAmountDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RealtimeMoneyTrendItem* Arena::CreateMaybeMessage< ::pb::RealtimeMoneyTrendItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RealtimeMoneyTrendItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::RealtimeMoneyTrendItemList* Arena::CreateMaybeMessage< ::pb::RealtimeMoneyTrendItemList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::RealtimeMoneyTrendItemList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
