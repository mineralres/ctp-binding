// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_INCLUDED_common_2eproto
#define PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_common_2eproto();
namespace pb {
class AccountMoneySummary;
class AccountMoneySummaryDefaultTypeInternal;
extern AccountMoneySummaryDefaultTypeInternal _AccountMoneySummary_default_instance_;
class AccountMoneySummaryList;
class AccountMoneySummaryListDefaultTypeInternal;
extern AccountMoneySummaryListDefaultTypeInternal _AccountMoneySummaryList_default_instance_;
class BrokerRoute;
class BrokerRouteDefaultTypeInternal;
extern BrokerRouteDefaultTypeInternal _BrokerRoute_default_instance_;
class BrokerRouteList;
class BrokerRouteListDefaultTypeInternal;
extern BrokerRouteListDefaultTypeInternal _BrokerRouteList_default_instance_;
class InstrumentInfo;
class InstrumentInfoDefaultTypeInternal;
extern InstrumentInfoDefaultTypeInternal _InstrumentInfo_default_instance_;
class MTRList;
class MTRListDefaultTypeInternal;
extern MTRListDefaultTypeInternal _MTRList_default_instance_;
class MarketTimeRule;
class MarketTimeRuleDefaultTypeInternal;
extern MarketTimeRuleDefaultTypeInternal _MarketTimeRule_default_instance_;
class MoneyTransferRecord;
class MoneyTransferRecordDefaultTypeInternal;
extern MoneyTransferRecordDefaultTypeInternal _MoneyTransferRecord_default_instance_;
class OptionMonth;
class OptionMonthDefaultTypeInternal;
extern OptionMonthDefaultTypeInternal _OptionMonth_default_instance_;
class OptionMonthList;
class OptionMonthListDefaultTypeInternal;
extern OptionMonthListDefaultTypeInternal _OptionMonthList_default_instance_;
class ProductID;
class ProductIDDefaultTypeInternal;
extern ProductIDDefaultTypeInternal _ProductID_default_instance_;
class ProductInfo;
class ProductInfoDefaultTypeInternal;
extern ProductInfoDefaultTypeInternal _ProductInfo_default_instance_;
class ProductInfoList;
class ProductInfoListDefaultTypeInternal;
extern ProductInfoListDefaultTypeInternal _ProductInfoList_default_instance_;
class ReqSetProductInfoList;
class ReqSetProductInfoListDefaultTypeInternal;
extern ReqSetProductInfoListDefaultTypeInternal _ReqSetProductInfoList_default_instance_;
class ReqSetTradingInstrumentList;
class ReqSetTradingInstrumentListDefaultTypeInternal;
extern ReqSetTradingInstrumentListDefaultTypeInternal _ReqSetTradingInstrumentList_default_instance_;
class ReqUpdateTIOpenDate;
class ReqUpdateTIOpenDateDefaultTypeInternal;
extern ReqUpdateTIOpenDateDefaultTypeInternal _ReqUpdateTIOpenDate_default_instance_;
class ReqUpdateTIOpenDateList;
class ReqUpdateTIOpenDateListDefaultTypeInternal;
extern ReqUpdateTIOpenDateListDefaultTypeInternal _ReqUpdateTIOpenDateList_default_instance_;
class SSEStockOption;
class SSEStockOptionDefaultTypeInternal;
extern SSEStockOptionDefaultTypeInternal _SSEStockOption_default_instance_;
class SimpleTimePeriod;
class SimpleTimePeriodDefaultTypeInternal;
extern SimpleTimePeriodDefaultTypeInternal _SimpleTimePeriod_default_instance_;
class Symbol;
class SymbolDefaultTypeInternal;
extern SymbolDefaultTypeInternal _Symbol_default_instance_;
class SymbolList;
class SymbolListDefaultTypeInternal;
extern SymbolListDefaultTypeInternal _SymbolList_default_instance_;
class TradingInstrument;
class TradingInstrumentDefaultTypeInternal;
extern TradingInstrumentDefaultTypeInternal _TradingInstrument_default_instance_;
class TradingInstrumentList;
class TradingInstrumentListDefaultTypeInternal;
extern TradingInstrumentListDefaultTypeInternal _TradingInstrumentList_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::AccountMoneySummary* Arena::CreateMaybeMessage<::pb::AccountMoneySummary>(Arena*);
template<> ::pb::AccountMoneySummaryList* Arena::CreateMaybeMessage<::pb::AccountMoneySummaryList>(Arena*);
template<> ::pb::BrokerRoute* Arena::CreateMaybeMessage<::pb::BrokerRoute>(Arena*);
template<> ::pb::BrokerRouteList* Arena::CreateMaybeMessage<::pb::BrokerRouteList>(Arena*);
template<> ::pb::InstrumentInfo* Arena::CreateMaybeMessage<::pb::InstrumentInfo>(Arena*);
template<> ::pb::MTRList* Arena::CreateMaybeMessage<::pb::MTRList>(Arena*);
template<> ::pb::MarketTimeRule* Arena::CreateMaybeMessage<::pb::MarketTimeRule>(Arena*);
template<> ::pb::MoneyTransferRecord* Arena::CreateMaybeMessage<::pb::MoneyTransferRecord>(Arena*);
template<> ::pb::OptionMonth* Arena::CreateMaybeMessage<::pb::OptionMonth>(Arena*);
template<> ::pb::OptionMonthList* Arena::CreateMaybeMessage<::pb::OptionMonthList>(Arena*);
template<> ::pb::ProductID* Arena::CreateMaybeMessage<::pb::ProductID>(Arena*);
template<> ::pb::ProductInfo* Arena::CreateMaybeMessage<::pb::ProductInfo>(Arena*);
template<> ::pb::ProductInfoList* Arena::CreateMaybeMessage<::pb::ProductInfoList>(Arena*);
template<> ::pb::ReqSetProductInfoList* Arena::CreateMaybeMessage<::pb::ReqSetProductInfoList>(Arena*);
template<> ::pb::ReqSetTradingInstrumentList* Arena::CreateMaybeMessage<::pb::ReqSetTradingInstrumentList>(Arena*);
template<> ::pb::ReqUpdateTIOpenDate* Arena::CreateMaybeMessage<::pb::ReqUpdateTIOpenDate>(Arena*);
template<> ::pb::ReqUpdateTIOpenDateList* Arena::CreateMaybeMessage<::pb::ReqUpdateTIOpenDateList>(Arena*);
template<> ::pb::SSEStockOption* Arena::CreateMaybeMessage<::pb::SSEStockOption>(Arena*);
template<> ::pb::SimpleTimePeriod* Arena::CreateMaybeMessage<::pb::SimpleTimePeriod>(Arena*);
template<> ::pb::Symbol* Arena::CreateMaybeMessage<::pb::Symbol>(Arena*);
template<> ::pb::SymbolList* Arena::CreateMaybeMessage<::pb::SymbolList>(Arena*);
template<> ::pb::TradingInstrument* Arena::CreateMaybeMessage<::pb::TradingInstrument>(Arena*);
template<> ::pb::TradingInstrumentList* Arena::CreateMaybeMessage<::pb::TradingInstrumentList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum ExchangeType {
  SHFE = 0,
  CZCE = 1,
  DCE = 2,
  CFFEX = 3,
  SSE = 4,
  SZE = 5,
  HKG = 6,
  HKFE = 7,
  INDEX = 8,
  OPTION_SSE = 9,
  NYME = 10,
  GLBX = 11,
  CBOT = 12,
  CME = 13,
  COMEX = 14,
  EUREX = 15,
  IPE = 16,
  LIFFE = 17,
  LME = 18,
  SGX = 19,
  DEMO = 20,
  INE = 21,
  INVALIDEX = 22,
  ExchangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ExchangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ExchangeType_IsValid(int value);
const ExchangeType ExchangeType_MIN = SHFE;
const ExchangeType ExchangeType_MAX = INVALIDEX;
const int ExchangeType_ARRAYSIZE = ExchangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExchangeType_descriptor();
inline const ::std::string& ExchangeType_Name(ExchangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExchangeType_descriptor(), value);
}
inline bool ExchangeType_Parse(
    const ::std::string& name, ExchangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExchangeType>(
    ExchangeType_descriptor(), name, value);
}
enum ProductType {
  PT_UNKOWN = 0,
  PT_FUTURE = 1,
  PT_STOCK = 2,
  PT_BOND = 3,
  PT_COMBINATION = 4,
  PT_OPTION = 5,
  PT_FUTURE_OPTION = 6,
  PT_STOCK_OPTION = 7,
  PT_SSE_ETF_OPTION = 8,
  ProductType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ProductType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ProductType_IsValid(int value);
const ProductType ProductType_MIN = PT_UNKOWN;
const ProductType ProductType_MAX = PT_SSE_ETF_OPTION;
const int ProductType_ARRAYSIZE = ProductType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProductType_descriptor();
inline const ::std::string& ProductType_Name(ProductType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProductType_descriptor(), value);
}
inline bool ProductType_Parse(
    const ::std::string& name, ProductType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProductType>(
    ProductType_descriptor(), name, value);
}
enum PeriodType {
  TICK = 0,
  M1 = 1,
  M3 = 2,
  M5 = 3,
  M10 = 4,
  M15 = 5,
  M30 = 6,
  H1 = 7,
  H3 = 8,
  D1 = 9,
  W1 = 10,
  MON1 = 11,
  PeriodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  PeriodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool PeriodType_IsValid(int value);
const PeriodType PeriodType_MIN = TICK;
const PeriodType PeriodType_MAX = MON1;
const int PeriodType_ARRAYSIZE = PeriodType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeriodType_descriptor();
inline const ::std::string& PeriodType_Name(PeriodType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeriodType_descriptor(), value);
}
inline bool PeriodType_Parse(
    const ::std::string& name, PeriodType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeriodType>(
    PeriodType_descriptor(), name, value);
}
enum OptionCallPutType {
  OCPT_CALL = 0,
  OCPT_PUT = 1,
  OptionCallPutType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OptionCallPutType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OptionCallPutType_IsValid(int value);
const OptionCallPutType OptionCallPutType_MIN = OCPT_CALL;
const OptionCallPutType OptionCallPutType_MAX = OCPT_PUT;
const int OptionCallPutType_ARRAYSIZE = OptionCallPutType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionCallPutType_descriptor();
inline const ::std::string& OptionCallPutType_Name(OptionCallPutType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionCallPutType_descriptor(), value);
}
inline bool OptionCallPutType_Parse(
    const ::std::string& name, OptionCallPutType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionCallPutType>(
    OptionCallPutType_descriptor(), name, value);
}
enum OptionDeliveryDateType {
  ODDT_EUR = 0,
  OptionDeliveryDateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OptionDeliveryDateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OptionDeliveryDateType_IsValid(int value);
const OptionDeliveryDateType OptionDeliveryDateType_MIN = ODDT_EUR;
const OptionDeliveryDateType OptionDeliveryDateType_MAX = ODDT_EUR;
const int OptionDeliveryDateType_ARRAYSIZE = OptionDeliveryDateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OptionDeliveryDateType_descriptor();
inline const ::std::string& OptionDeliveryDateType_Name(OptionDeliveryDateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OptionDeliveryDateType_descriptor(), value);
}
inline bool OptionDeliveryDateType_Parse(
    const ::std::string& name, OptionDeliveryDateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OptionDeliveryDateType>(
    OptionDeliveryDateType_descriptor(), name, value);
}
enum CloseCommissionAlgorithim {
  CCA_NORMAL = 0,
  CCA_ONCE = 1,
  CCA_MULTIPLE_BY_DATE = 2,
  CloseCommissionAlgorithim_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CloseCommissionAlgorithim_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CloseCommissionAlgorithim_IsValid(int value);
const CloseCommissionAlgorithim CloseCommissionAlgorithim_MIN = CCA_NORMAL;
const CloseCommissionAlgorithim CloseCommissionAlgorithim_MAX = CCA_MULTIPLE_BY_DATE;
const int CloseCommissionAlgorithim_ARRAYSIZE = CloseCommissionAlgorithim_MAX + 1;

const ::google::protobuf::EnumDescriptor* CloseCommissionAlgorithim_descriptor();
inline const ::std::string& CloseCommissionAlgorithim_Name(CloseCommissionAlgorithim value) {
  return ::google::protobuf::internal::NameOfEnum(
    CloseCommissionAlgorithim_descriptor(), value);
}
inline bool CloseCommissionAlgorithim_Parse(
    const ::std::string& name, CloseCommissionAlgorithim* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CloseCommissionAlgorithim>(
    CloseCommissionAlgorithim_descriptor(), name, value);
}
enum AccountType {
  CN_FUTURE = 0,
  CN_STOCK = 1,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool AccountType_IsValid(int value);
const AccountType AccountType_MIN = CN_FUTURE;
const AccountType AccountType_MAX = CN_STOCK;
const int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountType_descriptor();
inline const ::std::string& AccountType_Name(AccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountType_descriptor(), value);
}
inline bool AccountType_Parse(
    const ::std::string& name, AccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum CurrencyType {
  CNY = 0,
  USD = 1,
  CurrencyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CurrencyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CurrencyType_IsValid(int value);
const CurrencyType CurrencyType_MIN = CNY;
const CurrencyType CurrencyType_MAX = USD;
const int CurrencyType_ARRAYSIZE = CurrencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrencyType_descriptor();
inline const ::std::string& CurrencyType_Name(CurrencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrencyType_descriptor(), value);
}
inline bool CurrencyType_Parse(
    const ::std::string& name, CurrencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrencyType>(
    CurrencyType_descriptor(), name, value);
}
enum TradingAccountType {
  TAT_NORMAL = 0,
  TAT_TRAINNING = 1,
  TAT_CTP_MIRROR = 2,
  TradingAccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TradingAccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TradingAccountType_IsValid(int value);
const TradingAccountType TradingAccountType_MIN = TAT_NORMAL;
const TradingAccountType TradingAccountType_MAX = TAT_CTP_MIRROR;
const int TradingAccountType_ARRAYSIZE = TradingAccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradingAccountType_descriptor();
inline const ::std::string& TradingAccountType_Name(TradingAccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradingAccountType_descriptor(), value);
}
inline bool TradingAccountType_Parse(
    const ::std::string& name, TradingAccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradingAccountType>(
    TradingAccountType_descriptor(), name, value);
}
// ===================================================================

class Symbol :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Symbol) */ {
 public:
  Symbol();
  virtual ~Symbol();

  Symbol(const Symbol& from);

  inline Symbol& operator=(const Symbol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Symbol(Symbol&& from) noexcept
    : Symbol() {
    *this = ::std::move(from);
  }

  inline Symbol& operator=(Symbol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Symbol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Symbol* internal_default_instance() {
    return reinterpret_cast<const Symbol*>(
               &_Symbol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Symbol* other);
  friend void swap(Symbol& a, Symbol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Symbol* New() const final {
    return CreateMaybeMessage<Symbol>(nullptr);
  }

  Symbol* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Symbol>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Symbol& from);
  void MergeFrom(const Symbol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Symbol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // .pb.ExchangeType exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::pb::ExchangeType exchange() const;
  void set_exchange(::pb::ExchangeType value);

  // @@protoc_insertion_point(class_scope:pb.Symbol)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  int exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SymbolList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SymbolList) */ {
 public:
  SymbolList();
  virtual ~SymbolList();

  SymbolList(const SymbolList& from);

  inline SymbolList& operator=(const SymbolList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolList(SymbolList&& from) noexcept
    : SymbolList() {
    *this = ::std::move(from);
  }

  inline SymbolList& operator=(SymbolList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SymbolList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolList* internal_default_instance() {
    return reinterpret_cast<const SymbolList*>(
               &_SymbolList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SymbolList* other);
  friend void swap(SymbolList& a, SymbolList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolList* New() const final {
    return CreateMaybeMessage<SymbolList>(nullptr);
  }

  SymbolList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SymbolList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SymbolList& from);
  void MergeFrom(const SymbolList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Symbol list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::Symbol* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Symbol >*
      mutable_list();
  const ::pb::Symbol& list(int index) const;
  ::pb::Symbol* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::Symbol >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.SymbolList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Symbol > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProductID :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ProductID) */ {
 public:
  ProductID();
  virtual ~ProductID();

  ProductID(const ProductID& from);

  inline ProductID& operator=(const ProductID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductID(ProductID&& from) noexcept
    : ProductID() {
    *this = ::std::move(from);
  }

  inline ProductID& operator=(ProductID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProductID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductID* internal_default_instance() {
    return reinterpret_cast<const ProductID*>(
               &_ProductID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProductID* other);
  friend void swap(ProductID& a, ProductID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductID* New() const final {
    return CreateMaybeMessage<ProductID>(nullptr);
  }

  ProductID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductID& from);
  void MergeFrom(const ProductID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 2;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // .pb.ExchangeType exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::pb::ExchangeType exchange() const;
  void set_exchange(::pb::ExchangeType value);

  // @@protoc_insertion_point(class_scope:pb.ProductID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  int exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BrokerRoute :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BrokerRoute) */ {
 public:
  BrokerRoute();
  virtual ~BrokerRoute();

  BrokerRoute(const BrokerRoute& from);

  inline BrokerRoute& operator=(const BrokerRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrokerRoute(BrokerRoute&& from) noexcept
    : BrokerRoute() {
    *this = ::std::move(from);
  }

  inline BrokerRoute& operator=(BrokerRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BrokerRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrokerRoute* internal_default_instance() {
    return reinterpret_cast<const BrokerRoute*>(
               &_BrokerRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BrokerRoute* other);
  friend void swap(BrokerRoute& a, BrokerRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrokerRoute* New() const final {
    return CreateMaybeMessage<BrokerRoute>(nullptr);
  }

  BrokerRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrokerRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrokerRoute& from);
  void MergeFrom(const BrokerRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string md_front_list = 4;
  int md_front_list_size() const;
  void clear_md_front_list();
  static const int kMdFrontListFieldNumber = 4;
  const ::std::string& md_front_list(int index) const;
  ::std::string* mutable_md_front_list(int index);
  void set_md_front_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_md_front_list(int index, ::std::string&& value);
  #endif
  void set_md_front_list(int index, const char* value);
  void set_md_front_list(int index, const char* value, size_t size);
  ::std::string* add_md_front_list();
  void add_md_front_list(const ::std::string& value);
  #if LANG_CXX11
  void add_md_front_list(::std::string&& value);
  #endif
  void add_md_front_list(const char* value);
  void add_md_front_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& md_front_list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_md_front_list();

  // repeated string trade_front_list = 5;
  int trade_front_list_size() const;
  void clear_trade_front_list();
  static const int kTradeFrontListFieldNumber = 5;
  const ::std::string& trade_front_list(int index) const;
  ::std::string* mutable_trade_front_list(int index);
  void set_trade_front_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trade_front_list(int index, ::std::string&& value);
  #endif
  void set_trade_front_list(int index, const char* value);
  void set_trade_front_list(int index, const char* value, size_t size);
  ::std::string* add_trade_front_list();
  void add_trade_front_list(const ::std::string& value);
  #if LANG_CXX11
  void add_trade_front_list(::std::string&& value);
  #endif
  void add_trade_front_list(const char* value);
  void add_trade_front_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& trade_front_list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_trade_front_list();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BrokerRoute)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> md_front_list_;
  ::google::protobuf::RepeatedPtrField<::std::string> trade_front_list_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class BrokerRouteList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.BrokerRouteList) */ {
 public:
  BrokerRouteList();
  virtual ~BrokerRouteList();

  BrokerRouteList(const BrokerRouteList& from);

  inline BrokerRouteList& operator=(const BrokerRouteList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrokerRouteList(BrokerRouteList&& from) noexcept
    : BrokerRouteList() {
    *this = ::std::move(from);
  }

  inline BrokerRouteList& operator=(BrokerRouteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BrokerRouteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrokerRouteList* internal_default_instance() {
    return reinterpret_cast<const BrokerRouteList*>(
               &_BrokerRouteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BrokerRouteList* other);
  friend void swap(BrokerRouteList& a, BrokerRouteList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrokerRouteList* New() const final {
    return CreateMaybeMessage<BrokerRouteList>(nullptr);
  }

  BrokerRouteList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrokerRouteList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrokerRouteList& from);
  void MergeFrom(const BrokerRouteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrokerRouteList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.BrokerRoute list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::BrokerRoute* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::BrokerRoute >*
      mutable_list();
  const ::pb::BrokerRoute& list(int index) const;
  ::pb::BrokerRoute* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::BrokerRoute >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.BrokerRouteList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::BrokerRoute > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class InstrumentInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.InstrumentInfo) */ {
 public:
  InstrumentInfo();
  virtual ~InstrumentInfo();

  InstrumentInfo(const InstrumentInfo& from);

  inline InstrumentInfo& operator=(const InstrumentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentInfo(InstrumentInfo&& from) noexcept
    : InstrumentInfo() {
    *this = ::std::move(from);
  }

  inline InstrumentInfo& operator=(InstrumentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InstrumentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentInfo* internal_default_instance() {
    return reinterpret_cast<const InstrumentInfo*>(
               &_InstrumentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InstrumentInfo* other);
  friend void swap(InstrumentInfo& a, InstrumentInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentInfo* New() const final {
    return CreateMaybeMessage<InstrumentInfo>(nullptr);
  }

  InstrumentInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentInfo& from);
  void MergeFrom(const InstrumentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string symbol_name = 1;
  void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 1;
  const ::std::string& symbol_name() const;
  void set_symbol_name(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol_name(::std::string&& value);
  #endif
  void set_symbol_name(const char* value);
  void set_symbol_name(const char* value, size_t size);
  ::std::string* mutable_symbol_name();
  ::std::string* release_symbol_name();
  void set_allocated_symbol_name(::std::string* symbol_name);

  // .pb.Symbol base_symbol = 22;
  bool has_base_symbol() const;
  void clear_base_symbol();
  static const int kBaseSymbolFieldNumber = 22;
  const ::pb::Symbol& base_symbol() const;
  ::pb::Symbol* release_base_symbol();
  ::pb::Symbol* mutable_base_symbol();
  void set_allocated_base_symbol(::pb::Symbol* base_symbol);

  // .pb.Symbol instrument_code = 29;
  bool has_instrument_code() const;
  void clear_instrument_code();
  static const int kInstrumentCodeFieldNumber = 29;
  const ::pb::Symbol& instrument_code() const;
  ::pb::Symbol* release_instrument_code();
  ::pb::Symbol* mutable_instrument_code();
  void set_allocated_instrument_code(::pb::Symbol* instrument_code);

  // int64 update_time = 3;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  ::google::protobuf::int64 update_time() const;
  void set_update_time(::google::protobuf::int64 value);

  // int32 position_rank = 2;
  void clear_position_rank();
  static const int kPositionRankFieldNumber = 2;
  ::google::protobuf::int32 position_rank() const;
  void set_position_rank(::google::protobuf::int32 value);

  // int32 update_trading_day = 4;
  void clear_update_trading_day();
  static const int kUpdateTradingDayFieldNumber = 4;
  ::google::protobuf::int32 update_trading_day() const;
  void set_update_trading_day(::google::protobuf::int32 value);

  // double upper_limit_price = 5;
  void clear_upper_limit_price();
  static const int kUpperLimitPriceFieldNumber = 5;
  double upper_limit_price() const;
  void set_upper_limit_price(double value);

  // double lower_limit_price = 6;
  void clear_lower_limit_price();
  static const int kLowerLimitPriceFieldNumber = 6;
  double lower_limit_price() const;
  void set_lower_limit_price(double value);

  // double pre_close_price = 7;
  void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 7;
  double pre_close_price() const;
  void set_pre_close_price(double value);

  // double pre_settlement_price = 8;
  void clear_pre_settlement_price();
  static const int kPreSettlementPriceFieldNumber = 8;
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);

  // int32 pre_volume = 9;
  void clear_pre_volume();
  static const int kPreVolumeFieldNumber = 9;
  ::google::protobuf::int32 pre_volume() const;
  void set_pre_volume(::google::protobuf::int32 value);

  // int32 pre_position = 10;
  void clear_pre_position();
  static const int kPrePositionFieldNumber = 10;
  ::google::protobuf::int32 pre_position() const;
  void set_pre_position(::google::protobuf::int32 value);

  // double settlement_price = 11;
  void clear_settlement_price();
  static const int kSettlementPriceFieldNumber = 11;
  double settlement_price() const;
  void set_settlement_price(double value);

  // int32 create_date = 12;
  void clear_create_date();
  static const int kCreateDateFieldNumber = 12;
  ::google::protobuf::int32 create_date() const;
  void set_create_date(::google::protobuf::int32 value);

  // int32 open_date = 13;
  void clear_open_date();
  static const int kOpenDateFieldNumber = 13;
  ::google::protobuf::int32 open_date() const;
  void set_open_date(::google::protobuf::int32 value);

  // int32 expire_date = 14;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 14;
  ::google::protobuf::int32 expire_date() const;
  void set_expire_date(::google::protobuf::int32 value);

  // int32 start_deliver_date = 15;
  void clear_start_deliver_date();
  static const int kStartDeliverDateFieldNumber = 15;
  ::google::protobuf::int32 start_deliver_date() const;
  void set_start_deliver_date(::google::protobuf::int32 value);

  // int32 end_deliver_date = 16;
  void clear_end_deliver_date();
  static const int kEndDeliverDateFieldNumber = 16;
  ::google::protobuf::int32 end_deliver_date() const;
  void set_end_deliver_date(::google::protobuf::int32 value);

  // int32 is_close_today_allowed = 17;
  void clear_is_close_today_allowed();
  static const int kIsCloseTodayAllowedFieldNumber = 17;
  ::google::protobuf::int32 is_close_today_allowed() const;
  void set_is_close_today_allowed(::google::protobuf::int32 value);

  // int32 max_market_order_volume = 18;
  void clear_max_market_order_volume();
  static const int kMaxMarketOrderVolumeFieldNumber = 18;
  ::google::protobuf::int32 max_market_order_volume() const;
  void set_max_market_order_volume(::google::protobuf::int32 value);

  // int32 min_market_order_volume = 19;
  void clear_min_market_order_volume();
  static const int kMinMarketOrderVolumeFieldNumber = 19;
  ::google::protobuf::int32 min_market_order_volume() const;
  void set_min_market_order_volume(::google::protobuf::int32 value);

  // int32 max_limit_order_volume = 20;
  void clear_max_limit_order_volume();
  static const int kMaxLimitOrderVolumeFieldNumber = 20;
  ::google::protobuf::int32 max_limit_order_volume() const;
  void set_max_limit_order_volume(::google::protobuf::int32 value);

  // int32 min_limit_order_volume = 21;
  void clear_min_limit_order_volume();
  static const int kMinLimitOrderVolumeFieldNumber = 21;
  ::google::protobuf::int32 min_limit_order_volume() const;
  void set_min_limit_order_volume(::google::protobuf::int32 value);

  // double strike_price = 23;
  void clear_strike_price();
  static const int kStrikePriceFieldNumber = 23;
  double strike_price() const;
  void set_strike_price(double value);

  // double underlying_multiple = 25;
  void clear_underlying_multiple();
  static const int kUnderlyingMultipleFieldNumber = 25;
  double underlying_multiple() const;
  void set_underlying_multiple(double value);

  // .pb.OptionCallPutType call_put_type = 24;
  void clear_call_put_type();
  static const int kCallPutTypeFieldNumber = 24;
  ::pb::OptionCallPutType call_put_type() const;
  void set_call_put_type(::pb::OptionCallPutType value);

  // int32 combination_type = 26;
  void clear_combination_type();
  static const int kCombinationTypeFieldNumber = 26;
  ::google::protobuf::int32 combination_type() const;
  void set_combination_type(::google::protobuf::int32 value);

  // int32 min_buy_volume = 27;
  void clear_min_buy_volume();
  static const int kMinBuyVolumeFieldNumber = 27;
  ::google::protobuf::int32 min_buy_volume() const;
  void set_min_buy_volume(::google::protobuf::int32 value);

  // int32 min_sell_volume = 28;
  void clear_min_sell_volume();
  static const int kMinSellVolumeFieldNumber = 28;
  ::google::protobuf::int32 min_sell_volume() const;
  void set_min_sell_volume(::google::protobuf::int32 value);

  // bool is_trading = 30;
  void clear_is_trading();
  static const int kIsTradingFieldNumber = 30;
  bool is_trading() const;
  void set_is_trading(bool value);

  // .pb.OptionDeliveryDateType delivery_date_type = 31;
  void clear_delivery_date_type();
  static const int kDeliveryDateTypeFieldNumber = 31;
  ::pb::OptionDeliveryDateType delivery_date_type() const;
  void set_delivery_date_type(::pb::OptionDeliveryDateType value);

  // @@protoc_insertion_point(class_scope:pb.InstrumentInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_name_;
  ::pb::Symbol* base_symbol_;
  ::pb::Symbol* instrument_code_;
  ::google::protobuf::int64 update_time_;
  ::google::protobuf::int32 position_rank_;
  ::google::protobuf::int32 update_trading_day_;
  double upper_limit_price_;
  double lower_limit_price_;
  double pre_close_price_;
  double pre_settlement_price_;
  ::google::protobuf::int32 pre_volume_;
  ::google::protobuf::int32 pre_position_;
  double settlement_price_;
  ::google::protobuf::int32 create_date_;
  ::google::protobuf::int32 open_date_;
  ::google::protobuf::int32 expire_date_;
  ::google::protobuf::int32 start_deliver_date_;
  ::google::protobuf::int32 end_deliver_date_;
  ::google::protobuf::int32 is_close_today_allowed_;
  ::google::protobuf::int32 max_market_order_volume_;
  ::google::protobuf::int32 min_market_order_volume_;
  ::google::protobuf::int32 max_limit_order_volume_;
  ::google::protobuf::int32 min_limit_order_volume_;
  double strike_price_;
  double underlying_multiple_;
  int call_put_type_;
  ::google::protobuf::int32 combination_type_;
  ::google::protobuf::int32 min_buy_volume_;
  ::google::protobuf::int32 min_sell_volume_;
  bool is_trading_;
  int delivery_date_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SimpleTimePeriod :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SimpleTimePeriod) */ {
 public:
  SimpleTimePeriod();
  virtual ~SimpleTimePeriod();

  SimpleTimePeriod(const SimpleTimePeriod& from);

  inline SimpleTimePeriod& operator=(const SimpleTimePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleTimePeriod(SimpleTimePeriod&& from) noexcept
    : SimpleTimePeriod() {
    *this = ::std::move(from);
  }

  inline SimpleTimePeriod& operator=(SimpleTimePeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleTimePeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleTimePeriod* internal_default_instance() {
    return reinterpret_cast<const SimpleTimePeriod*>(
               &_SimpleTimePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SimpleTimePeriod* other);
  friend void swap(SimpleTimePeriod& a, SimpleTimePeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleTimePeriod* New() const final {
    return CreateMaybeMessage<SimpleTimePeriod>(nullptr);
  }

  SimpleTimePeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleTimePeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleTimePeriod& from);
  void MergeFrom(const SimpleTimePeriod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleTimePeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 start = 1;
  void clear_start();
  static const int kStartFieldNumber = 1;
  ::google::protobuf::int32 start() const;
  void set_start(::google::protobuf::int32 value);

  // int32 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int32 end() const;
  void set_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.SimpleTimePeriod)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MarketTimeRule :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MarketTimeRule) */ {
 public:
  MarketTimeRule();
  virtual ~MarketTimeRule();

  MarketTimeRule(const MarketTimeRule& from);

  inline MarketTimeRule& operator=(const MarketTimeRule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketTimeRule(MarketTimeRule&& from) noexcept
    : MarketTimeRule() {
    *this = ::std::move(from);
  }

  inline MarketTimeRule& operator=(MarketTimeRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MarketTimeRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketTimeRule* internal_default_instance() {
    return reinterpret_cast<const MarketTimeRule*>(
               &_MarketTimeRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MarketTimeRule* other);
  friend void swap(MarketTimeRule& a, MarketTimeRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketTimeRule* New() const final {
    return CreateMaybeMessage<MarketTimeRule>(nullptr);
  }

  MarketTimeRule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketTimeRule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketTimeRule& from);
  void MergeFrom(const MarketTimeRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketTimeRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.SimpleTimePeriod send_rule = 1;
  int send_rule_size() const;
  void clear_send_rule();
  static const int kSendRuleFieldNumber = 1;
  ::pb::SimpleTimePeriod* mutable_send_rule(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
      mutable_send_rule();
  const ::pb::SimpleTimePeriod& send_rule(int index) const;
  ::pb::SimpleTimePeriod* add_send_rule();
  const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
      send_rule() const;

  // repeated .pb.SimpleTimePeriod cancel_rule = 2;
  int cancel_rule_size() const;
  void clear_cancel_rule();
  static const int kCancelRuleFieldNumber = 2;
  ::pb::SimpleTimePeriod* mutable_cancel_rule(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
      mutable_cancel_rule();
  const ::pb::SimpleTimePeriod& cancel_rule(int index) const;
  ::pb::SimpleTimePeriod* add_cancel_rule();
  const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
      cancel_rule() const;

  // repeated .pb.SimpleTimePeriod matching_rule = 3;
  int matching_rule_size() const;
  void clear_matching_rule();
  static const int kMatchingRuleFieldNumber = 3;
  ::pb::SimpleTimePeriod* mutable_matching_rule(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
      mutable_matching_rule();
  const ::pb::SimpleTimePeriod& matching_rule(int index) const;
  ::pb::SimpleTimePeriod* add_matching_rule();
  const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
      matching_rule() const;

  // @@protoc_insertion_point(class_scope:pb.MarketTimeRule)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod > send_rule_;
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod > cancel_rule_;
  ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod > matching_rule_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProductInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ProductInfo) */ {
 public:
  ProductInfo();
  virtual ~ProductInfo();

  ProductInfo(const ProductInfo& from);

  inline ProductInfo& operator=(const ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductInfo(ProductInfo&& from) noexcept
    : ProductInfo() {
    *this = ::std::move(from);
  }

  inline ProductInfo& operator=(ProductInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProductInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductInfo* internal_default_instance() {
    return reinterpret_cast<const ProductInfo*>(
               &_ProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ProductInfo* other);
  friend void swap(ProductInfo& a, ProductInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductInfo* New() const final {
    return CreateMaybeMessage<ProductInfo>(nullptr);
  }

  ProductInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductInfo& from);
  void MergeFrom(const ProductInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string product_name = 4;
  void clear_product_name();
  static const int kProductNameFieldNumber = 4;
  const ::std::string& product_name() const;
  void set_product_name(const ::std::string& value);
  #if LANG_CXX11
  void set_product_name(::std::string&& value);
  #endif
  void set_product_name(const char* value);
  void set_product_name(const char* value, size_t size);
  ::std::string* mutable_product_name();
  ::std::string* release_product_name();
  void set_allocated_product_name(::std::string* product_name);

  // .pb.ProductID product_id = 1;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 1;
  const ::pb::ProductID& product_id() const;
  ::pb::ProductID* release_product_id();
  ::pb::ProductID* mutable_product_id();
  void set_allocated_product_id(::pb::ProductID* product_id);

  // .pb.ProductID product_group_id = 2;
  bool has_product_group_id() const;
  void clear_product_group_id();
  static const int kProductGroupIdFieldNumber = 2;
  const ::pb::ProductID& product_group_id() const;
  ::pb::ProductID* release_product_group_id();
  ::pb::ProductID* mutable_product_group_id();
  void set_allocated_product_group_id(::pb::ProductID* product_group_id);

  // .pb.MarketTimeRule time_rule = 11;
  bool has_time_rule() const;
  void clear_time_rule();
  static const int kTimeRuleFieldNumber = 11;
  const ::pb::MarketTimeRule& time_rule() const;
  ::pb::MarketTimeRule* release_time_rule();
  ::pb::MarketTimeRule* mutable_time_rule();
  void set_allocated_time_rule(::pb::MarketTimeRule* time_rule);

  // .pb.ProductType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::pb::ProductType type() const;
  void set_type(::pb::ProductType value);

  // int32 volume_multiple = 6;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 6;
  ::google::protobuf::int32 volume_multiple() const;
  void set_volume_multiple(::google::protobuf::int32 value);

  // double price_tick = 5;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 5;
  double price_tick() const;
  void set_price_tick(double value);

  // int32 pre_volume = 7;
  void clear_pre_volume();
  static const int kPreVolumeFieldNumber = 7;
  ::google::protobuf::int32 pre_volume() const;
  void set_pre_volume(::google::protobuf::int32 value);

  // int32 pre_position = 8;
  void clear_pre_position();
  static const int kPrePositionFieldNumber = 8;
  ::google::protobuf::int32 pre_position() const;
  void set_pre_position(::google::protobuf::int32 value);

  // int32 currency_type = 9;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 9;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // int32 settlement_group = 10;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 10;
  ::google::protobuf::int32 settlement_group() const;
  void set_settlement_group(::google::protobuf::int32 value);

  // bool distinguish_position_time = 12;
  void clear_distinguish_position_time();
  static const int kDistinguishPositionTimeFieldNumber = 12;
  bool distinguish_position_time() const;
  void set_distinguish_position_time(bool value);

  // @@protoc_insertion_point(class_scope:pb.ProductInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr product_name_;
  ::pb::ProductID* product_id_;
  ::pb::ProductID* product_group_id_;
  ::pb::MarketTimeRule* time_rule_;
  int type_;
  ::google::protobuf::int32 volume_multiple_;
  double price_tick_;
  ::google::protobuf::int32 pre_volume_;
  ::google::protobuf::int32 pre_position_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 settlement_group_;
  bool distinguish_position_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TradingInstrument :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingInstrument) */ {
 public:
  TradingInstrument();
  virtual ~TradingInstrument();

  TradingInstrument(const TradingInstrument& from);

  inline TradingInstrument& operator=(const TradingInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingInstrument(TradingInstrument&& from) noexcept
    : TradingInstrument() {
    *this = ::std::move(from);
  }

  inline TradingInstrument& operator=(TradingInstrument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingInstrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingInstrument* internal_default_instance() {
    return reinterpret_cast<const TradingInstrument*>(
               &_TradingInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TradingInstrument* other);
  friend void swap(TradingInstrument& a, TradingInstrument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingInstrument* New() const final {
    return CreateMaybeMessage<TradingInstrument>(nullptr);
  }

  TradingInstrument* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingInstrument>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingInstrument& from);
  void MergeFrom(const TradingInstrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingInstrument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.InstrumentInfo instrument_info = 2;
  bool has_instrument_info() const;
  void clear_instrument_info();
  static const int kInstrumentInfoFieldNumber = 2;
  const ::pb::InstrumentInfo& instrument_info() const;
  ::pb::InstrumentInfo* release_instrument_info();
  ::pb::InstrumentInfo* mutable_instrument_info();
  void set_allocated_instrument_info(::pb::InstrumentInfo* instrument_info);

  // .pb.ProductInfo product_info = 3;
  bool has_product_info() const;
  void clear_product_info();
  static const int kProductInfoFieldNumber = 3;
  const ::pb::ProductInfo& product_info() const;
  ::pb::ProductInfo* release_product_info();
  ::pb::ProductInfo* mutable_product_info();
  void set_allocated_product_info(::pb::ProductInfo* product_info);

  // @@protoc_insertion_point(class_scope:pb.TradingInstrument)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  ::pb::InstrumentInfo* instrument_info_;
  ::pb::ProductInfo* product_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class TradingInstrumentList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingInstrumentList) */ {
 public:
  TradingInstrumentList();
  virtual ~TradingInstrumentList();

  TradingInstrumentList(const TradingInstrumentList& from);

  inline TradingInstrumentList& operator=(const TradingInstrumentList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingInstrumentList(TradingInstrumentList&& from) noexcept
    : TradingInstrumentList() {
    *this = ::std::move(from);
  }

  inline TradingInstrumentList& operator=(TradingInstrumentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingInstrumentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingInstrumentList* internal_default_instance() {
    return reinterpret_cast<const TradingInstrumentList*>(
               &_TradingInstrumentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(TradingInstrumentList* other);
  friend void swap(TradingInstrumentList& a, TradingInstrumentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingInstrumentList* New() const final {
    return CreateMaybeMessage<TradingInstrumentList>(nullptr);
  }

  TradingInstrumentList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingInstrumentList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingInstrumentList& from);
  void MergeFrom(const TradingInstrumentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingInstrumentList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingInstrument list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingInstrument* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >*
      mutable_list();
  const ::pb::TradingInstrument& list(int index) const;
  ::pb::TradingInstrument* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.TradingInstrumentList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ProductInfoList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ProductInfoList) */ {
 public:
  ProductInfoList();
  virtual ~ProductInfoList();

  ProductInfoList(const ProductInfoList& from);

  inline ProductInfoList& operator=(const ProductInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProductInfoList(ProductInfoList&& from) noexcept
    : ProductInfoList() {
    *this = ::std::move(from);
  }

  inline ProductInfoList& operator=(ProductInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProductInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductInfoList* internal_default_instance() {
    return reinterpret_cast<const ProductInfoList*>(
               &_ProductInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ProductInfoList* other);
  friend void swap(ProductInfoList& a, ProductInfoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProductInfoList* New() const final {
    return CreateMaybeMessage<ProductInfoList>(nullptr);
  }

  ProductInfoList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProductInfoList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProductInfoList& from);
  void MergeFrom(const ProductInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.ProductInfo list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::ProductInfo* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >*
      mutable_list();
  const ::pb::ProductInfo& list(int index) const;
  ::pb::ProductInfo* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.ProductInfoList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ReqSetTradingInstrumentList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqSetTradingInstrumentList) */ {
 public:
  ReqSetTradingInstrumentList();
  virtual ~ReqSetTradingInstrumentList();

  ReqSetTradingInstrumentList(const ReqSetTradingInstrumentList& from);

  inline ReqSetTradingInstrumentList& operator=(const ReqSetTradingInstrumentList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSetTradingInstrumentList(ReqSetTradingInstrumentList&& from) noexcept
    : ReqSetTradingInstrumentList() {
    *this = ::std::move(from);
  }

  inline ReqSetTradingInstrumentList& operator=(ReqSetTradingInstrumentList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqSetTradingInstrumentList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSetTradingInstrumentList* internal_default_instance() {
    return reinterpret_cast<const ReqSetTradingInstrumentList*>(
               &_ReqSetTradingInstrumentList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ReqSetTradingInstrumentList* other);
  friend void swap(ReqSetTradingInstrumentList& a, ReqSetTradingInstrumentList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSetTradingInstrumentList* New() const final {
    return CreateMaybeMessage<ReqSetTradingInstrumentList>(nullptr);
  }

  ReqSetTradingInstrumentList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetTradingInstrumentList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSetTradingInstrumentList& from);
  void MergeFrom(const ReqSetTradingInstrumentList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetTradingInstrumentList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingInstrument list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  ::pb::TradingInstrument* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >*
      mutable_list();
  const ::pb::TradingInstrument& list(int index) const;
  ::pb::TradingInstrument* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >&
      list() const;

  // string op_code = 1;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 1;
  const ::std::string& op_code() const;
  void set_op_code(const ::std::string& value);
  #if LANG_CXX11
  void set_op_code(::std::string&& value);
  #endif
  void set_op_code(const char* value);
  void set_op_code(const char* value, size_t size);
  ::std::string* mutable_op_code();
  ::std::string* release_op_code();
  void set_allocated_op_code(::std::string* op_code);

  // int32 exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  ::google::protobuf::int32 exchange() const;
  void set_exchange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ReqSetTradingInstrumentList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument > list_;
  ::google::protobuf::internal::ArenaStringPtr op_code_;
  ::google::protobuf::int32 exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ReqSetProductInfoList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqSetProductInfoList) */ {
 public:
  ReqSetProductInfoList();
  virtual ~ReqSetProductInfoList();

  ReqSetProductInfoList(const ReqSetProductInfoList& from);

  inline ReqSetProductInfoList& operator=(const ReqSetProductInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqSetProductInfoList(ReqSetProductInfoList&& from) noexcept
    : ReqSetProductInfoList() {
    *this = ::std::move(from);
  }

  inline ReqSetProductInfoList& operator=(ReqSetProductInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqSetProductInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqSetProductInfoList* internal_default_instance() {
    return reinterpret_cast<const ReqSetProductInfoList*>(
               &_ReqSetProductInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ReqSetProductInfoList* other);
  friend void swap(ReqSetProductInfoList& a, ReqSetProductInfoList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqSetProductInfoList* New() const final {
    return CreateMaybeMessage<ReqSetProductInfoList>(nullptr);
  }

  ReqSetProductInfoList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetProductInfoList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqSetProductInfoList& from);
  void MergeFrom(const ReqSetProductInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetProductInfoList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.ProductInfo list = 3;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 3;
  ::pb::ProductInfo* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >*
      mutable_list();
  const ::pb::ProductInfo& list(int index) const;
  ::pb::ProductInfo* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >&
      list() const;

  // string op_code = 1;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 1;
  const ::std::string& op_code() const;
  void set_op_code(const ::std::string& value);
  #if LANG_CXX11
  void set_op_code(::std::string&& value);
  #endif
  void set_op_code(const char* value);
  void set_op_code(const char* value, size_t size);
  ::std::string* mutable_op_code();
  ::std::string* release_op_code();
  void set_allocated_op_code(::std::string* op_code);

  // int32 exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  ::google::protobuf::int32 exchange() const;
  void set_exchange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ReqSetProductInfoList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo > list_;
  ::google::protobuf::internal::ArenaStringPtr op_code_;
  ::google::protobuf::int32 exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateTIOpenDate :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqUpdateTIOpenDate) */ {
 public:
  ReqUpdateTIOpenDate();
  virtual ~ReqUpdateTIOpenDate();

  ReqUpdateTIOpenDate(const ReqUpdateTIOpenDate& from);

  inline ReqUpdateTIOpenDate& operator=(const ReqUpdateTIOpenDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqUpdateTIOpenDate(ReqUpdateTIOpenDate&& from) noexcept
    : ReqUpdateTIOpenDate() {
    *this = ::std::move(from);
  }

  inline ReqUpdateTIOpenDate& operator=(ReqUpdateTIOpenDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqUpdateTIOpenDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqUpdateTIOpenDate* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateTIOpenDate*>(
               &_ReqUpdateTIOpenDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ReqUpdateTIOpenDate* other);
  friend void swap(ReqUpdateTIOpenDate& a, ReqUpdateTIOpenDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateTIOpenDate* New() const final {
    return CreateMaybeMessage<ReqUpdateTIOpenDate>(nullptr);
  }

  ReqUpdateTIOpenDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateTIOpenDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqUpdateTIOpenDate& from);
  void MergeFrom(const ReqUpdateTIOpenDate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateTIOpenDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 open_date = 2;
  void clear_open_date();
  static const int kOpenDateFieldNumber = 2;
  ::google::protobuf::int32 open_date() const;
  void set_open_date(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ReqUpdateTIOpenDate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int32 open_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateTIOpenDateList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqUpdateTIOpenDateList) */ {
 public:
  ReqUpdateTIOpenDateList();
  virtual ~ReqUpdateTIOpenDateList();

  ReqUpdateTIOpenDateList(const ReqUpdateTIOpenDateList& from);

  inline ReqUpdateTIOpenDateList& operator=(const ReqUpdateTIOpenDateList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqUpdateTIOpenDateList(ReqUpdateTIOpenDateList&& from) noexcept
    : ReqUpdateTIOpenDateList() {
    *this = ::std::move(from);
  }

  inline ReqUpdateTIOpenDateList& operator=(ReqUpdateTIOpenDateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqUpdateTIOpenDateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqUpdateTIOpenDateList* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateTIOpenDateList*>(
               &_ReqUpdateTIOpenDateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ReqUpdateTIOpenDateList* other);
  friend void swap(ReqUpdateTIOpenDateList& a, ReqUpdateTIOpenDateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateTIOpenDateList* New() const final {
    return CreateMaybeMessage<ReqUpdateTIOpenDateList>(nullptr);
  }

  ReqUpdateTIOpenDateList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateTIOpenDateList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqUpdateTIOpenDateList& from);
  void MergeFrom(const ReqUpdateTIOpenDateList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateTIOpenDateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.ReqUpdateTIOpenDate list = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  ::pb::ReqUpdateTIOpenDate* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::ReqUpdateTIOpenDate >*
      mutable_list();
  const ::pb::ReqUpdateTIOpenDate& list(int index) const;
  ::pb::ReqUpdateTIOpenDate* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::ReqUpdateTIOpenDate >&
      list() const;

  // string op_code = 3;
  void clear_op_code();
  static const int kOpCodeFieldNumber = 3;
  const ::std::string& op_code() const;
  void set_op_code(const ::std::string& value);
  #if LANG_CXX11
  void set_op_code(::std::string&& value);
  #endif
  void set_op_code(const char* value);
  void set_op_code(const char* value, size_t size);
  ::std::string* mutable_op_code();
  ::std::string* release_op_code();
  void set_allocated_op_code(::std::string* op_code);

  // int32 exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  ::google::protobuf::int32 exchange() const;
  void set_exchange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ReqUpdateTIOpenDateList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::ReqUpdateTIOpenDate > list_;
  ::google::protobuf::internal::ArenaStringPtr op_code_;
  ::google::protobuf::int32 exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class AccountMoneySummary :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AccountMoneySummary) */ {
 public:
  AccountMoneySummary();
  virtual ~AccountMoneySummary();

  AccountMoneySummary(const AccountMoneySummary& from);

  inline AccountMoneySummary& operator=(const AccountMoneySummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountMoneySummary(AccountMoneySummary&& from) noexcept
    : AccountMoneySummary() {
    *this = ::std::move(from);
  }

  inline AccountMoneySummary& operator=(AccountMoneySummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AccountMoneySummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountMoneySummary* internal_default_instance() {
    return reinterpret_cast<const AccountMoneySummary*>(
               &_AccountMoneySummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AccountMoneySummary* other);
  friend void swap(AccountMoneySummary& a, AccountMoneySummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountMoneySummary* New() const final {
    return CreateMaybeMessage<AccountMoneySummary>(nullptr);
  }

  AccountMoneySummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountMoneySummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountMoneySummary& from);
  void MergeFrom(const AccountMoneySummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountMoneySummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 50;
  void clear_name();
  static const int kNameFieldNumber = 50;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .pb.AccountType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::pb::AccountType type() const;
  void set_type(::pb::AccountType value);

  // .pb.CurrencyType currency_type = 3;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 3;
  ::pb::CurrencyType currency_type() const;
  void set_currency_type(::pb::CurrencyType value);

  // double balance = 4;
  void clear_balance();
  static const int kBalanceFieldNumber = 4;
  double balance() const;
  void set_balance(double value);

  // double commission = 5;
  void clear_commission();
  static const int kCommissionFieldNumber = 5;
  double commission() const;
  void set_commission(double value);

  // double cur_margin = 6;
  void clear_cur_margin();
  static const int kCurMarginFieldNumber = 6;
  double cur_margin() const;
  void set_cur_margin(double value);

  // double net_position_amount = 7;
  void clear_net_position_amount();
  static const int kNetPositionAmountFieldNumber = 7;
  double net_position_amount() const;
  void set_net_position_amount(double value);

  // double pre_balance = 8;
  void clear_pre_balance();
  static const int kPreBalanceFieldNumber = 8;
  double pre_balance() const;
  void set_pre_balance(double value);

  // double interest_in = 9;
  void clear_interest_in();
  static const int kInterestInFieldNumber = 9;
  double interest_in() const;
  void set_interest_in(double value);

  // double deposit = 10;
  void clear_deposit();
  static const int kDepositFieldNumber = 10;
  double deposit() const;
  void set_deposit(double value);

  // double withdraw = 11;
  void clear_withdraw();
  static const int kWithdrawFieldNumber = 11;
  double withdraw() const;
  void set_withdraw(double value);

  // double frozen_margin = 12;
  void clear_frozen_margin();
  static const int kFrozenMarginFieldNumber = 12;
  double frozen_margin() const;
  void set_frozen_margin(double value);

  // double frozen_commission = 13;
  void clear_frozen_commission();
  static const int kFrozenCommissionFieldNumber = 13;
  double frozen_commission() const;
  void set_frozen_commission(double value);

  // double available = 14;
  void clear_available();
  static const int kAvailableFieldNumber = 14;
  double available() const;
  void set_available(double value);

  // double close_profit = 15;
  void clear_close_profit();
  static const int kCloseProfitFieldNumber = 15;
  double close_profit() const;
  void set_close_profit(double value);

  // double position_profit = 16;
  void clear_position_profit();
  static const int kPositionProfitFieldNumber = 16;
  double position_profit() const;
  void set_position_profit(double value);

  // double pre_mortgate = 17;
  void clear_pre_mortgate();
  static const int kPreMortgateFieldNumber = 17;
  double pre_mortgate() const;
  void set_pre_mortgate(double value);

  // double pre_credit = 18;
  void clear_pre_credit();
  static const int kPreCreditFieldNumber = 18;
  double pre_credit() const;
  void set_pre_credit(double value);

  // double interest_base = 19;
  void clear_interest_base();
  static const int kInterestBaseFieldNumber = 19;
  double interest_base() const;
  void set_interest_base(double value);

  // double withdraw_available = 20;
  void clear_withdraw_available();
  static const int kWithdrawAvailableFieldNumber = 20;
  double withdraw_available() const;
  void set_withdraw_available(double value);

  // double reserve = 21;
  void clear_reserve();
  static const int kReserveFieldNumber = 21;
  double reserve() const;
  void set_reserve(double value);

  // double credit = 23;
  void clear_credit();
  static const int kCreditFieldNumber = 23;
  double credit() const;
  void set_credit(double value);

  // double mortgate = 24;
  void clear_mortgate();
  static const int kMortgateFieldNumber = 24;
  double mortgate() const;
  void set_mortgate(double value);

  // double exchange_margin = 25;
  void clear_exchange_margin();
  static const int kExchangeMarginFieldNumber = 25;
  double exchange_margin() const;
  void set_exchange_margin(double value);

  // double delivery_margin = 26;
  void clear_delivery_margin();
  static const int kDeliveryMarginFieldNumber = 26;
  double delivery_margin() const;
  void set_delivery_margin(double value);

  // double exchange_delivery_margin = 27;
  void clear_exchange_delivery_margin();
  static const int kExchangeDeliveryMarginFieldNumber = 27;
  double exchange_delivery_margin() const;
  void set_exchange_delivery_margin(double value);

  // double reserve_balance = 28;
  void clear_reserve_balance();
  static const int kReserveBalanceFieldNumber = 28;
  double reserve_balance() const;
  void set_reserve_balance(double value);

  // double delivery_commission = 29;
  void clear_delivery_commission();
  static const int kDeliveryCommissionFieldNumber = 29;
  double delivery_commission() const;
  void set_delivery_commission(double value);

  // double frozen_transfer_fee = 30;
  void clear_frozen_transfer_fee();
  static const int kFrozenTransferFeeFieldNumber = 30;
  double frozen_transfer_fee() const;
  void set_frozen_transfer_fee(double value);

  // double frozen_stamp_tax = 31;
  void clear_frozen_stamp_tax();
  static const int kFrozenStampTaxFieldNumber = 31;
  double frozen_stamp_tax() const;
  void set_frozen_stamp_tax(double value);

  // double transfer_fee = 32;
  void clear_transfer_fee();
  static const int kTransferFeeFieldNumber = 32;
  double transfer_fee() const;
  void set_transfer_fee(double value);

  // double stamp_tax = 33;
  void clear_stamp_tax();
  static const int kStampTaxFieldNumber = 33;
  double stamp_tax() const;
  void set_stamp_tax(double value);

  // double mtm_profit = 34;
  void clear_mtm_profit();
  static const int kMtmProfitFieldNumber = 34;
  double mtm_profit() const;
  void set_mtm_profit(double value);

  // double pre_mtm_profit = 35;
  void clear_pre_mtm_profit();
  static const int kPreMtmProfitFieldNumber = 35;
  double pre_mtm_profit() const;
  void set_pre_mtm_profit(double value);

  // double stock_value = 36;
  void clear_stock_value();
  static const int kStockValueFieldNumber = 36;
  double stock_value() const;
  void set_stock_value(double value);

  // double bond_repurchase_amount = 37;
  void clear_bond_repurchase_amount();
  static const int kBondRepurchaseAmountFieldNumber = 37;
  double bond_repurchase_amount() const;
  void set_bond_repurchase_amount(double value);

  // double reverse_repurchase_amount = 38;
  void clear_reverse_repurchase_amount();
  static const int kReverseRepurchaseAmountFieldNumber = 38;
  double reverse_repurchase_amount() const;
  void set_reverse_repurchase_amount(double value);

  // double margin_trade_amount = 39;
  void clear_margin_trade_amount();
  static const int kMarginTradeAmountFieldNumber = 39;
  double margin_trade_amount() const;
  void set_margin_trade_amount(double value);

  // double short_sell_amount = 40;
  void clear_short_sell_amount();
  static const int kShortSellAmountFieldNumber = 40;
  double short_sell_amount() const;
  void set_short_sell_amount(double value);

  // double margin_trade_profit = 41;
  void clear_margin_trade_profit();
  static const int kMarginTradeProfitFieldNumber = 41;
  double margin_trade_profit() const;
  void set_margin_trade_profit(double value);

  // double short_sell_profit = 42;
  void clear_short_sell_profit();
  static const int kShortSellProfitFieldNumber = 42;
  double short_sell_profit() const;
  void set_short_sell_profit(double value);

  // double frozen_close_commission = 43;
  void clear_frozen_close_commission();
  static const int kFrozenCloseCommissionFieldNumber = 43;
  double frozen_close_commission() const;
  void set_frozen_close_commission(double value);

  // double common_balance = 44;
  void clear_common_balance();
  static const int kCommonBalanceFieldNumber = 44;
  double common_balance() const;
  void set_common_balance(double value);

  // double prefered_balance = 45;
  void clear_prefered_balance();
  static const int kPreferedBalanceFieldNumber = 45;
  double prefered_balance() const;
  void set_prefered_balance(double value);

  // double base_exchange_rate = 46;
  void clear_base_exchange_rate();
  static const int kBaseExchangeRateFieldNumber = 46;
  double base_exchange_rate() const;
  void set_base_exchange_rate(double value);

  // double warning_level = 47;
  void clear_warning_level();
  static const int kWarningLevelFieldNumber = 47;
  double warning_level() const;
  void set_warning_level(double value);

  // double force_close_level = 48;
  void clear_force_close_level();
  static const int kForceCloseLevelFieldNumber = 48;
  double force_close_level() const;
  void set_force_close_level(double value);

  // double cleared_closed_profit = 49;
  void clear_cleared_closed_profit();
  static const int kClearedClosedProfitFieldNumber = 49;
  double cleared_closed_profit() const;
  void set_cleared_closed_profit(double value);

  // double interest = 51;
  void clear_interest();
  static const int kInterestFieldNumber = 51;
  double interest() const;
  void set_interest(double value);

  // double frozen_interest = 52;
  void clear_frozen_interest();
  static const int kFrozenInterestFieldNumber = 52;
  double frozen_interest() const;
  void set_frozen_interest(double value);

  // int32 trading_day = 22;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 22;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.AccountMoneySummary)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  int currency_type_;
  double balance_;
  double commission_;
  double cur_margin_;
  double net_position_amount_;
  double pre_balance_;
  double interest_in_;
  double deposit_;
  double withdraw_;
  double frozen_margin_;
  double frozen_commission_;
  double available_;
  double close_profit_;
  double position_profit_;
  double pre_mortgate_;
  double pre_credit_;
  double interest_base_;
  double withdraw_available_;
  double reserve_;
  double credit_;
  double mortgate_;
  double exchange_margin_;
  double delivery_margin_;
  double exchange_delivery_margin_;
  double reserve_balance_;
  double delivery_commission_;
  double frozen_transfer_fee_;
  double frozen_stamp_tax_;
  double transfer_fee_;
  double stamp_tax_;
  double mtm_profit_;
  double pre_mtm_profit_;
  double stock_value_;
  double bond_repurchase_amount_;
  double reverse_repurchase_amount_;
  double margin_trade_amount_;
  double short_sell_amount_;
  double margin_trade_profit_;
  double short_sell_profit_;
  double frozen_close_commission_;
  double common_balance_;
  double prefered_balance_;
  double base_exchange_rate_;
  double warning_level_;
  double force_close_level_;
  double cleared_closed_profit_;
  double interest_;
  double frozen_interest_;
  ::google::protobuf::int32 trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class AccountMoneySummaryList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AccountMoneySummaryList) */ {
 public:
  AccountMoneySummaryList();
  virtual ~AccountMoneySummaryList();

  AccountMoneySummaryList(const AccountMoneySummaryList& from);

  inline AccountMoneySummaryList& operator=(const AccountMoneySummaryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountMoneySummaryList(AccountMoneySummaryList&& from) noexcept
    : AccountMoneySummaryList() {
    *this = ::std::move(from);
  }

  inline AccountMoneySummaryList& operator=(AccountMoneySummaryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AccountMoneySummaryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountMoneySummaryList* internal_default_instance() {
    return reinterpret_cast<const AccountMoneySummaryList*>(
               &_AccountMoneySummaryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AccountMoneySummaryList* other);
  friend void swap(AccountMoneySummaryList& a, AccountMoneySummaryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountMoneySummaryList* New() const final {
    return CreateMaybeMessage<AccountMoneySummaryList>(nullptr);
  }

  AccountMoneySummaryList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountMoneySummaryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountMoneySummaryList& from);
  void MergeFrom(const AccountMoneySummaryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountMoneySummaryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.AccountMoneySummary list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::AccountMoneySummary* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::AccountMoneySummary >*
      mutable_list();
  const ::pb::AccountMoneySummary& list(int index) const;
  ::pb::AccountMoneySummary* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::AccountMoneySummary >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.AccountMoneySummaryList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::AccountMoneySummary > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MoneyTransferRecord :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MoneyTransferRecord) */ {
 public:
  MoneyTransferRecord();
  virtual ~MoneyTransferRecord();

  MoneyTransferRecord(const MoneyTransferRecord& from);

  inline MoneyTransferRecord& operator=(const MoneyTransferRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoneyTransferRecord(MoneyTransferRecord&& from) noexcept
    : MoneyTransferRecord() {
    *this = ::std::move(from);
  }

  inline MoneyTransferRecord& operator=(MoneyTransferRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MoneyTransferRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoneyTransferRecord* internal_default_instance() {
    return reinterpret_cast<const MoneyTransferRecord*>(
               &_MoneyTransferRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(MoneyTransferRecord* other);
  friend void swap(MoneyTransferRecord& a, MoneyTransferRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoneyTransferRecord* New() const final {
    return CreateMaybeMessage<MoneyTransferRecord>(nullptr);
  }

  MoneyTransferRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoneyTransferRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoneyTransferRecord& from);
  void MergeFrom(const MoneyTransferRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoneyTransferRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account_id = 8;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 8;
  const ::std::string& account_id() const;
  void set_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_account_id(::std::string&& value);
  #endif
  void set_account_id(const char* value);
  void set_account_id(const char* value, size_t size);
  ::std::string* mutable_account_id();
  ::std::string* release_account_id();
  void set_allocated_account_id(::std::string* account_id);

  // string operator_id = 9;
  void clear_operator_id();
  static const int kOperatorIdFieldNumber = 9;
  const ::std::string& operator_id() const;
  void set_operator_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operator_id(::std::string&& value);
  #endif
  void set_operator_id(const char* value);
  void set_operator_id(const char* value, size_t size);
  ::std::string* mutable_operator_id();
  ::std::string* release_operator_id();
  void set_allocated_operator_id(::std::string* operator_id);

  // string comment = 12;
  void clear_comment();
  static const int kCommentFieldNumber = 12;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string bank_trade_id = 13;
  void clear_bank_trade_id();
  static const int kBankTradeIdFieldNumber = 13;
  const ::std::string& bank_trade_id() const;
  void set_bank_trade_id(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_trade_id(::std::string&& value);
  #endif
  void set_bank_trade_id(const char* value);
  void set_bank_trade_id(const char* value, size_t size);
  ::std::string* mutable_bank_trade_id();
  ::std::string* release_bank_trade_id();
  void set_allocated_bank_trade_id(::std::string* bank_trade_id);

  // string payment_path = 17;
  void clear_payment_path();
  static const int kPaymentPathFieldNumber = 17;
  const ::std::string& payment_path() const;
  void set_payment_path(const ::std::string& value);
  #if LANG_CXX11
  void set_payment_path(::std::string&& value);
  #endif
  void set_payment_path(const char* value);
  void set_payment_path(const char* value, size_t size);
  ::std::string* mutable_payment_path();
  ::std::string* release_payment_path();
  void set_allocated_payment_path(::std::string* payment_path);

  // string identity_number = 18;
  void clear_identity_number();
  static const int kIdentityNumberFieldNumber = 18;
  const ::std::string& identity_number() const;
  void set_identity_number(const ::std::string& value);
  #if LANG_CXX11
  void set_identity_number(::std::string&& value);
  #endif
  void set_identity_number(const char* value);
  void set_identity_number(const char* value, size_t size);
  ::std::string* mutable_identity_number();
  ::std::string* release_identity_number();
  void set_allocated_identity_number(::std::string* identity_number);

  // string phone_number = 19;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 19;
  const ::std::string& phone_number() const;
  void set_phone_number(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_number(::std::string&& value);
  #endif
  void set_phone_number(const char* value);
  void set_phone_number(const char* value, size_t size);
  ::std::string* mutable_phone_number();
  ::std::string* release_phone_number();
  void set_allocated_phone_number(::std::string* phone_number);

  // string bank_name = 20;
  void clear_bank_name();
  static const int kBankNameFieldNumber = 20;
  const ::std::string& bank_name() const;
  void set_bank_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_name(::std::string&& value);
  #endif
  void set_bank_name(const char* value);
  void set_bank_name(const char* value, size_t size);
  ::std::string* mutable_bank_name();
  ::std::string* release_bank_name();
  void set_allocated_bank_name(::std::string* bank_name);

  // string bank_branch_name = 21;
  void clear_bank_branch_name();
  static const int kBankBranchNameFieldNumber = 21;
  const ::std::string& bank_branch_name() const;
  void set_bank_branch_name(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_branch_name(::std::string&& value);
  #endif
  void set_bank_branch_name(const char* value);
  void set_bank_branch_name(const char* value, size_t size);
  ::std::string* mutable_bank_branch_name();
  ::std::string* release_bank_branch_name();
  void set_allocated_bank_branch_name(::std::string* bank_branch_name);

  // string bank_card_no = 22;
  void clear_bank_card_no();
  static const int kBankCardNoFieldNumber = 22;
  const ::std::string& bank_card_no() const;
  void set_bank_card_no(const ::std::string& value);
  #if LANG_CXX11
  void set_bank_card_no(::std::string&& value);
  #endif
  void set_bank_card_no(const char* value);
  void set_bank_card_no(const char* value, size_t size);
  ::std::string* mutable_bank_card_no();
  ::std::string* release_bank_card_no();
  void set_allocated_bank_card_no(::std::string* bank_card_no);

  // string province = 23;
  void clear_province();
  static const int kProvinceFieldNumber = 23;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string city = 24;
  void clear_city();
  static const int kCityFieldNumber = 24;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string pay_type = 25;
  void clear_pay_type();
  static const int kPayTypeFieldNumber = 25;
  const ::std::string& pay_type() const;
  void set_pay_type(const ::std::string& value);
  #if LANG_CXX11
  void set_pay_type(::std::string&& value);
  #endif
  void set_pay_type(const char* value);
  void set_pay_type(const char* value, size_t size);
  ::std::string* mutable_pay_type();
  ::std::string* release_pay_type();
  void set_allocated_pay_type(::std::string* pay_type);

  // string name = 28;
  void clear_name();
  static const int kNameFieldNumber = 28;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // int32 direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // int32 currency_type = 3;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 3;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // int32 settlement_group = 4;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 4;
  ::google::protobuf::int32 settlement_group() const;
  void set_settlement_group(::google::protobuf::int32 value);

  // int32 confirmed = 5;
  void clear_confirmed();
  static const int kConfirmedFieldNumber = 5;
  ::google::protobuf::int32 confirmed() const;
  void set_confirmed(::google::protobuf::int32 value);

  // double amount = 7;
  void clear_amount();
  static const int kAmountFieldNumber = 7;
  double amount() const;
  void set_amount(double value);

  // int32 is_prefered = 6;
  void clear_is_prefered();
  static const int kIsPreferedFieldNumber = 6;
  ::google::protobuf::int32 is_prefered() const;
  void set_is_prefered(::google::protobuf::int32 value);

  // int32 session_id = 10;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 10;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int64 time = 11;
  void clear_time();
  static const int kTimeFieldNumber = 11;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // int64 payment_config_id = 14;
  void clear_payment_config_id();
  static const int kPaymentConfigIdFieldNumber = 14;
  ::google::protobuf::int64 payment_config_id() const;
  void set_payment_config_id(::google::protobuf::int64 value);

  // double original_amount = 15;
  void clear_original_amount();
  static const int kOriginalAmountFieldNumber = 15;
  double original_amount() const;
  void set_original_amount(double value);

  // double fee = 16;
  void clear_fee();
  static const int kFeeFieldNumber = 16;
  double fee() const;
  void set_fee(double value);

  // int64 payed_time = 26;
  void clear_payed_time();
  static const int kPayedTimeFieldNumber = 26;
  ::google::protobuf::int64 payed_time() const;
  void set_payed_time(::google::protobuf::int64 value);

  // int64 confirmed_time = 27;
  void clear_confirmed_time();
  static const int kConfirmedTimeFieldNumber = 27;
  ::google::protobuf::int64 confirmed_time() const;
  void set_confirmed_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.MoneyTransferRecord)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_id_;
  ::google::protobuf::internal::ArenaStringPtr operator_id_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr bank_trade_id_;
  ::google::protobuf::internal::ArenaStringPtr payment_path_;
  ::google::protobuf::internal::ArenaStringPtr identity_number_;
  ::google::protobuf::internal::ArenaStringPtr phone_number_;
  ::google::protobuf::internal::ArenaStringPtr bank_name_;
  ::google::protobuf::internal::ArenaStringPtr bank_branch_name_;
  ::google::protobuf::internal::ArenaStringPtr bank_card_no_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr pay_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 direction_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 settlement_group_;
  ::google::protobuf::int32 confirmed_;
  double amount_;
  ::google::protobuf::int32 is_prefered_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 payment_config_id_;
  double original_amount_;
  double fee_;
  ::google::protobuf::int64 payed_time_;
  ::google::protobuf::int64 confirmed_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MTRList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.MTRList) */ {
 public:
  MTRList();
  virtual ~MTRList();

  MTRList(const MTRList& from);

  inline MTRList& operator=(const MTRList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MTRList(MTRList&& from) noexcept
    : MTRList() {
    *this = ::std::move(from);
  }

  inline MTRList& operator=(MTRList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MTRList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MTRList* internal_default_instance() {
    return reinterpret_cast<const MTRList*>(
               &_MTRList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(MTRList* other);
  friend void swap(MTRList& a, MTRList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MTRList* New() const final {
    return CreateMaybeMessage<MTRList>(nullptr);
  }

  MTRList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MTRList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MTRList& from);
  void MergeFrom(const MTRList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MTRList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.MoneyTransferRecord list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::MoneyTransferRecord* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::MoneyTransferRecord >*
      mutable_list();
  const ::pb::MoneyTransferRecord& list(int index) const;
  ::pb::MoneyTransferRecord* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::MoneyTransferRecord >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.MTRList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::MoneyTransferRecord > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SSEStockOption :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.SSEStockOption) */ {
 public:
  SSEStockOption();
  virtual ~SSEStockOption();

  SSEStockOption(const SSEStockOption& from);

  inline SSEStockOption& operator=(const SSEStockOption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SSEStockOption(SSEStockOption&& from) noexcept
    : SSEStockOption() {
    *this = ::std::move(from);
  }

  inline SSEStockOption& operator=(SSEStockOption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SSEStockOption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSEStockOption* internal_default_instance() {
    return reinterpret_cast<const SSEStockOption*>(
               &_SSEStockOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SSEStockOption* other);
  friend void swap(SSEStockOption& a, SSEStockOption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SSEStockOption* New() const final {
    return CreateMaybeMessage<SSEStockOption>(nullptr);
  }

  SSEStockOption* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SSEStockOption>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SSEStockOption& from);
  void MergeFrom(const SSEStockOption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSEStockOption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exercise_price = 1;
  void clear_exercise_price();
  static const int kExercisePriceFieldNumber = 1;
  const ::std::string& exercise_price() const;
  void set_exercise_price(const ::std::string& value);
  #if LANG_CXX11
  void set_exercise_price(::std::string&& value);
  #endif
  void set_exercise_price(const char* value);
  void set_exercise_price(const char* value, size_t size);
  ::std::string* mutable_exercise_price();
  ::std::string* release_exercise_price();
  void set_allocated_exercise_price(::std::string* exercise_price);

  // string update_version = 2;
  void clear_update_version();
  static const int kUpdateVersionFieldNumber = 2;
  const ::std::string& update_version() const;
  void set_update_version(const ::std::string& value);
  #if LANG_CXX11
  void set_update_version(::std::string&& value);
  #endif
  void set_update_version(const char* value);
  void set_update_version(const char* value, size_t size);
  ::std::string* mutable_update_version();
  ::std::string* release_update_version();
  void set_allocated_update_version(::std::string* update_version);

  // string option_type = 3;
  void clear_option_type();
  static const int kOptionTypeFieldNumber = 3;
  const ::std::string& option_type() const;
  void set_option_type(const ::std::string& value);
  #if LANG_CXX11
  void set_option_type(::std::string&& value);
  #endif
  void set_option_type(const char* value);
  void set_option_type(const char* value, size_t size);
  ::std::string* mutable_option_type();
  ::std::string* release_option_type();
  void set_allocated_option_type(::std::string* option_type);

  // string daily_price_up_limit = 4;
  void clear_daily_price_up_limit();
  static const int kDailyPriceUpLimitFieldNumber = 4;
  const ::std::string& daily_price_up_limit() const;
  void set_daily_price_up_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_daily_price_up_limit(::std::string&& value);
  #endif
  void set_daily_price_up_limit(const char* value);
  void set_daily_price_up_limit(const char* value, size_t size);
  ::std::string* mutable_daily_price_up_limit();
  ::std::string* release_daily_price_up_limit();
  void set_allocated_daily_price_up_limit(::std::string* daily_price_up_limit);

  // string time_save = 5;
  void clear_time_save();
  static const int kTimeSaveFieldNumber = 5;
  const ::std::string& time_save() const;
  void set_time_save(const ::std::string& value);
  #if LANG_CXX11
  void set_time_save(::std::string&& value);
  #endif
  void set_time_save(const char* value);
  void set_time_save(const char* value, size_t size);
  ::std::string* mutable_time_save();
  ::std::string* release_time_save();
  void set_allocated_time_save(::std::string* time_save);

  // string DELIST_Flag = 6;
  void clear_delist_flag();
  static const int kDELISTFlagFieldNumber = 6;
  const ::std::string& delist_flag() const;
  void set_delist_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_delist_flag(::std::string&& value);
  #endif
  void set_delist_flag(const char* value);
  void set_delist_flag(const char* value, size_t size);
  ::std::string* mutable_delist_flag();
  ::std::string* release_delist_flag();
  void set_allocated_delist_flag(::std::string* delist_flag);

  // string start_date = 7;
  void clear_start_date();
  static const int kStartDateFieldNumber = 7;
  const ::std::string& start_date() const;
  void set_start_date(const ::std::string& value);
  #if LANG_CXX11
  void set_start_date(::std::string&& value);
  #endif
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  ::std::string* mutable_start_date();
  ::std::string* release_start_date();
  void set_allocated_start_date(::std::string* start_date);

  // string expire_date = 8;
  void clear_expire_date();
  static const int kExpireDateFieldNumber = 8;
  const ::std::string& expire_date() const;
  void set_expire_date(const ::std::string& value);
  #if LANG_CXX11
  void set_expire_date(::std::string&& value);
  #endif
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  ::std::string* mutable_expire_date();
  ::std::string* release_expire_date();
  void set_allocated_expire_date(::std::string* expire_date);

  // string contract_unit = 9;
  void clear_contract_unit();
  static const int kContractUnitFieldNumber = 9;
  const ::std::string& contract_unit() const;
  void set_contract_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_unit(::std::string&& value);
  #endif
  void set_contract_unit(const char* value);
  void set_contract_unit(const char* value, size_t size);
  ::std::string* mutable_contract_unit();
  ::std::string* release_contract_unit();
  void set_allocated_contract_unit(::std::string* contract_unit);

  // string call_or_put = 10;
  void clear_call_or_put();
  static const int kCallOrPutFieldNumber = 10;
  const ::std::string& call_or_put() const;
  void set_call_or_put(const ::std::string& value);
  #if LANG_CXX11
  void set_call_or_put(::std::string&& value);
  #endif
  void set_call_or_put(const char* value);
  void set_call_or_put(const char* value, size_t size);
  ::std::string* mutable_call_or_put();
  ::std::string* release_call_or_put();
  void set_allocated_call_or_put(::std::string* call_or_put);

  // string lmt_ord_max_floor = 11;
  void clear_lmt_ord_max_floor();
  static const int kLmtOrdMaxFloorFieldNumber = 11;
  const ::std::string& lmt_ord_max_floor() const;
  void set_lmt_ord_max_floor(const ::std::string& value);
  #if LANG_CXX11
  void set_lmt_ord_max_floor(::std::string&& value);
  #endif
  void set_lmt_ord_max_floor(const char* value);
  void set_lmt_ord_max_floor(const char* value, size_t size);
  ::std::string* mutable_lmt_ord_max_floor();
  ::std::string* release_lmt_ord_max_floor();
  void set_allocated_lmt_ord_max_floor(::std::string* lmt_ord_max_floor);

  // string delivery_date = 12;
  void clear_delivery_date();
  static const int kDeliveryDateFieldNumber = 12;
  const ::std::string& delivery_date() const;
  void set_delivery_date(const ::std::string& value);
  #if LANG_CXX11
  void set_delivery_date(::std::string&& value);
  #endif
  void set_delivery_date(const char* value);
  void set_delivery_date(const char* value, size_t size);
  ::std::string* mutable_delivery_date();
  ::std::string* release_delivery_date();
  void set_allocated_delivery_date(::std::string* delivery_date);

  // string change_flag = 13;
  void clear_change_flag();
  static const int kChangeFlagFieldNumber = 13;
  const ::std::string& change_flag() const;
  void set_change_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_change_flag(::std::string&& value);
  #endif
  void set_change_flag(const char* value);
  void set_change_flag(const char* value, size_t size);
  ::std::string* mutable_change_flag();
  ::std::string* release_change_flag();
  void set_allocated_change_flag(::std::string* change_flag);

  // string mkt_ord_max_floor = 14;
  void clear_mkt_ord_max_floor();
  static const int kMktOrdMaxFloorFieldNumber = 14;
  const ::std::string& mkt_ord_max_floor() const;
  void set_mkt_ord_max_floor(const ::std::string& value);
  #if LANG_CXX11
  void set_mkt_ord_max_floor(::std::string&& value);
  #endif
  void set_mkt_ord_max_floor(const char* value);
  void set_mkt_ord_max_floor(const char* value, size_t size);
  ::std::string* mutable_mkt_ord_max_floor();
  ::std::string* release_mkt_ord_max_floor();
  void set_allocated_mkt_ord_max_floor(::std::string* mkt_ord_max_floor);

  // string underlying_type = 15;
  void clear_underlying_type();
  static const int kUnderlyingTypeFieldNumber = 15;
  const ::std::string& underlying_type() const;
  void set_underlying_type(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_type(::std::string&& value);
  #endif
  void set_underlying_type(const char* value);
  void set_underlying_type(const char* value, size_t size);
  ::std::string* mutable_underlying_type();
  ::std::string* release_underlying_type();
  void set_allocated_underlying_type(::std::string* underlying_type);

  // string daily_price_down_limit = 16;
  void clear_daily_price_down_limit();
  static const int kDailyPriceDownLimitFieldNumber = 16;
  const ::std::string& daily_price_down_limit() const;
  void set_daily_price_down_limit(const ::std::string& value);
  #if LANG_CXX11
  void set_daily_price_down_limit(::std::string&& value);
  #endif
  void set_daily_price_down_limit(const char* value);
  void set_daily_price_down_limit(const char* value, size_t size);
  ::std::string* mutable_daily_price_down_limit();
  ::std::string* release_daily_price_down_limit();
  void set_allocated_daily_price_down_limit(::std::string* daily_price_down_limit);

  // string round_lot = 17;
  void clear_round_lot();
  static const int kRoundLotFieldNumber = 17;
  const ::std::string& round_lot() const;
  void set_round_lot(const ::std::string& value);
  #if LANG_CXX11
  void set_round_lot(::std::string&& value);
  #endif
  void set_round_lot(const char* value);
  void set_round_lot(const char* value, size_t size);
  ::std::string* mutable_round_lot();
  ::std::string* release_round_lot();
  void set_allocated_round_lot(::std::string* round_lot);

  // string security_closePX = 18;
  void clear_security_closepx();
  static const int kSecurityClosePXFieldNumber = 18;
  const ::std::string& security_closepx() const;
  void set_security_closepx(const ::std::string& value);
  #if LANG_CXX11
  void set_security_closepx(::std::string&& value);
  #endif
  void set_security_closepx(const char* value);
  void set_security_closepx(const char* value, size_t size);
  ::std::string* mutable_security_closepx();
  ::std::string* release_security_closepx();
  void set_allocated_security_closepx(::std::string* security_closepx);

  // string settl_price = 19;
  void clear_settl_price();
  static const int kSettlPriceFieldNumber = 19;
  const ::std::string& settl_price() const;
  void set_settl_price(const ::std::string& value);
  #if LANG_CXX11
  void set_settl_price(::std::string&& value);
  #endif
  void set_settl_price(const char* value);
  void set_settl_price(const char* value, size_t size);
  ::std::string* mutable_settl_price();
  ::std::string* release_settl_price();
  void set_allocated_settl_price(::std::string* settl_price);

  // string contract_symbol = 20;
  void clear_contract_symbol();
  static const int kContractSymbolFieldNumber = 20;
  const ::std::string& contract_symbol() const;
  void set_contract_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_symbol(::std::string&& value);
  #endif
  void set_contract_symbol(const char* value);
  void set_contract_symbol(const char* value, size_t size);
  ::std::string* mutable_contract_symbol();
  ::std::string* release_contract_symbol();
  void set_allocated_contract_symbol(::std::string* contract_symbol);

  // string num = 21;
  void clear_num();
  static const int kNumFieldNumber = 21;
  const ::std::string& num() const;
  void set_num(const ::std::string& value);
  #if LANG_CXX11
  void set_num(::std::string&& value);
  #endif
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  ::std::string* mutable_num();
  ::std::string* release_num();
  void set_allocated_num(::std::string* num);

  // string contractID = 22;
  void clear_contractid();
  static const int kContractIDFieldNumber = 22;
  const ::std::string& contractid() const;
  void set_contractid(const ::std::string& value);
  #if LANG_CXX11
  void set_contractid(::std::string&& value);
  #endif
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  ::std::string* mutable_contractid();
  ::std::string* release_contractid();
  void set_allocated_contractid(::std::string* contractid);

  // string margin_ratio_param1 = 23;
  void clear_margin_ratio_param1();
  static const int kMarginRatioParam1FieldNumber = 23;
  const ::std::string& margin_ratio_param1() const;
  void set_margin_ratio_param1(const ::std::string& value);
  #if LANG_CXX11
  void set_margin_ratio_param1(::std::string&& value);
  #endif
  void set_margin_ratio_param1(const char* value);
  void set_margin_ratio_param1(const char* value, size_t size);
  ::std::string* mutable_margin_ratio_param1();
  ::std::string* release_margin_ratio_param1();
  void set_allocated_margin_ratio_param1(::std::string* margin_ratio_param1);

  // string margin_ratio_param2 = 24;
  void clear_margin_ratio_param2();
  static const int kMarginRatioParam2FieldNumber = 24;
  const ::std::string& margin_ratio_param2() const;
  void set_margin_ratio_param2(const ::std::string& value);
  #if LANG_CXX11
  void set_margin_ratio_param2(::std::string&& value);
  #endif
  void set_margin_ratio_param2(const char* value);
  void set_margin_ratio_param2(const char* value, size_t size);
  ::std::string* mutable_margin_ratio_param2();
  ::std::string* release_margin_ratio_param2();
  void set_allocated_margin_ratio_param2(::std::string* margin_ratio_param2);

  // string lmt_ord_min_floor = 25;
  void clear_lmt_ord_min_floor();
  static const int kLmtOrdMinFloorFieldNumber = 25;
  const ::std::string& lmt_ord_min_floor() const;
  void set_lmt_ord_min_floor(const ::std::string& value);
  #if LANG_CXX11
  void set_lmt_ord_min_floor(::std::string&& value);
  #endif
  void set_lmt_ord_min_floor(const char* value);
  void set_lmt_ord_min_floor(const char* value, size_t size);
  ::std::string* mutable_lmt_ord_min_floor();
  ::std::string* release_lmt_ord_min_floor();
  void set_allocated_lmt_ord_min_floor(::std::string* lmt_ord_min_floor);

  // string mkt_ord_min_floor = 26;
  void clear_mkt_ord_min_floor();
  static const int kMktOrdMinFloorFieldNumber = 26;
  const ::std::string& mkt_ord_min_floor() const;
  void set_mkt_ord_min_floor(const ::std::string& value);
  #if LANG_CXX11
  void set_mkt_ord_min_floor(::std::string&& value);
  #endif
  void set_mkt_ord_min_floor(const char* value);
  void set_mkt_ord_min_floor(const char* value, size_t size);
  ::std::string* mutable_mkt_ord_min_floor();
  ::std::string* release_mkt_ord_min_floor();
  void set_allocated_mkt_ord_min_floor(::std::string* mkt_ord_min_floor);

  // string end_date = 27;
  void clear_end_date();
  static const int kEndDateFieldNumber = 27;
  const ::std::string& end_date() const;
  void set_end_date(const ::std::string& value);
  #if LANG_CXX11
  void set_end_date(::std::string&& value);
  #endif
  void set_end_date(const char* value);
  void set_end_date(const char* value, size_t size);
  ::std::string* mutable_end_date();
  ::std::string* release_end_date();
  void set_allocated_end_date(::std::string* end_date);

  // string price_limit_type = 28;
  void clear_price_limit_type();
  static const int kPriceLimitTypeFieldNumber = 28;
  const ::std::string& price_limit_type() const;
  void set_price_limit_type(const ::std::string& value);
  #if LANG_CXX11
  void set_price_limit_type(::std::string&& value);
  #endif
  void set_price_limit_type(const char* value);
  void set_price_limit_type(const char* value, size_t size);
  ::std::string* mutable_price_limit_type();
  ::std::string* release_price_limit_type();
  void set_allocated_price_limit_type(::std::string* price_limit_type);

  // string exercise_date = 29;
  void clear_exercise_date();
  static const int kExerciseDateFieldNumber = 29;
  const ::std::string& exercise_date() const;
  void set_exercise_date(const ::std::string& value);
  #if LANG_CXX11
  void set_exercise_date(::std::string&& value);
  #endif
  void set_exercise_date(const char* value);
  void set_exercise_date(const char* value, size_t size);
  ::std::string* mutable_exercise_date();
  ::std::string* release_exercise_date();
  void set_allocated_exercise_date(::std::string* exercise_date);

  // string margin_unit = 30;
  void clear_margin_unit();
  static const int kMarginUnitFieldNumber = 30;
  const ::std::string& margin_unit() const;
  void set_margin_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_margin_unit(::std::string&& value);
  #endif
  void set_margin_unit(const char* value);
  void set_margin_unit(const char* value, size_t size);
  ::std::string* mutable_margin_unit();
  ::std::string* release_margin_unit();
  void set_allocated_margin_unit(::std::string* margin_unit);

  // string securityID = 31;
  void clear_securityid();
  static const int kSecurityIDFieldNumber = 31;
  const ::std::string& securityid() const;
  void set_securityid(const ::std::string& value);
  #if LANG_CXX11
  void set_securityid(::std::string&& value);
  #endif
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  ::std::string* mutable_securityid();
  ::std::string* release_securityid();
  void set_allocated_securityid(::std::string* securityid);

  // string security_name_byID = 32;
  void clear_security_name_byid();
  static const int kSecurityNameByIDFieldNumber = 32;
  const ::std::string& security_name_byid() const;
  void set_security_name_byid(const ::std::string& value);
  #if LANG_CXX11
  void set_security_name_byid(::std::string&& value);
  #endif
  void set_security_name_byid(const char* value);
  void set_security_name_byid(const char* value, size_t size);
  ::std::string* mutable_security_name_byid();
  ::std::string* release_security_name_byid();
  void set_allocated_security_name_byid(::std::string* security_name_byid);

  // string contract_flag = 33;
  void clear_contract_flag();
  static const int kContractFlagFieldNumber = 33;
  const ::std::string& contract_flag() const;
  void set_contract_flag(const ::std::string& value);
  #if LANG_CXX11
  void set_contract_flag(::std::string&& value);
  #endif
  void set_contract_flag(const char* value);
  void set_contract_flag(const char* value, size_t size);
  ::std::string* mutable_contract_flag();
  ::std::string* release_contract_flag();
  void set_allocated_contract_flag(::std::string* contract_flag);

  // string underlying_closePX = 34;
  void clear_underlying_closepx();
  static const int kUnderlyingClosePXFieldNumber = 34;
  const ::std::string& underlying_closepx() const;
  void set_underlying_closepx(const ::std::string& value);
  #if LANG_CXX11
  void set_underlying_closepx(::std::string&& value);
  #endif
  void set_underlying_closepx(const char* value);
  void set_underlying_closepx(const char* value, size_t size);
  ::std::string* mutable_underlying_closepx();
  ::std::string* release_underlying_closepx();
  void set_allocated_underlying_closepx(::std::string* underlying_closepx);

  // @@protoc_insertion_point(class_scope:pb.SSEStockOption)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exercise_price_;
  ::google::protobuf::internal::ArenaStringPtr update_version_;
  ::google::protobuf::internal::ArenaStringPtr option_type_;
  ::google::protobuf::internal::ArenaStringPtr daily_price_up_limit_;
  ::google::protobuf::internal::ArenaStringPtr time_save_;
  ::google::protobuf::internal::ArenaStringPtr delist_flag_;
  ::google::protobuf::internal::ArenaStringPtr start_date_;
  ::google::protobuf::internal::ArenaStringPtr expire_date_;
  ::google::protobuf::internal::ArenaStringPtr contract_unit_;
  ::google::protobuf::internal::ArenaStringPtr call_or_put_;
  ::google::protobuf::internal::ArenaStringPtr lmt_ord_max_floor_;
  ::google::protobuf::internal::ArenaStringPtr delivery_date_;
  ::google::protobuf::internal::ArenaStringPtr change_flag_;
  ::google::protobuf::internal::ArenaStringPtr mkt_ord_max_floor_;
  ::google::protobuf::internal::ArenaStringPtr underlying_type_;
  ::google::protobuf::internal::ArenaStringPtr daily_price_down_limit_;
  ::google::protobuf::internal::ArenaStringPtr round_lot_;
  ::google::protobuf::internal::ArenaStringPtr security_closepx_;
  ::google::protobuf::internal::ArenaStringPtr settl_price_;
  ::google::protobuf::internal::ArenaStringPtr contract_symbol_;
  ::google::protobuf::internal::ArenaStringPtr num_;
  ::google::protobuf::internal::ArenaStringPtr contractid_;
  ::google::protobuf::internal::ArenaStringPtr margin_ratio_param1_;
  ::google::protobuf::internal::ArenaStringPtr margin_ratio_param2_;
  ::google::protobuf::internal::ArenaStringPtr lmt_ord_min_floor_;
  ::google::protobuf::internal::ArenaStringPtr mkt_ord_min_floor_;
  ::google::protobuf::internal::ArenaStringPtr end_date_;
  ::google::protobuf::internal::ArenaStringPtr price_limit_type_;
  ::google::protobuf::internal::ArenaStringPtr exercise_date_;
  ::google::protobuf::internal::ArenaStringPtr margin_unit_;
  ::google::protobuf::internal::ArenaStringPtr securityid_;
  ::google::protobuf::internal::ArenaStringPtr security_name_byid_;
  ::google::protobuf::internal::ArenaStringPtr contract_flag_;
  ::google::protobuf::internal::ArenaStringPtr underlying_closepx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OptionMonth :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OptionMonth) */ {
 public:
  OptionMonth();
  virtual ~OptionMonth();

  OptionMonth(const OptionMonth& from);

  inline OptionMonth& operator=(const OptionMonth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionMonth(OptionMonth&& from) noexcept
    : OptionMonth() {
    *this = ::std::move(from);
  }

  inline OptionMonth& operator=(OptionMonth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OptionMonth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionMonth* internal_default_instance() {
    return reinterpret_cast<const OptionMonth*>(
               &_OptionMonth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(OptionMonth* other);
  friend void swap(OptionMonth& a, OptionMonth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionMonth* New() const final {
    return CreateMaybeMessage<OptionMonth>(nullptr);
  }

  OptionMonth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionMonth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionMonth& from);
  void MergeFrom(const OptionMonth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionMonth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // string short = 3;
  void clear_short_();
  static const int kShortFieldNumber = 3;
  const ::std::string& short_() const;
  void set_short_(const ::std::string& value);
  #if LANG_CXX11
  void set_short_(::std::string&& value);
  #endif
  void set_short_(const char* value);
  void set_short_(const char* value, size_t size);
  ::std::string* mutable_short_();
  ::std::string* release_short_();
  void set_allocated_short_(::std::string* short_);

  // @@protoc_insertion_point(class_scope:pb.OptionMonth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr short__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class OptionMonthList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OptionMonthList) */ {
 public:
  OptionMonthList();
  virtual ~OptionMonthList();

  OptionMonthList(const OptionMonthList& from);

  inline OptionMonthList& operator=(const OptionMonthList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptionMonthList(OptionMonthList&& from) noexcept
    : OptionMonthList() {
    *this = ::std::move(from);
  }

  inline OptionMonthList& operator=(OptionMonthList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OptionMonthList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptionMonthList* internal_default_instance() {
    return reinterpret_cast<const OptionMonthList*>(
               &_OptionMonthList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(OptionMonthList* other);
  friend void swap(OptionMonthList& a, OptionMonthList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptionMonthList* New() const final {
    return CreateMaybeMessage<OptionMonthList>(nullptr);
  }

  OptionMonthList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OptionMonthList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OptionMonthList& from);
  void MergeFrom(const OptionMonthList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionMonthList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OptionMonth list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::OptionMonth* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OptionMonth >*
      mutable_list();
  const ::pb::OptionMonth& list(int index) const;
  ::pb::OptionMonth* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::OptionMonth >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.OptionMonthList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OptionMonth > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Symbol

// .pb.ExchangeType exchange = 1;
inline void Symbol::clear_exchange() {
  exchange_ = 0;
}
inline ::pb::ExchangeType Symbol::exchange() const {
  // @@protoc_insertion_point(field_get:pb.Symbol.exchange)
  return static_cast< ::pb::ExchangeType >(exchange_);
}
inline void Symbol::set_exchange(::pb::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.Symbol.exchange)
}

// string code = 2;
inline void Symbol::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Symbol::code() const {
  // @@protoc_insertion_point(field_get:pb.Symbol.code)
  return code_.GetNoArena();
}
inline void Symbol::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Symbol.code)
}
#if LANG_CXX11
inline void Symbol::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Symbol.code)
}
#endif
inline void Symbol::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Symbol.code)
}
inline void Symbol::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Symbol.code)
}
inline ::std::string* Symbol::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.Symbol.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Symbol::release_code() {
  // @@protoc_insertion_point(field_release:pb.Symbol.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Symbol::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pb.Symbol.code)
}

// -------------------------------------------------------------------

// SymbolList

// repeated .pb.Symbol list = 1;
inline int SymbolList::list_size() const {
  return list_.size();
}
inline void SymbolList::clear_list() {
  list_.Clear();
}
inline ::pb::Symbol* SymbolList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SymbolList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Symbol >*
SymbolList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.SymbolList.list)
  return &list_;
}
inline const ::pb::Symbol& SymbolList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.SymbolList.list)
  return list_.Get(index);
}
inline ::pb::Symbol* SymbolList::add_list() {
  // @@protoc_insertion_point(field_add:pb.SymbolList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Symbol >&
SymbolList::list() const {
  // @@protoc_insertion_point(field_list:pb.SymbolList.list)
  return list_;
}

// -------------------------------------------------------------------

// ProductID

// .pb.ExchangeType exchange = 1;
inline void ProductID::clear_exchange() {
  exchange_ = 0;
}
inline ::pb::ExchangeType ProductID::exchange() const {
  // @@protoc_insertion_point(field_get:pb.ProductID.exchange)
  return static_cast< ::pb::ExchangeType >(exchange_);
}
inline void ProductID::set_exchange(::pb::ExchangeType value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductID.exchange)
}

// string code = 2;
inline void ProductID::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductID::code() const {
  // @@protoc_insertion_point(field_get:pb.ProductID.code)
  return code_.GetNoArena();
}
inline void ProductID::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ProductID.code)
}
#if LANG_CXX11
inline void ProductID::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ProductID.code)
}
#endif
inline void ProductID::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ProductID.code)
}
inline void ProductID::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ProductID.code)
}
inline ::std::string* ProductID::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.ProductID.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductID::release_code() {
  // @@protoc_insertion_point(field_release:pb.ProductID.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductID::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:pb.ProductID.code)
}

// -------------------------------------------------------------------

// BrokerRoute

// string id = 1;
inline void BrokerRoute::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrokerRoute::id() const {
  // @@protoc_insertion_point(field_get:pb.BrokerRoute.id)
  return id_.GetNoArena();
}
inline void BrokerRoute::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.id)
}
#if LANG_CXX11
inline void BrokerRoute::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BrokerRoute.id)
}
#endif
inline void BrokerRoute::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BrokerRoute.id)
}
inline void BrokerRoute::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BrokerRoute.id)
}
inline ::std::string* BrokerRoute::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.BrokerRoute.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerRoute::release_id() {
  // @@protoc_insertion_point(field_release:pb.BrokerRoute.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerRoute::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.BrokerRoute.id)
}

// int32 type = 2;
inline void BrokerRoute::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 BrokerRoute::type() const {
  // @@protoc_insertion_point(field_get:pb.BrokerRoute.type)
  return type_;
}
inline void BrokerRoute::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.type)
}

// string name = 3;
inline void BrokerRoute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrokerRoute::name() const {
  // @@protoc_insertion_point(field_get:pb.BrokerRoute.name)
  return name_.GetNoArena();
}
inline void BrokerRoute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.name)
}
#if LANG_CXX11
inline void BrokerRoute::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.BrokerRoute.name)
}
#endif
inline void BrokerRoute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.BrokerRoute.name)
}
inline void BrokerRoute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.BrokerRoute.name)
}
inline ::std::string* BrokerRoute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.BrokerRoute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrokerRoute::release_name() {
  // @@protoc_insertion_point(field_release:pb.BrokerRoute.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrokerRoute::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.BrokerRoute.name)
}

// repeated string md_front_list = 4;
inline int BrokerRoute::md_front_list_size() const {
  return md_front_list_.size();
}
inline void BrokerRoute::clear_md_front_list() {
  md_front_list_.Clear();
}
inline const ::std::string& BrokerRoute::md_front_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.BrokerRoute.md_front_list)
  return md_front_list_.Get(index);
}
inline ::std::string* BrokerRoute::mutable_md_front_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BrokerRoute.md_front_list)
  return md_front_list_.Mutable(index);
}
inline void BrokerRoute::set_md_front_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.md_front_list)
  md_front_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BrokerRoute::set_md_front_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.md_front_list)
  md_front_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BrokerRoute::set_md_front_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  md_front_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BrokerRoute.md_front_list)
}
inline void BrokerRoute::set_md_front_list(int index, const char* value, size_t size) {
  md_front_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BrokerRoute.md_front_list)
}
inline ::std::string* BrokerRoute::add_md_front_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.BrokerRoute.md_front_list)
  return md_front_list_.Add();
}
inline void BrokerRoute::add_md_front_list(const ::std::string& value) {
  md_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BrokerRoute.md_front_list)
}
#if LANG_CXX11
inline void BrokerRoute::add_md_front_list(::std::string&& value) {
  md_front_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.BrokerRoute.md_front_list)
}
#endif
inline void BrokerRoute::add_md_front_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  md_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BrokerRoute.md_front_list)
}
inline void BrokerRoute::add_md_front_list(const char* value, size_t size) {
  md_front_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BrokerRoute.md_front_list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BrokerRoute::md_front_list() const {
  // @@protoc_insertion_point(field_list:pb.BrokerRoute.md_front_list)
  return md_front_list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BrokerRoute::mutable_md_front_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.BrokerRoute.md_front_list)
  return &md_front_list_;
}

// repeated string trade_front_list = 5;
inline int BrokerRoute::trade_front_list_size() const {
  return trade_front_list_.size();
}
inline void BrokerRoute::clear_trade_front_list() {
  trade_front_list_.Clear();
}
inline const ::std::string& BrokerRoute::trade_front_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.BrokerRoute.trade_front_list)
  return trade_front_list_.Get(index);
}
inline ::std::string* BrokerRoute::mutable_trade_front_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BrokerRoute.trade_front_list)
  return trade_front_list_.Mutable(index);
}
inline void BrokerRoute::set_trade_front_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.trade_front_list)
  trade_front_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BrokerRoute::set_trade_front_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.BrokerRoute.trade_front_list)
  trade_front_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BrokerRoute::set_trade_front_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trade_front_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BrokerRoute.trade_front_list)
}
inline void BrokerRoute::set_trade_front_list(int index, const char* value, size_t size) {
  trade_front_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BrokerRoute.trade_front_list)
}
inline ::std::string* BrokerRoute::add_trade_front_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.BrokerRoute.trade_front_list)
  return trade_front_list_.Add();
}
inline void BrokerRoute::add_trade_front_list(const ::std::string& value) {
  trade_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BrokerRoute.trade_front_list)
}
#if LANG_CXX11
inline void BrokerRoute::add_trade_front_list(::std::string&& value) {
  trade_front_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.BrokerRoute.trade_front_list)
}
#endif
inline void BrokerRoute::add_trade_front_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trade_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BrokerRoute.trade_front_list)
}
inline void BrokerRoute::add_trade_front_list(const char* value, size_t size) {
  trade_front_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BrokerRoute.trade_front_list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
BrokerRoute::trade_front_list() const {
  // @@protoc_insertion_point(field_list:pb.BrokerRoute.trade_front_list)
  return trade_front_list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
BrokerRoute::mutable_trade_front_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.BrokerRoute.trade_front_list)
  return &trade_front_list_;
}

// -------------------------------------------------------------------

// BrokerRouteList

// repeated .pb.BrokerRoute list = 1;
inline int BrokerRouteList::list_size() const {
  return list_.size();
}
inline void BrokerRouteList::clear_list() {
  list_.Clear();
}
inline ::pb::BrokerRoute* BrokerRouteList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BrokerRouteList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BrokerRoute >*
BrokerRouteList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.BrokerRouteList.list)
  return &list_;
}
inline const ::pb::BrokerRoute& BrokerRouteList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.BrokerRouteList.list)
  return list_.Get(index);
}
inline ::pb::BrokerRoute* BrokerRouteList::add_list() {
  // @@protoc_insertion_point(field_add:pb.BrokerRouteList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BrokerRoute >&
BrokerRouteList::list() const {
  // @@protoc_insertion_point(field_list:pb.BrokerRouteList.list)
  return list_;
}

// -------------------------------------------------------------------

// InstrumentInfo

// string symbol_name = 1;
inline void InstrumentInfo::clear_symbol_name() {
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentInfo::symbol_name() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.symbol_name)
  return symbol_name_.GetNoArena();
}
inline void InstrumentInfo::set_symbol_name(const ::std::string& value) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.symbol_name)
}
#if LANG_CXX11
inline void InstrumentInfo::set_symbol_name(::std::string&& value) {
  
  symbol_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.InstrumentInfo.symbol_name)
}
#endif
inline void InstrumentInfo::set_symbol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.InstrumentInfo.symbol_name)
}
inline void InstrumentInfo::set_symbol_name(const char* value, size_t size) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.InstrumentInfo.symbol_name)
}
inline ::std::string* InstrumentInfo::mutable_symbol_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.InstrumentInfo.symbol_name)
  return symbol_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentInfo::release_symbol_name() {
  // @@protoc_insertion_point(field_release:pb.InstrumentInfo.symbol_name)
  
  return symbol_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentInfo::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  symbol_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol_name);
  // @@protoc_insertion_point(field_set_allocated:pb.InstrumentInfo.symbol_name)
}

// int32 position_rank = 2;
inline void InstrumentInfo::clear_position_rank() {
  position_rank_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::position_rank() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.position_rank)
  return position_rank_;
}
inline void InstrumentInfo::set_position_rank(::google::protobuf::int32 value) {
  
  position_rank_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.position_rank)
}

// int64 update_time = 3;
inline void InstrumentInfo::clear_update_time() {
  update_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 InstrumentInfo::update_time() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.update_time)
  return update_time_;
}
inline void InstrumentInfo::set_update_time(::google::protobuf::int64 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.update_time)
}

// int32 update_trading_day = 4;
inline void InstrumentInfo::clear_update_trading_day() {
  update_trading_day_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::update_trading_day() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.update_trading_day)
  return update_trading_day_;
}
inline void InstrumentInfo::set_update_trading_day(::google::protobuf::int32 value) {
  
  update_trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.update_trading_day)
}

// double upper_limit_price = 5;
inline void InstrumentInfo::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double InstrumentInfo::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.upper_limit_price)
  return upper_limit_price_;
}
inline void InstrumentInfo::set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.upper_limit_price)
}

// double lower_limit_price = 6;
inline void InstrumentInfo::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double InstrumentInfo::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.lower_limit_price)
  return lower_limit_price_;
}
inline void InstrumentInfo::set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.lower_limit_price)
}

// double pre_close_price = 7;
inline void InstrumentInfo::clear_pre_close_price() {
  pre_close_price_ = 0;
}
inline double InstrumentInfo::pre_close_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.pre_close_price)
  return pre_close_price_;
}
inline void InstrumentInfo::set_pre_close_price(double value) {
  
  pre_close_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.pre_close_price)
}

// double pre_settlement_price = 8;
inline void InstrumentInfo::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double InstrumentInfo::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.pre_settlement_price)
  return pre_settlement_price_;
}
inline void InstrumentInfo::set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.pre_settlement_price)
}

// int32 pre_volume = 9;
inline void InstrumentInfo::clear_pre_volume() {
  pre_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::pre_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.pre_volume)
  return pre_volume_;
}
inline void InstrumentInfo::set_pre_volume(::google::protobuf::int32 value) {
  
  pre_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.pre_volume)
}

// int32 pre_position = 10;
inline void InstrumentInfo::clear_pre_position() {
  pre_position_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::pre_position() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.pre_position)
  return pre_position_;
}
inline void InstrumentInfo::set_pre_position(::google::protobuf::int32 value) {
  
  pre_position_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.pre_position)
}

// double settlement_price = 11;
inline void InstrumentInfo::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double InstrumentInfo::settlement_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.settlement_price)
  return settlement_price_;
}
inline void InstrumentInfo::set_settlement_price(double value) {
  
  settlement_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.settlement_price)
}

// int32 create_date = 12;
inline void InstrumentInfo::clear_create_date() {
  create_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::create_date() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.create_date)
  return create_date_;
}
inline void InstrumentInfo::set_create_date(::google::protobuf::int32 value) {
  
  create_date_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.create_date)
}

// int32 open_date = 13;
inline void InstrumentInfo::clear_open_date() {
  open_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::open_date() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.open_date)
  return open_date_;
}
inline void InstrumentInfo::set_open_date(::google::protobuf::int32 value) {
  
  open_date_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.open_date)
}

// int32 expire_date = 14;
inline void InstrumentInfo::clear_expire_date() {
  expire_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::expire_date() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.expire_date)
  return expire_date_;
}
inline void InstrumentInfo::set_expire_date(::google::protobuf::int32 value) {
  
  expire_date_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.expire_date)
}

// int32 start_deliver_date = 15;
inline void InstrumentInfo::clear_start_deliver_date() {
  start_deliver_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::start_deliver_date() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.start_deliver_date)
  return start_deliver_date_;
}
inline void InstrumentInfo::set_start_deliver_date(::google::protobuf::int32 value) {
  
  start_deliver_date_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.start_deliver_date)
}

// int32 end_deliver_date = 16;
inline void InstrumentInfo::clear_end_deliver_date() {
  end_deliver_date_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::end_deliver_date() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.end_deliver_date)
  return end_deliver_date_;
}
inline void InstrumentInfo::set_end_deliver_date(::google::protobuf::int32 value) {
  
  end_deliver_date_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.end_deliver_date)
}

// int32 is_close_today_allowed = 17;
inline void InstrumentInfo::clear_is_close_today_allowed() {
  is_close_today_allowed_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::is_close_today_allowed() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.is_close_today_allowed)
  return is_close_today_allowed_;
}
inline void InstrumentInfo::set_is_close_today_allowed(::google::protobuf::int32 value) {
  
  is_close_today_allowed_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.is_close_today_allowed)
}

// int32 max_market_order_volume = 18;
inline void InstrumentInfo::clear_max_market_order_volume() {
  max_market_order_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::max_market_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.max_market_order_volume)
  return max_market_order_volume_;
}
inline void InstrumentInfo::set_max_market_order_volume(::google::protobuf::int32 value) {
  
  max_market_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.max_market_order_volume)
}

// int32 min_market_order_volume = 19;
inline void InstrumentInfo::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.min_market_order_volume)
  return min_market_order_volume_;
}
inline void InstrumentInfo::set_min_market_order_volume(::google::protobuf::int32 value) {
  
  min_market_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.min_market_order_volume)
}

// int32 max_limit_order_volume = 20;
inline void InstrumentInfo::clear_max_limit_order_volume() {
  max_limit_order_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::max_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.max_limit_order_volume)
  return max_limit_order_volume_;
}
inline void InstrumentInfo::set_max_limit_order_volume(::google::protobuf::int32 value) {
  
  max_limit_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.max_limit_order_volume)
}

// int32 min_limit_order_volume = 21;
inline void InstrumentInfo::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.min_limit_order_volume)
  return min_limit_order_volume_;
}
inline void InstrumentInfo::set_min_limit_order_volume(::google::protobuf::int32 value) {
  
  min_limit_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.min_limit_order_volume)
}

// .pb.Symbol base_symbol = 22;
inline bool InstrumentInfo::has_base_symbol() const {
  return this != internal_default_instance() && base_symbol_ != nullptr;
}
inline void InstrumentInfo::clear_base_symbol() {
  if (GetArenaNoVirtual() == nullptr && base_symbol_ != nullptr) {
    delete base_symbol_;
  }
  base_symbol_ = nullptr;
}
inline const ::pb::Symbol& InstrumentInfo::base_symbol() const {
  const ::pb::Symbol* p = base_symbol_;
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.base_symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* InstrumentInfo::release_base_symbol() {
  // @@protoc_insertion_point(field_release:pb.InstrumentInfo.base_symbol)
  
  ::pb::Symbol* temp = base_symbol_;
  base_symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* InstrumentInfo::mutable_base_symbol() {
  
  if (base_symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    base_symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.InstrumentInfo.base_symbol)
  return base_symbol_;
}
inline void InstrumentInfo::set_allocated_base_symbol(::pb::Symbol* base_symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete base_symbol_;
  }
  if (base_symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_symbol, submessage_arena);
    }
    
  } else {
    
  }
  base_symbol_ = base_symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.InstrumentInfo.base_symbol)
}

// double strike_price = 23;
inline void InstrumentInfo::clear_strike_price() {
  strike_price_ = 0;
}
inline double InstrumentInfo::strike_price() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.strike_price)
  return strike_price_;
}
inline void InstrumentInfo::set_strike_price(double value) {
  
  strike_price_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.strike_price)
}

// .pb.OptionCallPutType call_put_type = 24;
inline void InstrumentInfo::clear_call_put_type() {
  call_put_type_ = 0;
}
inline ::pb::OptionCallPutType InstrumentInfo::call_put_type() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.call_put_type)
  return static_cast< ::pb::OptionCallPutType >(call_put_type_);
}
inline void InstrumentInfo::set_call_put_type(::pb::OptionCallPutType value) {
  
  call_put_type_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.call_put_type)
}

// double underlying_multiple = 25;
inline void InstrumentInfo::clear_underlying_multiple() {
  underlying_multiple_ = 0;
}
inline double InstrumentInfo::underlying_multiple() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.underlying_multiple)
  return underlying_multiple_;
}
inline void InstrumentInfo::set_underlying_multiple(double value) {
  
  underlying_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.underlying_multiple)
}

// int32 combination_type = 26;
inline void InstrumentInfo::clear_combination_type() {
  combination_type_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::combination_type() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.combination_type)
  return combination_type_;
}
inline void InstrumentInfo::set_combination_type(::google::protobuf::int32 value) {
  
  combination_type_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.combination_type)
}

// int32 min_buy_volume = 27;
inline void InstrumentInfo::clear_min_buy_volume() {
  min_buy_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::min_buy_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.min_buy_volume)
  return min_buy_volume_;
}
inline void InstrumentInfo::set_min_buy_volume(::google::protobuf::int32 value) {
  
  min_buy_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.min_buy_volume)
}

// int32 min_sell_volume = 28;
inline void InstrumentInfo::clear_min_sell_volume() {
  min_sell_volume_ = 0;
}
inline ::google::protobuf::int32 InstrumentInfo::min_sell_volume() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.min_sell_volume)
  return min_sell_volume_;
}
inline void InstrumentInfo::set_min_sell_volume(::google::protobuf::int32 value) {
  
  min_sell_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.min_sell_volume)
}

// .pb.Symbol instrument_code = 29;
inline bool InstrumentInfo::has_instrument_code() const {
  return this != internal_default_instance() && instrument_code_ != nullptr;
}
inline void InstrumentInfo::clear_instrument_code() {
  if (GetArenaNoVirtual() == nullptr && instrument_code_ != nullptr) {
    delete instrument_code_;
  }
  instrument_code_ = nullptr;
}
inline const ::pb::Symbol& InstrumentInfo::instrument_code() const {
  const ::pb::Symbol* p = instrument_code_;
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.instrument_code)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* InstrumentInfo::release_instrument_code() {
  // @@protoc_insertion_point(field_release:pb.InstrumentInfo.instrument_code)
  
  ::pb::Symbol* temp = instrument_code_;
  instrument_code_ = nullptr;
  return temp;
}
inline ::pb::Symbol* InstrumentInfo::mutable_instrument_code() {
  
  if (instrument_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    instrument_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.InstrumentInfo.instrument_code)
  return instrument_code_;
}
inline void InstrumentInfo::set_allocated_instrument_code(::pb::Symbol* instrument_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instrument_code_;
  }
  if (instrument_code) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instrument_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instrument_code, submessage_arena);
    }
    
  } else {
    
  }
  instrument_code_ = instrument_code;
  // @@protoc_insertion_point(field_set_allocated:pb.InstrumentInfo.instrument_code)
}

// bool is_trading = 30;
inline void InstrumentInfo::clear_is_trading() {
  is_trading_ = false;
}
inline bool InstrumentInfo::is_trading() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.is_trading)
  return is_trading_;
}
inline void InstrumentInfo::set_is_trading(bool value) {
  
  is_trading_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.is_trading)
}

// .pb.OptionDeliveryDateType delivery_date_type = 31;
inline void InstrumentInfo::clear_delivery_date_type() {
  delivery_date_type_ = 0;
}
inline ::pb::OptionDeliveryDateType InstrumentInfo::delivery_date_type() const {
  // @@protoc_insertion_point(field_get:pb.InstrumentInfo.delivery_date_type)
  return static_cast< ::pb::OptionDeliveryDateType >(delivery_date_type_);
}
inline void InstrumentInfo::set_delivery_date_type(::pb::OptionDeliveryDateType value) {
  
  delivery_date_type_ = value;
  // @@protoc_insertion_point(field_set:pb.InstrumentInfo.delivery_date_type)
}

// -------------------------------------------------------------------

// SimpleTimePeriod

// int32 start = 1;
inline void SimpleTimePeriod::clear_start() {
  start_ = 0;
}
inline ::google::protobuf::int32 SimpleTimePeriod::start() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTimePeriod.start)
  return start_;
}
inline void SimpleTimePeriod::set_start(::google::protobuf::int32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTimePeriod.start)
}

// int32 end = 2;
inline void SimpleTimePeriod::clear_end() {
  end_ = 0;
}
inline ::google::protobuf::int32 SimpleTimePeriod::end() const {
  // @@protoc_insertion_point(field_get:pb.SimpleTimePeriod.end)
  return end_;
}
inline void SimpleTimePeriod::set_end(::google::protobuf::int32 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:pb.SimpleTimePeriod.end)
}

// -------------------------------------------------------------------

// MarketTimeRule

// repeated .pb.SimpleTimePeriod send_rule = 1;
inline int MarketTimeRule::send_rule_size() const {
  return send_rule_.size();
}
inline void MarketTimeRule::clear_send_rule() {
  send_rule_.Clear();
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::mutable_send_rule(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MarketTimeRule.send_rule)
  return send_rule_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
MarketTimeRule::mutable_send_rule() {
  // @@protoc_insertion_point(field_mutable_list:pb.MarketTimeRule.send_rule)
  return &send_rule_;
}
inline const ::pb::SimpleTimePeriod& MarketTimeRule::send_rule(int index) const {
  // @@protoc_insertion_point(field_get:pb.MarketTimeRule.send_rule)
  return send_rule_.Get(index);
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::add_send_rule() {
  // @@protoc_insertion_point(field_add:pb.MarketTimeRule.send_rule)
  return send_rule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
MarketTimeRule::send_rule() const {
  // @@protoc_insertion_point(field_list:pb.MarketTimeRule.send_rule)
  return send_rule_;
}

// repeated .pb.SimpleTimePeriod cancel_rule = 2;
inline int MarketTimeRule::cancel_rule_size() const {
  return cancel_rule_.size();
}
inline void MarketTimeRule::clear_cancel_rule() {
  cancel_rule_.Clear();
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::mutable_cancel_rule(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MarketTimeRule.cancel_rule)
  return cancel_rule_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
MarketTimeRule::mutable_cancel_rule() {
  // @@protoc_insertion_point(field_mutable_list:pb.MarketTimeRule.cancel_rule)
  return &cancel_rule_;
}
inline const ::pb::SimpleTimePeriod& MarketTimeRule::cancel_rule(int index) const {
  // @@protoc_insertion_point(field_get:pb.MarketTimeRule.cancel_rule)
  return cancel_rule_.Get(index);
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::add_cancel_rule() {
  // @@protoc_insertion_point(field_add:pb.MarketTimeRule.cancel_rule)
  return cancel_rule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
MarketTimeRule::cancel_rule() const {
  // @@protoc_insertion_point(field_list:pb.MarketTimeRule.cancel_rule)
  return cancel_rule_;
}

// repeated .pb.SimpleTimePeriod matching_rule = 3;
inline int MarketTimeRule::matching_rule_size() const {
  return matching_rule_.size();
}
inline void MarketTimeRule::clear_matching_rule() {
  matching_rule_.Clear();
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::mutable_matching_rule(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MarketTimeRule.matching_rule)
  return matching_rule_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >*
MarketTimeRule::mutable_matching_rule() {
  // @@protoc_insertion_point(field_mutable_list:pb.MarketTimeRule.matching_rule)
  return &matching_rule_;
}
inline const ::pb::SimpleTimePeriod& MarketTimeRule::matching_rule(int index) const {
  // @@protoc_insertion_point(field_get:pb.MarketTimeRule.matching_rule)
  return matching_rule_.Get(index);
}
inline ::pb::SimpleTimePeriod* MarketTimeRule::add_matching_rule() {
  // @@protoc_insertion_point(field_add:pb.MarketTimeRule.matching_rule)
  return matching_rule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::SimpleTimePeriod >&
MarketTimeRule::matching_rule() const {
  // @@protoc_insertion_point(field_list:pb.MarketTimeRule.matching_rule)
  return matching_rule_;
}

// -------------------------------------------------------------------

// ProductInfo

// .pb.ProductID product_id = 1;
inline bool ProductInfo::has_product_id() const {
  return this != internal_default_instance() && product_id_ != nullptr;
}
inline void ProductInfo::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
inline const ::pb::ProductID& ProductInfo::product_id() const {
  const ::pb::ProductID* p = product_id_;
  // @@protoc_insertion_point(field_get:pb.ProductInfo.product_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* ProductInfo::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.ProductInfo.product_id)
  
  ::pb::ProductID* temp = product_id_;
  product_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* ProductInfo::mutable_product_id() {
  
  if (product_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ProductInfo.product_id)
  return product_id_;
}
inline void ProductInfo::set_allocated_product_id(::pb::ProductID* product_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete product_id_;
  }
  if (product_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:pb.ProductInfo.product_id)
}

// .pb.ProductID product_group_id = 2;
inline bool ProductInfo::has_product_group_id() const {
  return this != internal_default_instance() && product_group_id_ != nullptr;
}
inline void ProductInfo::clear_product_group_id() {
  if (GetArenaNoVirtual() == nullptr && product_group_id_ != nullptr) {
    delete product_group_id_;
  }
  product_group_id_ = nullptr;
}
inline const ::pb::ProductID& ProductInfo::product_group_id() const {
  const ::pb::ProductID* p = product_group_id_;
  // @@protoc_insertion_point(field_get:pb.ProductInfo.product_group_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* ProductInfo::release_product_group_id() {
  // @@protoc_insertion_point(field_release:pb.ProductInfo.product_group_id)
  
  ::pb::ProductID* temp = product_group_id_;
  product_group_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* ProductInfo::mutable_product_group_id() {
  
  if (product_group_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_group_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ProductInfo.product_group_id)
  return product_group_id_;
}
inline void ProductInfo::set_allocated_product_group_id(::pb::ProductID* product_group_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete product_group_id_;
  }
  if (product_group_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_group_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_group_id, submessage_arena);
    }
    
  } else {
    
  }
  product_group_id_ = product_group_id;
  // @@protoc_insertion_point(field_set_allocated:pb.ProductInfo.product_group_id)
}

// .pb.ProductType type = 3;
inline void ProductInfo::clear_type() {
  type_ = 0;
}
inline ::pb::ProductType ProductInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.type)
  return static_cast< ::pb::ProductType >(type_);
}
inline void ProductInfo::set_type(::pb::ProductType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.type)
}

// string product_name = 4;
inline void ProductInfo::clear_product_name() {
  product_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProductInfo::product_name() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.product_name)
  return product_name_.GetNoArena();
}
inline void ProductInfo::set_product_name(const ::std::string& value) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ProductInfo.product_name)
}
#if LANG_CXX11
inline void ProductInfo::set_product_name(::std::string&& value) {
  
  product_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ProductInfo.product_name)
}
#endif
inline void ProductInfo::set_product_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ProductInfo.product_name)
}
inline void ProductInfo::set_product_name(const char* value, size_t size) {
  
  product_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ProductInfo.product_name)
}
inline ::std::string* ProductInfo::mutable_product_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.ProductInfo.product_name)
  return product_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProductInfo::release_product_name() {
  // @@protoc_insertion_point(field_release:pb.ProductInfo.product_name)
  
  return product_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProductInfo::set_allocated_product_name(::std::string* product_name) {
  if (product_name != nullptr) {
    
  } else {
    
  }
  product_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_name);
  // @@protoc_insertion_point(field_set_allocated:pb.ProductInfo.product_name)
}

// double price_tick = 5;
inline void ProductInfo::clear_price_tick() {
  price_tick_ = 0;
}
inline double ProductInfo::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.price_tick)
  return price_tick_;
}
inline void ProductInfo::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.price_tick)
}

// int32 volume_multiple = 6;
inline void ProductInfo::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::google::protobuf::int32 ProductInfo::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.volume_multiple)
  return volume_multiple_;
}
inline void ProductInfo::set_volume_multiple(::google::protobuf::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.volume_multiple)
}

// int32 pre_volume = 7;
inline void ProductInfo::clear_pre_volume() {
  pre_volume_ = 0;
}
inline ::google::protobuf::int32 ProductInfo::pre_volume() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.pre_volume)
  return pre_volume_;
}
inline void ProductInfo::set_pre_volume(::google::protobuf::int32 value) {
  
  pre_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.pre_volume)
}

// int32 pre_position = 8;
inline void ProductInfo::clear_pre_position() {
  pre_position_ = 0;
}
inline ::google::protobuf::int32 ProductInfo::pre_position() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.pre_position)
  return pre_position_;
}
inline void ProductInfo::set_pre_position(::google::protobuf::int32 value) {
  
  pre_position_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.pre_position)
}

// int32 currency_type = 9;
inline void ProductInfo::clear_currency_type() {
  currency_type_ = 0;
}
inline ::google::protobuf::int32 ProductInfo::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.currency_type)
  return currency_type_;
}
inline void ProductInfo::set_currency_type(::google::protobuf::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.currency_type)
}

// int32 settlement_group = 10;
inline void ProductInfo::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::google::protobuf::int32 ProductInfo::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.settlement_group)
  return settlement_group_;
}
inline void ProductInfo::set_settlement_group(::google::protobuf::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.settlement_group)
}

// .pb.MarketTimeRule time_rule = 11;
inline bool ProductInfo::has_time_rule() const {
  return this != internal_default_instance() && time_rule_ != nullptr;
}
inline void ProductInfo::clear_time_rule() {
  if (GetArenaNoVirtual() == nullptr && time_rule_ != nullptr) {
    delete time_rule_;
  }
  time_rule_ = nullptr;
}
inline const ::pb::MarketTimeRule& ProductInfo::time_rule() const {
  const ::pb::MarketTimeRule* p = time_rule_;
  // @@protoc_insertion_point(field_get:pb.ProductInfo.time_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketTimeRule*>(
      &::pb::_MarketTimeRule_default_instance_);
}
inline ::pb::MarketTimeRule* ProductInfo::release_time_rule() {
  // @@protoc_insertion_point(field_release:pb.ProductInfo.time_rule)
  
  ::pb::MarketTimeRule* temp = time_rule_;
  time_rule_ = nullptr;
  return temp;
}
inline ::pb::MarketTimeRule* ProductInfo::mutable_time_rule() {
  
  if (time_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketTimeRule>(GetArenaNoVirtual());
    time_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ProductInfo.time_rule)
  return time_rule_;
}
inline void ProductInfo::set_allocated_time_rule(::pb::MarketTimeRule* time_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_rule_;
  }
  if (time_rule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_rule, submessage_arena);
    }
    
  } else {
    
  }
  time_rule_ = time_rule;
  // @@protoc_insertion_point(field_set_allocated:pb.ProductInfo.time_rule)
}

// bool distinguish_position_time = 12;
inline void ProductInfo::clear_distinguish_position_time() {
  distinguish_position_time_ = false;
}
inline bool ProductInfo::distinguish_position_time() const {
  // @@protoc_insertion_point(field_get:pb.ProductInfo.distinguish_position_time)
  return distinguish_position_time_;
}
inline void ProductInfo::set_distinguish_position_time(bool value) {
  
  distinguish_position_time_ = value;
  // @@protoc_insertion_point(field_set:pb.ProductInfo.distinguish_position_time)
}

// -------------------------------------------------------------------

// TradingInstrument

// .pb.Symbol symbol = 1;
inline bool TradingInstrument::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline void TradingInstrument::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
inline const ::pb::Symbol& TradingInstrument::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.TradingInstrument.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* TradingInstrument::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.TradingInstrument.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* TradingInstrument::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradingInstrument.symbol)
  return symbol_;
}
inline void TradingInstrument::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete symbol_;
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.TradingInstrument.symbol)
}

// .pb.InstrumentInfo instrument_info = 2;
inline bool TradingInstrument::has_instrument_info() const {
  return this != internal_default_instance() && instrument_info_ != nullptr;
}
inline void TradingInstrument::clear_instrument_info() {
  if (GetArenaNoVirtual() == nullptr && instrument_info_ != nullptr) {
    delete instrument_info_;
  }
  instrument_info_ = nullptr;
}
inline const ::pb::InstrumentInfo& TradingInstrument::instrument_info() const {
  const ::pb::InstrumentInfo* p = instrument_info_;
  // @@protoc_insertion_point(field_get:pb.TradingInstrument.instrument_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::InstrumentInfo*>(
      &::pb::_InstrumentInfo_default_instance_);
}
inline ::pb::InstrumentInfo* TradingInstrument::release_instrument_info() {
  // @@protoc_insertion_point(field_release:pb.TradingInstrument.instrument_info)
  
  ::pb::InstrumentInfo* temp = instrument_info_;
  instrument_info_ = nullptr;
  return temp;
}
inline ::pb::InstrumentInfo* TradingInstrument::mutable_instrument_info() {
  
  if (instrument_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::InstrumentInfo>(GetArenaNoVirtual());
    instrument_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradingInstrument.instrument_info)
  return instrument_info_;
}
inline void TradingInstrument::set_allocated_instrument_info(::pb::InstrumentInfo* instrument_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instrument_info_;
  }
  if (instrument_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instrument_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instrument_info, submessage_arena);
    }
    
  } else {
    
  }
  instrument_info_ = instrument_info;
  // @@protoc_insertion_point(field_set_allocated:pb.TradingInstrument.instrument_info)
}

// .pb.ProductInfo product_info = 3;
inline bool TradingInstrument::has_product_info() const {
  return this != internal_default_instance() && product_info_ != nullptr;
}
inline void TradingInstrument::clear_product_info() {
  if (GetArenaNoVirtual() == nullptr && product_info_ != nullptr) {
    delete product_info_;
  }
  product_info_ = nullptr;
}
inline const ::pb::ProductInfo& TradingInstrument::product_info() const {
  const ::pb::ProductInfo* p = product_info_;
  // @@protoc_insertion_point(field_get:pb.TradingInstrument.product_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductInfo*>(
      &::pb::_ProductInfo_default_instance_);
}
inline ::pb::ProductInfo* TradingInstrument::release_product_info() {
  // @@protoc_insertion_point(field_release:pb.TradingInstrument.product_info)
  
  ::pb::ProductInfo* temp = product_info_;
  product_info_ = nullptr;
  return temp;
}
inline ::pb::ProductInfo* TradingInstrument::mutable_product_info() {
  
  if (product_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductInfo>(GetArenaNoVirtual());
    product_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradingInstrument.product_info)
  return product_info_;
}
inline void TradingInstrument::set_allocated_product_info(::pb::ProductInfo* product_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete product_info_;
  }
  if (product_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_info, submessage_arena);
    }
    
  } else {
    
  }
  product_info_ = product_info;
  // @@protoc_insertion_point(field_set_allocated:pb.TradingInstrument.product_info)
}

// -------------------------------------------------------------------

// TradingInstrumentList

// repeated .pb.TradingInstrument list = 1;
inline int TradingInstrumentList::list_size() const {
  return list_.size();
}
inline void TradingInstrumentList::clear_list() {
  list_.Clear();
}
inline ::pb::TradingInstrument* TradingInstrumentList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TradingInstrumentList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >*
TradingInstrumentList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TradingInstrumentList.list)
  return &list_;
}
inline const ::pb::TradingInstrument& TradingInstrumentList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TradingInstrumentList.list)
  return list_.Get(index);
}
inline ::pb::TradingInstrument* TradingInstrumentList::add_list() {
  // @@protoc_insertion_point(field_add:pb.TradingInstrumentList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >&
TradingInstrumentList::list() const {
  // @@protoc_insertion_point(field_list:pb.TradingInstrumentList.list)
  return list_;
}

// -------------------------------------------------------------------

// ProductInfoList

// repeated .pb.ProductInfo list = 1;
inline int ProductInfoList::list_size() const {
  return list_.size();
}
inline void ProductInfoList::clear_list() {
  list_.Clear();
}
inline ::pb::ProductInfo* ProductInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ProductInfoList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >*
ProductInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ProductInfoList.list)
  return &list_;
}
inline const ::pb::ProductInfo& ProductInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ProductInfoList.list)
  return list_.Get(index);
}
inline ::pb::ProductInfo* ProductInfoList::add_list() {
  // @@protoc_insertion_point(field_add:pb.ProductInfoList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >&
ProductInfoList::list() const {
  // @@protoc_insertion_point(field_list:pb.ProductInfoList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqSetTradingInstrumentList

// string op_code = 1;
inline void ReqSetTradingInstrumentList::clear_op_code() {
  op_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqSetTradingInstrumentList::op_code() const {
  // @@protoc_insertion_point(field_get:pb.ReqSetTradingInstrumentList.op_code)
  return op_code_.GetNoArena();
}
inline void ReqSetTradingInstrumentList::set_op_code(const ::std::string& value) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqSetTradingInstrumentList.op_code)
}
#if LANG_CXX11
inline void ReqSetTradingInstrumentList::set_op_code(::std::string&& value) {
  
  op_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqSetTradingInstrumentList.op_code)
}
#endif
inline void ReqSetTradingInstrumentList::set_op_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqSetTradingInstrumentList.op_code)
}
inline void ReqSetTradingInstrumentList::set_op_code(const char* value, size_t size) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqSetTradingInstrumentList.op_code)
}
inline ::std::string* ReqSetTradingInstrumentList::mutable_op_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqSetTradingInstrumentList.op_code)
  return op_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqSetTradingInstrumentList::release_op_code() {
  // @@protoc_insertion_point(field_release:pb.ReqSetTradingInstrumentList.op_code)
  
  return op_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSetTradingInstrumentList::set_allocated_op_code(::std::string* op_code) {
  if (op_code != nullptr) {
    
  } else {
    
  }
  op_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_code);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqSetTradingInstrumentList.op_code)
}

// int32 exchange = 2;
inline void ReqSetTradingInstrumentList::clear_exchange() {
  exchange_ = 0;
}
inline ::google::protobuf::int32 ReqSetTradingInstrumentList::exchange() const {
  // @@protoc_insertion_point(field_get:pb.ReqSetTradingInstrumentList.exchange)
  return exchange_;
}
inline void ReqSetTradingInstrumentList::set_exchange(::google::protobuf::int32 value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqSetTradingInstrumentList.exchange)
}

// repeated .pb.TradingInstrument list = 3;
inline int ReqSetTradingInstrumentList::list_size() const {
  return list_.size();
}
inline void ReqSetTradingInstrumentList::clear_list() {
  list_.Clear();
}
inline ::pb::TradingInstrument* ReqSetTradingInstrumentList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqSetTradingInstrumentList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >*
ReqSetTradingInstrumentList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqSetTradingInstrumentList.list)
  return &list_;
}
inline const ::pb::TradingInstrument& ReqSetTradingInstrumentList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqSetTradingInstrumentList.list)
  return list_.Get(index);
}
inline ::pb::TradingInstrument* ReqSetTradingInstrumentList::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqSetTradingInstrumentList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TradingInstrument >&
ReqSetTradingInstrumentList::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqSetTradingInstrumentList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqSetProductInfoList

// string op_code = 1;
inline void ReqSetProductInfoList::clear_op_code() {
  op_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqSetProductInfoList::op_code() const {
  // @@protoc_insertion_point(field_get:pb.ReqSetProductInfoList.op_code)
  return op_code_.GetNoArena();
}
inline void ReqSetProductInfoList::set_op_code(const ::std::string& value) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqSetProductInfoList.op_code)
}
#if LANG_CXX11
inline void ReqSetProductInfoList::set_op_code(::std::string&& value) {
  
  op_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqSetProductInfoList.op_code)
}
#endif
inline void ReqSetProductInfoList::set_op_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqSetProductInfoList.op_code)
}
inline void ReqSetProductInfoList::set_op_code(const char* value, size_t size) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqSetProductInfoList.op_code)
}
inline ::std::string* ReqSetProductInfoList::mutable_op_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqSetProductInfoList.op_code)
  return op_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqSetProductInfoList::release_op_code() {
  // @@protoc_insertion_point(field_release:pb.ReqSetProductInfoList.op_code)
  
  return op_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSetProductInfoList::set_allocated_op_code(::std::string* op_code) {
  if (op_code != nullptr) {
    
  } else {
    
  }
  op_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_code);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqSetProductInfoList.op_code)
}

// int32 exchange = 2;
inline void ReqSetProductInfoList::clear_exchange() {
  exchange_ = 0;
}
inline ::google::protobuf::int32 ReqSetProductInfoList::exchange() const {
  // @@protoc_insertion_point(field_get:pb.ReqSetProductInfoList.exchange)
  return exchange_;
}
inline void ReqSetProductInfoList::set_exchange(::google::protobuf::int32 value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqSetProductInfoList.exchange)
}

// repeated .pb.ProductInfo list = 3;
inline int ReqSetProductInfoList::list_size() const {
  return list_.size();
}
inline void ReqSetProductInfoList::clear_list() {
  list_.Clear();
}
inline ::pb::ProductInfo* ReqSetProductInfoList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqSetProductInfoList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >*
ReqSetProductInfoList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqSetProductInfoList.list)
  return &list_;
}
inline const ::pb::ProductInfo& ReqSetProductInfoList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqSetProductInfoList.list)
  return list_.Get(index);
}
inline ::pb::ProductInfo* ReqSetProductInfoList::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqSetProductInfoList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ProductInfo >&
ReqSetProductInfoList::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqSetProductInfoList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqUpdateTIOpenDate

// .pb.Symbol symbol = 1;
inline bool ReqUpdateTIOpenDate::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline void ReqUpdateTIOpenDate::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
inline const ::pb::Symbol& ReqUpdateTIOpenDate::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ReqUpdateTIOpenDate.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ReqUpdateTIOpenDate::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ReqUpdateTIOpenDate.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ReqUpdateTIOpenDate::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ReqUpdateTIOpenDate.symbol)
  return symbol_;
}
inline void ReqUpdateTIOpenDate::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete symbol_;
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ReqUpdateTIOpenDate.symbol)
}

// int32 open_date = 2;
inline void ReqUpdateTIOpenDate::clear_open_date() {
  open_date_ = 0;
}
inline ::google::protobuf::int32 ReqUpdateTIOpenDate::open_date() const {
  // @@protoc_insertion_point(field_get:pb.ReqUpdateTIOpenDate.open_date)
  return open_date_;
}
inline void ReqUpdateTIOpenDate::set_open_date(::google::protobuf::int32 value) {
  
  open_date_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqUpdateTIOpenDate.open_date)
}

// -------------------------------------------------------------------

// ReqUpdateTIOpenDateList

// int32 exchange = 1;
inline void ReqUpdateTIOpenDateList::clear_exchange() {
  exchange_ = 0;
}
inline ::google::protobuf::int32 ReqUpdateTIOpenDateList::exchange() const {
  // @@protoc_insertion_point(field_get:pb.ReqUpdateTIOpenDateList.exchange)
  return exchange_;
}
inline void ReqUpdateTIOpenDateList::set_exchange(::google::protobuf::int32 value) {
  
  exchange_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqUpdateTIOpenDateList.exchange)
}

// repeated .pb.ReqUpdateTIOpenDate list = 2;
inline int ReqUpdateTIOpenDateList::list_size() const {
  return list_.size();
}
inline void ReqUpdateTIOpenDateList::clear_list() {
  list_.Clear();
}
inline ::pb::ReqUpdateTIOpenDate* ReqUpdateTIOpenDateList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.ReqUpdateTIOpenDateList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ReqUpdateTIOpenDate >*
ReqUpdateTIOpenDateList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.ReqUpdateTIOpenDateList.list)
  return &list_;
}
inline const ::pb::ReqUpdateTIOpenDate& ReqUpdateTIOpenDateList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.ReqUpdateTIOpenDateList.list)
  return list_.Get(index);
}
inline ::pb::ReqUpdateTIOpenDate* ReqUpdateTIOpenDateList::add_list() {
  // @@protoc_insertion_point(field_add:pb.ReqUpdateTIOpenDateList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ReqUpdateTIOpenDate >&
ReqUpdateTIOpenDateList::list() const {
  // @@protoc_insertion_point(field_list:pb.ReqUpdateTIOpenDateList.list)
  return list_;
}

// string op_code = 3;
inline void ReqUpdateTIOpenDateList::clear_op_code() {
  op_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReqUpdateTIOpenDateList::op_code() const {
  // @@protoc_insertion_point(field_get:pb.ReqUpdateTIOpenDateList.op_code)
  return op_code_.GetNoArena();
}
inline void ReqUpdateTIOpenDateList::set_op_code(const ::std::string& value) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReqUpdateTIOpenDateList.op_code)
}
#if LANG_CXX11
inline void ReqUpdateTIOpenDateList::set_op_code(::std::string&& value) {
  
  op_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReqUpdateTIOpenDateList.op_code)
}
#endif
inline void ReqUpdateTIOpenDateList::set_op_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReqUpdateTIOpenDateList.op_code)
}
inline void ReqUpdateTIOpenDateList::set_op_code(const char* value, size_t size) {
  
  op_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReqUpdateTIOpenDateList.op_code)
}
inline ::std::string* ReqUpdateTIOpenDateList::mutable_op_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReqUpdateTIOpenDateList.op_code)
  return op_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqUpdateTIOpenDateList::release_op_code() {
  // @@protoc_insertion_point(field_release:pb.ReqUpdateTIOpenDateList.op_code)
  
  return op_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqUpdateTIOpenDateList::set_allocated_op_code(::std::string* op_code) {
  if (op_code != nullptr) {
    
  } else {
    
  }
  op_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_code);
  // @@protoc_insertion_point(field_set_allocated:pb.ReqUpdateTIOpenDateList.op_code)
}

// -------------------------------------------------------------------

// AccountMoneySummary

// string id = 1;
inline void AccountMoneySummary::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountMoneySummary::id() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.id)
  return id_.GetNoArena();
}
inline void AccountMoneySummary::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.id)
}
#if LANG_CXX11
inline void AccountMoneySummary::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AccountMoneySummary.id)
}
#endif
inline void AccountMoneySummary::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AccountMoneySummary.id)
}
inline void AccountMoneySummary::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AccountMoneySummary.id)
}
inline ::std::string* AccountMoneySummary::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.AccountMoneySummary.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountMoneySummary::release_id() {
  // @@protoc_insertion_point(field_release:pb.AccountMoneySummary.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountMoneySummary::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.AccountMoneySummary.id)
}

// .pb.AccountType type = 2;
inline void AccountMoneySummary::clear_type() {
  type_ = 0;
}
inline ::pb::AccountType AccountMoneySummary::type() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.type)
  return static_cast< ::pb::AccountType >(type_);
}
inline void AccountMoneySummary::set_type(::pb::AccountType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.type)
}

// .pb.CurrencyType currency_type = 3;
inline void AccountMoneySummary::clear_currency_type() {
  currency_type_ = 0;
}
inline ::pb::CurrencyType AccountMoneySummary::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.currency_type)
  return static_cast< ::pb::CurrencyType >(currency_type_);
}
inline void AccountMoneySummary::set_currency_type(::pb::CurrencyType value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.currency_type)
}

// double balance = 4;
inline void AccountMoneySummary::clear_balance() {
  balance_ = 0;
}
inline double AccountMoneySummary::balance() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.balance)
  return balance_;
}
inline void AccountMoneySummary::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.balance)
}

// double commission = 5;
inline void AccountMoneySummary::clear_commission() {
  commission_ = 0;
}
inline double AccountMoneySummary::commission() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.commission)
  return commission_;
}
inline void AccountMoneySummary::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.commission)
}

// double cur_margin = 6;
inline void AccountMoneySummary::clear_cur_margin() {
  cur_margin_ = 0;
}
inline double AccountMoneySummary::cur_margin() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.cur_margin)
  return cur_margin_;
}
inline void AccountMoneySummary::set_cur_margin(double value) {
  
  cur_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.cur_margin)
}

// double net_position_amount = 7;
inline void AccountMoneySummary::clear_net_position_amount() {
  net_position_amount_ = 0;
}
inline double AccountMoneySummary::net_position_amount() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.net_position_amount)
  return net_position_amount_;
}
inline void AccountMoneySummary::set_net_position_amount(double value) {
  
  net_position_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.net_position_amount)
}

// double pre_balance = 8;
inline void AccountMoneySummary::clear_pre_balance() {
  pre_balance_ = 0;
}
inline double AccountMoneySummary::pre_balance() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.pre_balance)
  return pre_balance_;
}
inline void AccountMoneySummary::set_pre_balance(double value) {
  
  pre_balance_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.pre_balance)
}

// double interest_in = 9;
inline void AccountMoneySummary::clear_interest_in() {
  interest_in_ = 0;
}
inline double AccountMoneySummary::interest_in() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.interest_in)
  return interest_in_;
}
inline void AccountMoneySummary::set_interest_in(double value) {
  
  interest_in_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.interest_in)
}

// double deposit = 10;
inline void AccountMoneySummary::clear_deposit() {
  deposit_ = 0;
}
inline double AccountMoneySummary::deposit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.deposit)
  return deposit_;
}
inline void AccountMoneySummary::set_deposit(double value) {
  
  deposit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.deposit)
}

// double withdraw = 11;
inline void AccountMoneySummary::clear_withdraw() {
  withdraw_ = 0;
}
inline double AccountMoneySummary::withdraw() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.withdraw)
  return withdraw_;
}
inline void AccountMoneySummary::set_withdraw(double value) {
  
  withdraw_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.withdraw)
}

// double frozen_margin = 12;
inline void AccountMoneySummary::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double AccountMoneySummary::frozen_margin() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_margin)
  return frozen_margin_;
}
inline void AccountMoneySummary::set_frozen_margin(double value) {
  
  frozen_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_margin)
}

// double frozen_commission = 13;
inline void AccountMoneySummary::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double AccountMoneySummary::frozen_commission() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_commission)
  return frozen_commission_;
}
inline void AccountMoneySummary::set_frozen_commission(double value) {
  
  frozen_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_commission)
}

// double available = 14;
inline void AccountMoneySummary::clear_available() {
  available_ = 0;
}
inline double AccountMoneySummary::available() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.available)
  return available_;
}
inline void AccountMoneySummary::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.available)
}

// double close_profit = 15;
inline void AccountMoneySummary::clear_close_profit() {
  close_profit_ = 0;
}
inline double AccountMoneySummary::close_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.close_profit)
  return close_profit_;
}
inline void AccountMoneySummary::set_close_profit(double value) {
  
  close_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.close_profit)
}

// double position_profit = 16;
inline void AccountMoneySummary::clear_position_profit() {
  position_profit_ = 0;
}
inline double AccountMoneySummary::position_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.position_profit)
  return position_profit_;
}
inline void AccountMoneySummary::set_position_profit(double value) {
  
  position_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.position_profit)
}

// double pre_mortgate = 17;
inline void AccountMoneySummary::clear_pre_mortgate() {
  pre_mortgate_ = 0;
}
inline double AccountMoneySummary::pre_mortgate() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.pre_mortgate)
  return pre_mortgate_;
}
inline void AccountMoneySummary::set_pre_mortgate(double value) {
  
  pre_mortgate_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.pre_mortgate)
}

// double pre_credit = 18;
inline void AccountMoneySummary::clear_pre_credit() {
  pre_credit_ = 0;
}
inline double AccountMoneySummary::pre_credit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.pre_credit)
  return pre_credit_;
}
inline void AccountMoneySummary::set_pre_credit(double value) {
  
  pre_credit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.pre_credit)
}

// double interest_base = 19;
inline void AccountMoneySummary::clear_interest_base() {
  interest_base_ = 0;
}
inline double AccountMoneySummary::interest_base() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.interest_base)
  return interest_base_;
}
inline void AccountMoneySummary::set_interest_base(double value) {
  
  interest_base_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.interest_base)
}

// double withdraw_available = 20;
inline void AccountMoneySummary::clear_withdraw_available() {
  withdraw_available_ = 0;
}
inline double AccountMoneySummary::withdraw_available() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.withdraw_available)
  return withdraw_available_;
}
inline void AccountMoneySummary::set_withdraw_available(double value) {
  
  withdraw_available_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.withdraw_available)
}

// double reserve = 21;
inline void AccountMoneySummary::clear_reserve() {
  reserve_ = 0;
}
inline double AccountMoneySummary::reserve() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.reserve)
  return reserve_;
}
inline void AccountMoneySummary::set_reserve(double value) {
  
  reserve_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.reserve)
}

// int32 trading_day = 22;
inline void AccountMoneySummary::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 AccountMoneySummary::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.trading_day)
  return trading_day_;
}
inline void AccountMoneySummary::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.trading_day)
}

// double credit = 23;
inline void AccountMoneySummary::clear_credit() {
  credit_ = 0;
}
inline double AccountMoneySummary::credit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.credit)
  return credit_;
}
inline void AccountMoneySummary::set_credit(double value) {
  
  credit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.credit)
}

// double mortgate = 24;
inline void AccountMoneySummary::clear_mortgate() {
  mortgate_ = 0;
}
inline double AccountMoneySummary::mortgate() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.mortgate)
  return mortgate_;
}
inline void AccountMoneySummary::set_mortgate(double value) {
  
  mortgate_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.mortgate)
}

// double exchange_margin = 25;
inline void AccountMoneySummary::clear_exchange_margin() {
  exchange_margin_ = 0;
}
inline double AccountMoneySummary::exchange_margin() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.exchange_margin)
  return exchange_margin_;
}
inline void AccountMoneySummary::set_exchange_margin(double value) {
  
  exchange_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.exchange_margin)
}

// double delivery_margin = 26;
inline void AccountMoneySummary::clear_delivery_margin() {
  delivery_margin_ = 0;
}
inline double AccountMoneySummary::delivery_margin() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.delivery_margin)
  return delivery_margin_;
}
inline void AccountMoneySummary::set_delivery_margin(double value) {
  
  delivery_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.delivery_margin)
}

// double exchange_delivery_margin = 27;
inline void AccountMoneySummary::clear_exchange_delivery_margin() {
  exchange_delivery_margin_ = 0;
}
inline double AccountMoneySummary::exchange_delivery_margin() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.exchange_delivery_margin)
  return exchange_delivery_margin_;
}
inline void AccountMoneySummary::set_exchange_delivery_margin(double value) {
  
  exchange_delivery_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.exchange_delivery_margin)
}

// double reserve_balance = 28;
inline void AccountMoneySummary::clear_reserve_balance() {
  reserve_balance_ = 0;
}
inline double AccountMoneySummary::reserve_balance() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.reserve_balance)
  return reserve_balance_;
}
inline void AccountMoneySummary::set_reserve_balance(double value) {
  
  reserve_balance_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.reserve_balance)
}

// double delivery_commission = 29;
inline void AccountMoneySummary::clear_delivery_commission() {
  delivery_commission_ = 0;
}
inline double AccountMoneySummary::delivery_commission() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.delivery_commission)
  return delivery_commission_;
}
inline void AccountMoneySummary::set_delivery_commission(double value) {
  
  delivery_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.delivery_commission)
}

// double frozen_transfer_fee = 30;
inline void AccountMoneySummary::clear_frozen_transfer_fee() {
  frozen_transfer_fee_ = 0;
}
inline double AccountMoneySummary::frozen_transfer_fee() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_transfer_fee)
  return frozen_transfer_fee_;
}
inline void AccountMoneySummary::set_frozen_transfer_fee(double value) {
  
  frozen_transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_transfer_fee)
}

// double frozen_stamp_tax = 31;
inline void AccountMoneySummary::clear_frozen_stamp_tax() {
  frozen_stamp_tax_ = 0;
}
inline double AccountMoneySummary::frozen_stamp_tax() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_stamp_tax)
  return frozen_stamp_tax_;
}
inline void AccountMoneySummary::set_frozen_stamp_tax(double value) {
  
  frozen_stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_stamp_tax)
}

// double transfer_fee = 32;
inline void AccountMoneySummary::clear_transfer_fee() {
  transfer_fee_ = 0;
}
inline double AccountMoneySummary::transfer_fee() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.transfer_fee)
  return transfer_fee_;
}
inline void AccountMoneySummary::set_transfer_fee(double value) {
  
  transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.transfer_fee)
}

// double stamp_tax = 33;
inline void AccountMoneySummary::clear_stamp_tax() {
  stamp_tax_ = 0;
}
inline double AccountMoneySummary::stamp_tax() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.stamp_tax)
  return stamp_tax_;
}
inline void AccountMoneySummary::set_stamp_tax(double value) {
  
  stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.stamp_tax)
}

// double mtm_profit = 34;
inline void AccountMoneySummary::clear_mtm_profit() {
  mtm_profit_ = 0;
}
inline double AccountMoneySummary::mtm_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.mtm_profit)
  return mtm_profit_;
}
inline void AccountMoneySummary::set_mtm_profit(double value) {
  
  mtm_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.mtm_profit)
}

// double pre_mtm_profit = 35;
inline void AccountMoneySummary::clear_pre_mtm_profit() {
  pre_mtm_profit_ = 0;
}
inline double AccountMoneySummary::pre_mtm_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.pre_mtm_profit)
  return pre_mtm_profit_;
}
inline void AccountMoneySummary::set_pre_mtm_profit(double value) {
  
  pre_mtm_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.pre_mtm_profit)
}

// double stock_value = 36;
inline void AccountMoneySummary::clear_stock_value() {
  stock_value_ = 0;
}
inline double AccountMoneySummary::stock_value() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.stock_value)
  return stock_value_;
}
inline void AccountMoneySummary::set_stock_value(double value) {
  
  stock_value_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.stock_value)
}

// double bond_repurchase_amount = 37;
inline void AccountMoneySummary::clear_bond_repurchase_amount() {
  bond_repurchase_amount_ = 0;
}
inline double AccountMoneySummary::bond_repurchase_amount() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.bond_repurchase_amount)
  return bond_repurchase_amount_;
}
inline void AccountMoneySummary::set_bond_repurchase_amount(double value) {
  
  bond_repurchase_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.bond_repurchase_amount)
}

// double reverse_repurchase_amount = 38;
inline void AccountMoneySummary::clear_reverse_repurchase_amount() {
  reverse_repurchase_amount_ = 0;
}
inline double AccountMoneySummary::reverse_repurchase_amount() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.reverse_repurchase_amount)
  return reverse_repurchase_amount_;
}
inline void AccountMoneySummary::set_reverse_repurchase_amount(double value) {
  
  reverse_repurchase_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.reverse_repurchase_amount)
}

// double margin_trade_amount = 39;
inline void AccountMoneySummary::clear_margin_trade_amount() {
  margin_trade_amount_ = 0;
}
inline double AccountMoneySummary::margin_trade_amount() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.margin_trade_amount)
  return margin_trade_amount_;
}
inline void AccountMoneySummary::set_margin_trade_amount(double value) {
  
  margin_trade_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.margin_trade_amount)
}

// double short_sell_amount = 40;
inline void AccountMoneySummary::clear_short_sell_amount() {
  short_sell_amount_ = 0;
}
inline double AccountMoneySummary::short_sell_amount() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.short_sell_amount)
  return short_sell_amount_;
}
inline void AccountMoneySummary::set_short_sell_amount(double value) {
  
  short_sell_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.short_sell_amount)
}

// double margin_trade_profit = 41;
inline void AccountMoneySummary::clear_margin_trade_profit() {
  margin_trade_profit_ = 0;
}
inline double AccountMoneySummary::margin_trade_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.margin_trade_profit)
  return margin_trade_profit_;
}
inline void AccountMoneySummary::set_margin_trade_profit(double value) {
  
  margin_trade_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.margin_trade_profit)
}

// double short_sell_profit = 42;
inline void AccountMoneySummary::clear_short_sell_profit() {
  short_sell_profit_ = 0;
}
inline double AccountMoneySummary::short_sell_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.short_sell_profit)
  return short_sell_profit_;
}
inline void AccountMoneySummary::set_short_sell_profit(double value) {
  
  short_sell_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.short_sell_profit)
}

// double frozen_close_commission = 43;
inline void AccountMoneySummary::clear_frozen_close_commission() {
  frozen_close_commission_ = 0;
}
inline double AccountMoneySummary::frozen_close_commission() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_close_commission)
  return frozen_close_commission_;
}
inline void AccountMoneySummary::set_frozen_close_commission(double value) {
  
  frozen_close_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_close_commission)
}

// double common_balance = 44;
inline void AccountMoneySummary::clear_common_balance() {
  common_balance_ = 0;
}
inline double AccountMoneySummary::common_balance() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.common_balance)
  return common_balance_;
}
inline void AccountMoneySummary::set_common_balance(double value) {
  
  common_balance_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.common_balance)
}

// double prefered_balance = 45;
inline void AccountMoneySummary::clear_prefered_balance() {
  prefered_balance_ = 0;
}
inline double AccountMoneySummary::prefered_balance() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.prefered_balance)
  return prefered_balance_;
}
inline void AccountMoneySummary::set_prefered_balance(double value) {
  
  prefered_balance_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.prefered_balance)
}

// double base_exchange_rate = 46;
inline void AccountMoneySummary::clear_base_exchange_rate() {
  base_exchange_rate_ = 0;
}
inline double AccountMoneySummary::base_exchange_rate() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.base_exchange_rate)
  return base_exchange_rate_;
}
inline void AccountMoneySummary::set_base_exchange_rate(double value) {
  
  base_exchange_rate_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.base_exchange_rate)
}

// double warning_level = 47;
inline void AccountMoneySummary::clear_warning_level() {
  warning_level_ = 0;
}
inline double AccountMoneySummary::warning_level() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.warning_level)
  return warning_level_;
}
inline void AccountMoneySummary::set_warning_level(double value) {
  
  warning_level_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.warning_level)
}

// double force_close_level = 48;
inline void AccountMoneySummary::clear_force_close_level() {
  force_close_level_ = 0;
}
inline double AccountMoneySummary::force_close_level() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.force_close_level)
  return force_close_level_;
}
inline void AccountMoneySummary::set_force_close_level(double value) {
  
  force_close_level_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.force_close_level)
}

// double cleared_closed_profit = 49;
inline void AccountMoneySummary::clear_cleared_closed_profit() {
  cleared_closed_profit_ = 0;
}
inline double AccountMoneySummary::cleared_closed_profit() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.cleared_closed_profit)
  return cleared_closed_profit_;
}
inline void AccountMoneySummary::set_cleared_closed_profit(double value) {
  
  cleared_closed_profit_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.cleared_closed_profit)
}

// string name = 50;
inline void AccountMoneySummary::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountMoneySummary::name() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.name)
  return name_.GetNoArena();
}
inline void AccountMoneySummary::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.name)
}
#if LANG_CXX11
inline void AccountMoneySummary::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AccountMoneySummary.name)
}
#endif
inline void AccountMoneySummary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AccountMoneySummary.name)
}
inline void AccountMoneySummary::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AccountMoneySummary.name)
}
inline ::std::string* AccountMoneySummary::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.AccountMoneySummary.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountMoneySummary::release_name() {
  // @@protoc_insertion_point(field_release:pb.AccountMoneySummary.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountMoneySummary::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.AccountMoneySummary.name)
}

// double interest = 51;
inline void AccountMoneySummary::clear_interest() {
  interest_ = 0;
}
inline double AccountMoneySummary::interest() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.interest)
  return interest_;
}
inline void AccountMoneySummary::set_interest(double value) {
  
  interest_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.interest)
}

// double frozen_interest = 52;
inline void AccountMoneySummary::clear_frozen_interest() {
  frozen_interest_ = 0;
}
inline double AccountMoneySummary::frozen_interest() const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummary.frozen_interest)
  return frozen_interest_;
}
inline void AccountMoneySummary::set_frozen_interest(double value) {
  
  frozen_interest_ = value;
  // @@protoc_insertion_point(field_set:pb.AccountMoneySummary.frozen_interest)
}

// -------------------------------------------------------------------

// AccountMoneySummaryList

// repeated .pb.AccountMoneySummary list = 1;
inline int AccountMoneySummaryList::list_size() const {
  return list_.size();
}
inline void AccountMoneySummaryList::clear_list() {
  list_.Clear();
}
inline ::pb::AccountMoneySummary* AccountMoneySummaryList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.AccountMoneySummaryList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AccountMoneySummary >*
AccountMoneySummaryList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.AccountMoneySummaryList.list)
  return &list_;
}
inline const ::pb::AccountMoneySummary& AccountMoneySummaryList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.AccountMoneySummaryList.list)
  return list_.Get(index);
}
inline ::pb::AccountMoneySummary* AccountMoneySummaryList::add_list() {
  // @@protoc_insertion_point(field_add:pb.AccountMoneySummaryList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AccountMoneySummary >&
AccountMoneySummaryList::list() const {
  // @@protoc_insertion_point(field_list:pb.AccountMoneySummaryList.list)
  return list_;
}

// -------------------------------------------------------------------

// MoneyTransferRecord

// int64 uid = 1;
inline void MoneyTransferRecord::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MoneyTransferRecord::uid() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.uid)
  return uid_;
}
inline void MoneyTransferRecord::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.uid)
}

// int32 direction = 2;
inline void MoneyTransferRecord::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::direction() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.direction)
  return direction_;
}
inline void MoneyTransferRecord::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.direction)
}

// int32 currency_type = 3;
inline void MoneyTransferRecord::clear_currency_type() {
  currency_type_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.currency_type)
  return currency_type_;
}
inline void MoneyTransferRecord::set_currency_type(::google::protobuf::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.currency_type)
}

// int32 settlement_group = 4;
inline void MoneyTransferRecord::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.settlement_group)
  return settlement_group_;
}
inline void MoneyTransferRecord::set_settlement_group(::google::protobuf::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.settlement_group)
}

// int32 confirmed = 5;
inline void MoneyTransferRecord::clear_confirmed() {
  confirmed_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::confirmed() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.confirmed)
  return confirmed_;
}
inline void MoneyTransferRecord::set_confirmed(::google::protobuf::int32 value) {
  
  confirmed_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.confirmed)
}

// int32 is_prefered = 6;
inline void MoneyTransferRecord::clear_is_prefered() {
  is_prefered_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::is_prefered() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.is_prefered)
  return is_prefered_;
}
inline void MoneyTransferRecord::set_is_prefered(::google::protobuf::int32 value) {
  
  is_prefered_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.is_prefered)
}

// double amount = 7;
inline void MoneyTransferRecord::clear_amount() {
  amount_ = 0;
}
inline double MoneyTransferRecord::amount() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.amount)
  return amount_;
}
inline void MoneyTransferRecord::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.amount)
}

// string account_id = 8;
inline void MoneyTransferRecord::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::account_id() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.account_id)
  return account_id_.GetNoArena();
}
inline void MoneyTransferRecord::set_account_id(const ::std::string& value) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.account_id)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_account_id(::std::string&& value) {
  
  account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.account_id)
}
#endif
inline void MoneyTransferRecord::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.account_id)
}
inline void MoneyTransferRecord::set_account_id(const char* value, size_t size) {
  
  account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.account_id)
}
inline ::std::string* MoneyTransferRecord::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.account_id)
  return account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_account_id() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.account_id)
  
  return account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_account_id(::std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.account_id)
}

// string operator_id = 9;
inline void MoneyTransferRecord::clear_operator_id() {
  operator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::operator_id() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.operator_id)
  return operator_id_.GetNoArena();
}
inline void MoneyTransferRecord::set_operator_id(const ::std::string& value) {
  
  operator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.operator_id)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_operator_id(::std::string&& value) {
  
  operator_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.operator_id)
}
#endif
inline void MoneyTransferRecord::set_operator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.operator_id)
}
inline void MoneyTransferRecord::set_operator_id(const char* value, size_t size) {
  
  operator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.operator_id)
}
inline ::std::string* MoneyTransferRecord::mutable_operator_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.operator_id)
  return operator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_operator_id() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.operator_id)
  
  return operator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_operator_id(::std::string* operator_id) {
  if (operator_id != nullptr) {
    
  } else {
    
  }
  operator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_id);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.operator_id)
}

// int32 session_id = 10;
inline void MoneyTransferRecord::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 MoneyTransferRecord::session_id() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.session_id)
  return session_id_;
}
inline void MoneyTransferRecord::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.session_id)
}

// int64 time = 11;
inline void MoneyTransferRecord::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MoneyTransferRecord::time() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.time)
  return time_;
}
inline void MoneyTransferRecord::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.time)
}

// string comment = 12;
inline void MoneyTransferRecord::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::comment() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.comment)
  return comment_.GetNoArena();
}
inline void MoneyTransferRecord::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.comment)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.comment)
}
#endif
inline void MoneyTransferRecord::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.comment)
}
inline void MoneyTransferRecord::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.comment)
}
inline ::std::string* MoneyTransferRecord::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_comment() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.comment)
}

// string bank_trade_id = 13;
inline void MoneyTransferRecord::clear_bank_trade_id() {
  bank_trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::bank_trade_id() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.bank_trade_id)
  return bank_trade_id_.GetNoArena();
}
inline void MoneyTransferRecord::set_bank_trade_id(const ::std::string& value) {
  
  bank_trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.bank_trade_id)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_bank_trade_id(::std::string&& value) {
  
  bank_trade_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.bank_trade_id)
}
#endif
inline void MoneyTransferRecord::set_bank_trade_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.bank_trade_id)
}
inline void MoneyTransferRecord::set_bank_trade_id(const char* value, size_t size) {
  
  bank_trade_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.bank_trade_id)
}
inline ::std::string* MoneyTransferRecord::mutable_bank_trade_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.bank_trade_id)
  return bank_trade_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_bank_trade_id() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.bank_trade_id)
  
  return bank_trade_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_bank_trade_id(::std::string* bank_trade_id) {
  if (bank_trade_id != nullptr) {
    
  } else {
    
  }
  bank_trade_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_trade_id);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.bank_trade_id)
}

// int64 payment_config_id = 14;
inline void MoneyTransferRecord::clear_payment_config_id() {
  payment_config_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MoneyTransferRecord::payment_config_id() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.payment_config_id)
  return payment_config_id_;
}
inline void MoneyTransferRecord::set_payment_config_id(::google::protobuf::int64 value) {
  
  payment_config_id_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.payment_config_id)
}

// double original_amount = 15;
inline void MoneyTransferRecord::clear_original_amount() {
  original_amount_ = 0;
}
inline double MoneyTransferRecord::original_amount() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.original_amount)
  return original_amount_;
}
inline void MoneyTransferRecord::set_original_amount(double value) {
  
  original_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.original_amount)
}

// double fee = 16;
inline void MoneyTransferRecord::clear_fee() {
  fee_ = 0;
}
inline double MoneyTransferRecord::fee() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.fee)
  return fee_;
}
inline void MoneyTransferRecord::set_fee(double value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.fee)
}

// string payment_path = 17;
inline void MoneyTransferRecord::clear_payment_path() {
  payment_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::payment_path() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.payment_path)
  return payment_path_.GetNoArena();
}
inline void MoneyTransferRecord::set_payment_path(const ::std::string& value) {
  
  payment_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.payment_path)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_payment_path(::std::string&& value) {
  
  payment_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.payment_path)
}
#endif
inline void MoneyTransferRecord::set_payment_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.payment_path)
}
inline void MoneyTransferRecord::set_payment_path(const char* value, size_t size) {
  
  payment_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.payment_path)
}
inline ::std::string* MoneyTransferRecord::mutable_payment_path() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.payment_path)
  return payment_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_payment_path() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.payment_path)
  
  return payment_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_payment_path(::std::string* payment_path) {
  if (payment_path != nullptr) {
    
  } else {
    
  }
  payment_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payment_path);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.payment_path)
}

// string identity_number = 18;
inline void MoneyTransferRecord::clear_identity_number() {
  identity_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::identity_number() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.identity_number)
  return identity_number_.GetNoArena();
}
inline void MoneyTransferRecord::set_identity_number(const ::std::string& value) {
  
  identity_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.identity_number)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_identity_number(::std::string&& value) {
  
  identity_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.identity_number)
}
#endif
inline void MoneyTransferRecord::set_identity_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.identity_number)
}
inline void MoneyTransferRecord::set_identity_number(const char* value, size_t size) {
  
  identity_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.identity_number)
}
inline ::std::string* MoneyTransferRecord::mutable_identity_number() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.identity_number)
  return identity_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_identity_number() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.identity_number)
  
  return identity_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_identity_number(::std::string* identity_number) {
  if (identity_number != nullptr) {
    
  } else {
    
  }
  identity_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity_number);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.identity_number)
}

// string phone_number = 19;
inline void MoneyTransferRecord::clear_phone_number() {
  phone_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::phone_number() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.phone_number)
  return phone_number_.GetNoArena();
}
inline void MoneyTransferRecord::set_phone_number(const ::std::string& value) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.phone_number)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_phone_number(::std::string&& value) {
  
  phone_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.phone_number)
}
#endif
inline void MoneyTransferRecord::set_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.phone_number)
}
inline void MoneyTransferRecord::set_phone_number(const char* value, size_t size) {
  
  phone_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.phone_number)
}
inline ::std::string* MoneyTransferRecord::mutable_phone_number() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.phone_number)
  return phone_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_phone_number() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.phone_number)
  
  return phone_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_phone_number(::std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  phone_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_number);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.phone_number)
}

// string bank_name = 20;
inline void MoneyTransferRecord::clear_bank_name() {
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::bank_name() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.bank_name)
  return bank_name_.GetNoArena();
}
inline void MoneyTransferRecord::set_bank_name(const ::std::string& value) {
  
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.bank_name)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_bank_name(::std::string&& value) {
  
  bank_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.bank_name)
}
#endif
inline void MoneyTransferRecord::set_bank_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.bank_name)
}
inline void MoneyTransferRecord::set_bank_name(const char* value, size_t size) {
  
  bank_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.bank_name)
}
inline ::std::string* MoneyTransferRecord::mutable_bank_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.bank_name)
  return bank_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_bank_name() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.bank_name)
  
  return bank_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_bank_name(::std::string* bank_name) {
  if (bank_name != nullptr) {
    
  } else {
    
  }
  bank_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_name);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.bank_name)
}

// string bank_branch_name = 21;
inline void MoneyTransferRecord::clear_bank_branch_name() {
  bank_branch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::bank_branch_name() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.bank_branch_name)
  return bank_branch_name_.GetNoArena();
}
inline void MoneyTransferRecord::set_bank_branch_name(const ::std::string& value) {
  
  bank_branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.bank_branch_name)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_bank_branch_name(::std::string&& value) {
  
  bank_branch_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.bank_branch_name)
}
#endif
inline void MoneyTransferRecord::set_bank_branch_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.bank_branch_name)
}
inline void MoneyTransferRecord::set_bank_branch_name(const char* value, size_t size) {
  
  bank_branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.bank_branch_name)
}
inline ::std::string* MoneyTransferRecord::mutable_bank_branch_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.bank_branch_name)
  return bank_branch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_bank_branch_name() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.bank_branch_name)
  
  return bank_branch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_bank_branch_name(::std::string* bank_branch_name) {
  if (bank_branch_name != nullptr) {
    
  } else {
    
  }
  bank_branch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_branch_name);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.bank_branch_name)
}

// string bank_card_no = 22;
inline void MoneyTransferRecord::clear_bank_card_no() {
  bank_card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::bank_card_no() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.bank_card_no)
  return bank_card_no_.GetNoArena();
}
inline void MoneyTransferRecord::set_bank_card_no(const ::std::string& value) {
  
  bank_card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.bank_card_no)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_bank_card_no(::std::string&& value) {
  
  bank_card_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.bank_card_no)
}
#endif
inline void MoneyTransferRecord::set_bank_card_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bank_card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.bank_card_no)
}
inline void MoneyTransferRecord::set_bank_card_no(const char* value, size_t size) {
  
  bank_card_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.bank_card_no)
}
inline ::std::string* MoneyTransferRecord::mutable_bank_card_no() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.bank_card_no)
  return bank_card_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_bank_card_no() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.bank_card_no)
  
  return bank_card_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_bank_card_no(::std::string* bank_card_no) {
  if (bank_card_no != nullptr) {
    
  } else {
    
  }
  bank_card_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bank_card_no);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.bank_card_no)
}

// string province = 23;
inline void MoneyTransferRecord::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::province() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.province)
  return province_.GetNoArena();
}
inline void MoneyTransferRecord::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.province)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.province)
}
#endif
inline void MoneyTransferRecord::set_province(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.province)
}
inline void MoneyTransferRecord::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.province)
}
inline ::std::string* MoneyTransferRecord::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_province() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_province(::std::string* province) {
  if (province != nullptr) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.province)
}

// string city = 24;
inline void MoneyTransferRecord::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::city() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.city)
  return city_.GetNoArena();
}
inline void MoneyTransferRecord::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.city)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.city)
}
#endif
inline void MoneyTransferRecord::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.city)
}
inline void MoneyTransferRecord::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.city)
}
inline ::std::string* MoneyTransferRecord::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_city() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_city(::std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.city)
}

// string pay_type = 25;
inline void MoneyTransferRecord::clear_pay_type() {
  pay_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::pay_type() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.pay_type)
  return pay_type_.GetNoArena();
}
inline void MoneyTransferRecord::set_pay_type(const ::std::string& value) {
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.pay_type)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_pay_type(::std::string&& value) {
  
  pay_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.pay_type)
}
#endif
inline void MoneyTransferRecord::set_pay_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.pay_type)
}
inline void MoneyTransferRecord::set_pay_type(const char* value, size_t size) {
  
  pay_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.pay_type)
}
inline ::std::string* MoneyTransferRecord::mutable_pay_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.pay_type)
  return pay_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_pay_type() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.pay_type)
  
  return pay_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_pay_type(::std::string* pay_type) {
  if (pay_type != nullptr) {
    
  } else {
    
  }
  pay_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pay_type);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.pay_type)
}

// int64 payed_time = 26;
inline void MoneyTransferRecord::clear_payed_time() {
  payed_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MoneyTransferRecord::payed_time() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.payed_time)
  return payed_time_;
}
inline void MoneyTransferRecord::set_payed_time(::google::protobuf::int64 value) {
  
  payed_time_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.payed_time)
}

// int64 confirmed_time = 27;
inline void MoneyTransferRecord::clear_confirmed_time() {
  confirmed_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MoneyTransferRecord::confirmed_time() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.confirmed_time)
  return confirmed_time_;
}
inline void MoneyTransferRecord::set_confirmed_time(::google::protobuf::int64 value) {
  
  confirmed_time_ = value;
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.confirmed_time)
}

// string name = 28;
inline void MoneyTransferRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MoneyTransferRecord::name() const {
  // @@protoc_insertion_point(field_get:pb.MoneyTransferRecord.name)
  return name_.GetNoArena();
}
inline void MoneyTransferRecord::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.MoneyTransferRecord.name)
}
#if LANG_CXX11
inline void MoneyTransferRecord::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.MoneyTransferRecord.name)
}
#endif
inline void MoneyTransferRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.MoneyTransferRecord.name)
}
inline void MoneyTransferRecord::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.MoneyTransferRecord.name)
}
inline ::std::string* MoneyTransferRecord::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.MoneyTransferRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MoneyTransferRecord::release_name() {
  // @@protoc_insertion_point(field_release:pb.MoneyTransferRecord.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MoneyTransferRecord::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.MoneyTransferRecord.name)
}

// -------------------------------------------------------------------

// MTRList

// repeated .pb.MoneyTransferRecord list = 1;
inline int MTRList::list_size() const {
  return list_.size();
}
inline void MTRList::clear_list() {
  list_.Clear();
}
inline ::pb::MoneyTransferRecord* MTRList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.MTRList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MoneyTransferRecord >*
MTRList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.MTRList.list)
  return &list_;
}
inline const ::pb::MoneyTransferRecord& MTRList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.MTRList.list)
  return list_.Get(index);
}
inline ::pb::MoneyTransferRecord* MTRList::add_list() {
  // @@protoc_insertion_point(field_add:pb.MTRList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MoneyTransferRecord >&
MTRList::list() const {
  // @@protoc_insertion_point(field_list:pb.MTRList.list)
  return list_;
}

// -------------------------------------------------------------------

// SSEStockOption

// string exercise_price = 1;
inline void SSEStockOption::clear_exercise_price() {
  exercise_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::exercise_price() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.exercise_price)
  return exercise_price_.GetNoArena();
}
inline void SSEStockOption::set_exercise_price(const ::std::string& value) {
  
  exercise_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.exercise_price)
}
#if LANG_CXX11
inline void SSEStockOption::set_exercise_price(::std::string&& value) {
  
  exercise_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.exercise_price)
}
#endif
inline void SSEStockOption::set_exercise_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exercise_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.exercise_price)
}
inline void SSEStockOption::set_exercise_price(const char* value, size_t size) {
  
  exercise_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.exercise_price)
}
inline ::std::string* SSEStockOption::mutable_exercise_price() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.exercise_price)
  return exercise_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_exercise_price() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.exercise_price)
  
  return exercise_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_exercise_price(::std::string* exercise_price) {
  if (exercise_price != nullptr) {
    
  } else {
    
  }
  exercise_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exercise_price);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.exercise_price)
}

// string update_version = 2;
inline void SSEStockOption::clear_update_version() {
  update_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::update_version() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.update_version)
  return update_version_.GetNoArena();
}
inline void SSEStockOption::set_update_version(const ::std::string& value) {
  
  update_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.update_version)
}
#if LANG_CXX11
inline void SSEStockOption::set_update_version(::std::string&& value) {
  
  update_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.update_version)
}
#endif
inline void SSEStockOption::set_update_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.update_version)
}
inline void SSEStockOption::set_update_version(const char* value, size_t size) {
  
  update_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.update_version)
}
inline ::std::string* SSEStockOption::mutable_update_version() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.update_version)
  return update_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_update_version() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.update_version)
  
  return update_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_update_version(::std::string* update_version) {
  if (update_version != nullptr) {
    
  } else {
    
  }
  update_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_version);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.update_version)
}

// string option_type = 3;
inline void SSEStockOption::clear_option_type() {
  option_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::option_type() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.option_type)
  return option_type_.GetNoArena();
}
inline void SSEStockOption::set_option_type(const ::std::string& value) {
  
  option_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.option_type)
}
#if LANG_CXX11
inline void SSEStockOption::set_option_type(::std::string&& value) {
  
  option_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.option_type)
}
#endif
inline void SSEStockOption::set_option_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  option_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.option_type)
}
inline void SSEStockOption::set_option_type(const char* value, size_t size) {
  
  option_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.option_type)
}
inline ::std::string* SSEStockOption::mutable_option_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.option_type)
  return option_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_option_type() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.option_type)
  
  return option_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_option_type(::std::string* option_type) {
  if (option_type != nullptr) {
    
  } else {
    
  }
  option_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), option_type);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.option_type)
}

// string daily_price_up_limit = 4;
inline void SSEStockOption::clear_daily_price_up_limit() {
  daily_price_up_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::daily_price_up_limit() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.daily_price_up_limit)
  return daily_price_up_limit_.GetNoArena();
}
inline void SSEStockOption::set_daily_price_up_limit(const ::std::string& value) {
  
  daily_price_up_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.daily_price_up_limit)
}
#if LANG_CXX11
inline void SSEStockOption::set_daily_price_up_limit(::std::string&& value) {
  
  daily_price_up_limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.daily_price_up_limit)
}
#endif
inline void SSEStockOption::set_daily_price_up_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  daily_price_up_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.daily_price_up_limit)
}
inline void SSEStockOption::set_daily_price_up_limit(const char* value, size_t size) {
  
  daily_price_up_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.daily_price_up_limit)
}
inline ::std::string* SSEStockOption::mutable_daily_price_up_limit() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.daily_price_up_limit)
  return daily_price_up_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_daily_price_up_limit() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.daily_price_up_limit)
  
  return daily_price_up_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_daily_price_up_limit(::std::string* daily_price_up_limit) {
  if (daily_price_up_limit != nullptr) {
    
  } else {
    
  }
  daily_price_up_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), daily_price_up_limit);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.daily_price_up_limit)
}

// string time_save = 5;
inline void SSEStockOption::clear_time_save() {
  time_save_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::time_save() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.time_save)
  return time_save_.GetNoArena();
}
inline void SSEStockOption::set_time_save(const ::std::string& value) {
  
  time_save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.time_save)
}
#if LANG_CXX11
inline void SSEStockOption::set_time_save(::std::string&& value) {
  
  time_save_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.time_save)
}
#endif
inline void SSEStockOption::set_time_save(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.time_save)
}
inline void SSEStockOption::set_time_save(const char* value, size_t size) {
  
  time_save_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.time_save)
}
inline ::std::string* SSEStockOption::mutable_time_save() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.time_save)
  return time_save_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_time_save() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.time_save)
  
  return time_save_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_time_save(::std::string* time_save) {
  if (time_save != nullptr) {
    
  } else {
    
  }
  time_save_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_save);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.time_save)
}

// string DELIST_Flag = 6;
inline void SSEStockOption::clear_delist_flag() {
  delist_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::delist_flag() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.DELIST_Flag)
  return delist_flag_.GetNoArena();
}
inline void SSEStockOption::set_delist_flag(const ::std::string& value) {
  
  delist_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.DELIST_Flag)
}
#if LANG_CXX11
inline void SSEStockOption::set_delist_flag(::std::string&& value) {
  
  delist_flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.DELIST_Flag)
}
#endif
inline void SSEStockOption::set_delist_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delist_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.DELIST_Flag)
}
inline void SSEStockOption::set_delist_flag(const char* value, size_t size) {
  
  delist_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.DELIST_Flag)
}
inline ::std::string* SSEStockOption::mutable_delist_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.DELIST_Flag)
  return delist_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_delist_flag() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.DELIST_Flag)
  
  return delist_flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_delist_flag(::std::string* delist_flag) {
  if (delist_flag != nullptr) {
    
  } else {
    
  }
  delist_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delist_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.DELIST_Flag)
}

// string start_date = 7;
inline void SSEStockOption::clear_start_date() {
  start_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::start_date() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.start_date)
  return start_date_.GetNoArena();
}
inline void SSEStockOption::set_start_date(const ::std::string& value) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.start_date)
}
#if LANG_CXX11
inline void SSEStockOption::set_start_date(::std::string&& value) {
  
  start_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.start_date)
}
#endif
inline void SSEStockOption::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.start_date)
}
inline void SSEStockOption::set_start_date(const char* value, size_t size) {
  
  start_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.start_date)
}
inline ::std::string* SSEStockOption::mutable_start_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.start_date)
  return start_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_start_date() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.start_date)
  
  return start_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_start_date(::std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_date);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.start_date)
}

// string expire_date = 8;
inline void SSEStockOption::clear_expire_date() {
  expire_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::expire_date() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.expire_date)
  return expire_date_.GetNoArena();
}
inline void SSEStockOption::set_expire_date(const ::std::string& value) {
  
  expire_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.expire_date)
}
#if LANG_CXX11
inline void SSEStockOption::set_expire_date(::std::string&& value) {
  
  expire_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.expire_date)
}
#endif
inline void SSEStockOption::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.expire_date)
}
inline void SSEStockOption::set_expire_date(const char* value, size_t size) {
  
  expire_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.expire_date)
}
inline ::std::string* SSEStockOption::mutable_expire_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.expire_date)
  return expire_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_expire_date() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.expire_date)
  
  return expire_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_expire_date(::std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire_date);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.expire_date)
}

// string contract_unit = 9;
inline void SSEStockOption::clear_contract_unit() {
  contract_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::contract_unit() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.contract_unit)
  return contract_unit_.GetNoArena();
}
inline void SSEStockOption::set_contract_unit(const ::std::string& value) {
  
  contract_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.contract_unit)
}
#if LANG_CXX11
inline void SSEStockOption::set_contract_unit(::std::string&& value) {
  
  contract_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.contract_unit)
}
#endif
inline void SSEStockOption::set_contract_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.contract_unit)
}
inline void SSEStockOption::set_contract_unit(const char* value, size_t size) {
  
  contract_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.contract_unit)
}
inline ::std::string* SSEStockOption::mutable_contract_unit() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.contract_unit)
  return contract_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_contract_unit() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.contract_unit)
  
  return contract_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_contract_unit(::std::string* contract_unit) {
  if (contract_unit != nullptr) {
    
  } else {
    
  }
  contract_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_unit);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.contract_unit)
}

// string call_or_put = 10;
inline void SSEStockOption::clear_call_or_put() {
  call_or_put_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::call_or_put() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.call_or_put)
  return call_or_put_.GetNoArena();
}
inline void SSEStockOption::set_call_or_put(const ::std::string& value) {
  
  call_or_put_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.call_or_put)
}
#if LANG_CXX11
inline void SSEStockOption::set_call_or_put(::std::string&& value) {
  
  call_or_put_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.call_or_put)
}
#endif
inline void SSEStockOption::set_call_or_put(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  call_or_put_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.call_or_put)
}
inline void SSEStockOption::set_call_or_put(const char* value, size_t size) {
  
  call_or_put_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.call_or_put)
}
inline ::std::string* SSEStockOption::mutable_call_or_put() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.call_or_put)
  return call_or_put_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_call_or_put() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.call_or_put)
  
  return call_or_put_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_call_or_put(::std::string* call_or_put) {
  if (call_or_put != nullptr) {
    
  } else {
    
  }
  call_or_put_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_or_put);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.call_or_put)
}

// string lmt_ord_max_floor = 11;
inline void SSEStockOption::clear_lmt_ord_max_floor() {
  lmt_ord_max_floor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::lmt_ord_max_floor() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.lmt_ord_max_floor)
  return lmt_ord_max_floor_.GetNoArena();
}
inline void SSEStockOption::set_lmt_ord_max_floor(const ::std::string& value) {
  
  lmt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.lmt_ord_max_floor)
}
#if LANG_CXX11
inline void SSEStockOption::set_lmt_ord_max_floor(::std::string&& value) {
  
  lmt_ord_max_floor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.lmt_ord_max_floor)
}
#endif
inline void SSEStockOption::set_lmt_ord_max_floor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lmt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.lmt_ord_max_floor)
}
inline void SSEStockOption::set_lmt_ord_max_floor(const char* value, size_t size) {
  
  lmt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.lmt_ord_max_floor)
}
inline ::std::string* SSEStockOption::mutable_lmt_ord_max_floor() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.lmt_ord_max_floor)
  return lmt_ord_max_floor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_lmt_ord_max_floor() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.lmt_ord_max_floor)
  
  return lmt_ord_max_floor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_lmt_ord_max_floor(::std::string* lmt_ord_max_floor) {
  if (lmt_ord_max_floor != nullptr) {
    
  } else {
    
  }
  lmt_ord_max_floor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lmt_ord_max_floor);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.lmt_ord_max_floor)
}

// string delivery_date = 12;
inline void SSEStockOption::clear_delivery_date() {
  delivery_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::delivery_date() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.delivery_date)
  return delivery_date_.GetNoArena();
}
inline void SSEStockOption::set_delivery_date(const ::std::string& value) {
  
  delivery_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.delivery_date)
}
#if LANG_CXX11
inline void SSEStockOption::set_delivery_date(::std::string&& value) {
  
  delivery_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.delivery_date)
}
#endif
inline void SSEStockOption::set_delivery_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delivery_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.delivery_date)
}
inline void SSEStockOption::set_delivery_date(const char* value, size_t size) {
  
  delivery_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.delivery_date)
}
inline ::std::string* SSEStockOption::mutable_delivery_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.delivery_date)
  return delivery_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_delivery_date() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.delivery_date)
  
  return delivery_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_delivery_date(::std::string* delivery_date) {
  if (delivery_date != nullptr) {
    
  } else {
    
  }
  delivery_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delivery_date);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.delivery_date)
}

// string change_flag = 13;
inline void SSEStockOption::clear_change_flag() {
  change_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::change_flag() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.change_flag)
  return change_flag_.GetNoArena();
}
inline void SSEStockOption::set_change_flag(const ::std::string& value) {
  
  change_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.change_flag)
}
#if LANG_CXX11
inline void SSEStockOption::set_change_flag(::std::string&& value) {
  
  change_flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.change_flag)
}
#endif
inline void SSEStockOption::set_change_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  change_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.change_flag)
}
inline void SSEStockOption::set_change_flag(const char* value, size_t size) {
  
  change_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.change_flag)
}
inline ::std::string* SSEStockOption::mutable_change_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.change_flag)
  return change_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_change_flag() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.change_flag)
  
  return change_flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_change_flag(::std::string* change_flag) {
  if (change_flag != nullptr) {
    
  } else {
    
  }
  change_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), change_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.change_flag)
}

// string mkt_ord_max_floor = 14;
inline void SSEStockOption::clear_mkt_ord_max_floor() {
  mkt_ord_max_floor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::mkt_ord_max_floor() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.mkt_ord_max_floor)
  return mkt_ord_max_floor_.GetNoArena();
}
inline void SSEStockOption::set_mkt_ord_max_floor(const ::std::string& value) {
  
  mkt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.mkt_ord_max_floor)
}
#if LANG_CXX11
inline void SSEStockOption::set_mkt_ord_max_floor(::std::string&& value) {
  
  mkt_ord_max_floor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.mkt_ord_max_floor)
}
#endif
inline void SSEStockOption::set_mkt_ord_max_floor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mkt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.mkt_ord_max_floor)
}
inline void SSEStockOption::set_mkt_ord_max_floor(const char* value, size_t size) {
  
  mkt_ord_max_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.mkt_ord_max_floor)
}
inline ::std::string* SSEStockOption::mutable_mkt_ord_max_floor() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.mkt_ord_max_floor)
  return mkt_ord_max_floor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_mkt_ord_max_floor() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.mkt_ord_max_floor)
  
  return mkt_ord_max_floor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_mkt_ord_max_floor(::std::string* mkt_ord_max_floor) {
  if (mkt_ord_max_floor != nullptr) {
    
  } else {
    
  }
  mkt_ord_max_floor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mkt_ord_max_floor);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.mkt_ord_max_floor)
}

// string underlying_type = 15;
inline void SSEStockOption::clear_underlying_type() {
  underlying_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::underlying_type() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.underlying_type)
  return underlying_type_.GetNoArena();
}
inline void SSEStockOption::set_underlying_type(const ::std::string& value) {
  
  underlying_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.underlying_type)
}
#if LANG_CXX11
inline void SSEStockOption::set_underlying_type(::std::string&& value) {
  
  underlying_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.underlying_type)
}
#endif
inline void SSEStockOption::set_underlying_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  underlying_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.underlying_type)
}
inline void SSEStockOption::set_underlying_type(const char* value, size_t size) {
  
  underlying_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.underlying_type)
}
inline ::std::string* SSEStockOption::mutable_underlying_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.underlying_type)
  return underlying_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_underlying_type() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.underlying_type)
  
  return underlying_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_underlying_type(::std::string* underlying_type) {
  if (underlying_type != nullptr) {
    
  } else {
    
  }
  underlying_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_type);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.underlying_type)
}

// string daily_price_down_limit = 16;
inline void SSEStockOption::clear_daily_price_down_limit() {
  daily_price_down_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::daily_price_down_limit() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.daily_price_down_limit)
  return daily_price_down_limit_.GetNoArena();
}
inline void SSEStockOption::set_daily_price_down_limit(const ::std::string& value) {
  
  daily_price_down_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.daily_price_down_limit)
}
#if LANG_CXX11
inline void SSEStockOption::set_daily_price_down_limit(::std::string&& value) {
  
  daily_price_down_limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.daily_price_down_limit)
}
#endif
inline void SSEStockOption::set_daily_price_down_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  daily_price_down_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.daily_price_down_limit)
}
inline void SSEStockOption::set_daily_price_down_limit(const char* value, size_t size) {
  
  daily_price_down_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.daily_price_down_limit)
}
inline ::std::string* SSEStockOption::mutable_daily_price_down_limit() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.daily_price_down_limit)
  return daily_price_down_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_daily_price_down_limit() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.daily_price_down_limit)
  
  return daily_price_down_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_daily_price_down_limit(::std::string* daily_price_down_limit) {
  if (daily_price_down_limit != nullptr) {
    
  } else {
    
  }
  daily_price_down_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), daily_price_down_limit);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.daily_price_down_limit)
}

// string round_lot = 17;
inline void SSEStockOption::clear_round_lot() {
  round_lot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::round_lot() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.round_lot)
  return round_lot_.GetNoArena();
}
inline void SSEStockOption::set_round_lot(const ::std::string& value) {
  
  round_lot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.round_lot)
}
#if LANG_CXX11
inline void SSEStockOption::set_round_lot(::std::string&& value) {
  
  round_lot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.round_lot)
}
#endif
inline void SSEStockOption::set_round_lot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  round_lot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.round_lot)
}
inline void SSEStockOption::set_round_lot(const char* value, size_t size) {
  
  round_lot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.round_lot)
}
inline ::std::string* SSEStockOption::mutable_round_lot() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.round_lot)
  return round_lot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_round_lot() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.round_lot)
  
  return round_lot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_round_lot(::std::string* round_lot) {
  if (round_lot != nullptr) {
    
  } else {
    
  }
  round_lot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), round_lot);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.round_lot)
}

// string security_closePX = 18;
inline void SSEStockOption::clear_security_closepx() {
  security_closepx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::security_closepx() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.security_closePX)
  return security_closepx_.GetNoArena();
}
inline void SSEStockOption::set_security_closepx(const ::std::string& value) {
  
  security_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.security_closePX)
}
#if LANG_CXX11
inline void SSEStockOption::set_security_closepx(::std::string&& value) {
  
  security_closepx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.security_closePX)
}
#endif
inline void SSEStockOption::set_security_closepx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.security_closePX)
}
inline void SSEStockOption::set_security_closepx(const char* value, size_t size) {
  
  security_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.security_closePX)
}
inline ::std::string* SSEStockOption::mutable_security_closepx() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.security_closePX)
  return security_closepx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_security_closepx() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.security_closePX)
  
  return security_closepx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_security_closepx(::std::string* security_closepx) {
  if (security_closepx != nullptr) {
    
  } else {
    
  }
  security_closepx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_closepx);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.security_closePX)
}

// string settl_price = 19;
inline void SSEStockOption::clear_settl_price() {
  settl_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::settl_price() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.settl_price)
  return settl_price_.GetNoArena();
}
inline void SSEStockOption::set_settl_price(const ::std::string& value) {
  
  settl_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.settl_price)
}
#if LANG_CXX11
inline void SSEStockOption::set_settl_price(::std::string&& value) {
  
  settl_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.settl_price)
}
#endif
inline void SSEStockOption::set_settl_price(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  settl_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.settl_price)
}
inline void SSEStockOption::set_settl_price(const char* value, size_t size) {
  
  settl_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.settl_price)
}
inline ::std::string* SSEStockOption::mutable_settl_price() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.settl_price)
  return settl_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_settl_price() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.settl_price)
  
  return settl_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_settl_price(::std::string* settl_price) {
  if (settl_price != nullptr) {
    
  } else {
    
  }
  settl_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), settl_price);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.settl_price)
}

// string contract_symbol = 20;
inline void SSEStockOption::clear_contract_symbol() {
  contract_symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::contract_symbol() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.contract_symbol)
  return contract_symbol_.GetNoArena();
}
inline void SSEStockOption::set_contract_symbol(const ::std::string& value) {
  
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.contract_symbol)
}
#if LANG_CXX11
inline void SSEStockOption::set_contract_symbol(::std::string&& value) {
  
  contract_symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.contract_symbol)
}
#endif
inline void SSEStockOption::set_contract_symbol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.contract_symbol)
}
inline void SSEStockOption::set_contract_symbol(const char* value, size_t size) {
  
  contract_symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.contract_symbol)
}
inline ::std::string* SSEStockOption::mutable_contract_symbol() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.contract_symbol)
  return contract_symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_contract_symbol() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.contract_symbol)
  
  return contract_symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_contract_symbol(::std::string* contract_symbol) {
  if (contract_symbol != nullptr) {
    
  } else {
    
  }
  contract_symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_symbol);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.contract_symbol)
}

// string num = 21;
inline void SSEStockOption::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::num() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.num)
  return num_.GetNoArena();
}
inline void SSEStockOption::set_num(const ::std::string& value) {
  
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.num)
}
#if LANG_CXX11
inline void SSEStockOption::set_num(::std::string&& value) {
  
  num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.num)
}
#endif
inline void SSEStockOption::set_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.num)
}
inline void SSEStockOption::set_num(const char* value, size_t size) {
  
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.num)
}
inline ::std::string* SSEStockOption::mutable_num() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_num() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.num)
  
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_num(::std::string* num) {
  if (num != nullptr) {
    
  } else {
    
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.num)
}

// string contractID = 22;
inline void SSEStockOption::clear_contractid() {
  contractid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::contractid() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.contractID)
  return contractid_.GetNoArena();
}
inline void SSEStockOption::set_contractid(const ::std::string& value) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.contractID)
}
#if LANG_CXX11
inline void SSEStockOption::set_contractid(::std::string&& value) {
  
  contractid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.contractID)
}
#endif
inline void SSEStockOption::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.contractID)
}
inline void SSEStockOption::set_contractid(const char* value, size_t size) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.contractID)
}
inline ::std::string* SSEStockOption::mutable_contractid() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.contractID)
  return contractid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_contractid() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.contractID)
  
  return contractid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_contractid(::std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractid);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.contractID)
}

// string margin_ratio_param1 = 23;
inline void SSEStockOption::clear_margin_ratio_param1() {
  margin_ratio_param1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::margin_ratio_param1() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.margin_ratio_param1)
  return margin_ratio_param1_.GetNoArena();
}
inline void SSEStockOption::set_margin_ratio_param1(const ::std::string& value) {
  
  margin_ratio_param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.margin_ratio_param1)
}
#if LANG_CXX11
inline void SSEStockOption::set_margin_ratio_param1(::std::string&& value) {
  
  margin_ratio_param1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.margin_ratio_param1)
}
#endif
inline void SSEStockOption::set_margin_ratio_param1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  margin_ratio_param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.margin_ratio_param1)
}
inline void SSEStockOption::set_margin_ratio_param1(const char* value, size_t size) {
  
  margin_ratio_param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.margin_ratio_param1)
}
inline ::std::string* SSEStockOption::mutable_margin_ratio_param1() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.margin_ratio_param1)
  return margin_ratio_param1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_margin_ratio_param1() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.margin_ratio_param1)
  
  return margin_ratio_param1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_margin_ratio_param1(::std::string* margin_ratio_param1) {
  if (margin_ratio_param1 != nullptr) {
    
  } else {
    
  }
  margin_ratio_param1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), margin_ratio_param1);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.margin_ratio_param1)
}

// string margin_ratio_param2 = 24;
inline void SSEStockOption::clear_margin_ratio_param2() {
  margin_ratio_param2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::margin_ratio_param2() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.margin_ratio_param2)
  return margin_ratio_param2_.GetNoArena();
}
inline void SSEStockOption::set_margin_ratio_param2(const ::std::string& value) {
  
  margin_ratio_param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.margin_ratio_param2)
}
#if LANG_CXX11
inline void SSEStockOption::set_margin_ratio_param2(::std::string&& value) {
  
  margin_ratio_param2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.margin_ratio_param2)
}
#endif
inline void SSEStockOption::set_margin_ratio_param2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  margin_ratio_param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.margin_ratio_param2)
}
inline void SSEStockOption::set_margin_ratio_param2(const char* value, size_t size) {
  
  margin_ratio_param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.margin_ratio_param2)
}
inline ::std::string* SSEStockOption::mutable_margin_ratio_param2() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.margin_ratio_param2)
  return margin_ratio_param2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_margin_ratio_param2() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.margin_ratio_param2)
  
  return margin_ratio_param2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_margin_ratio_param2(::std::string* margin_ratio_param2) {
  if (margin_ratio_param2 != nullptr) {
    
  } else {
    
  }
  margin_ratio_param2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), margin_ratio_param2);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.margin_ratio_param2)
}

// string lmt_ord_min_floor = 25;
inline void SSEStockOption::clear_lmt_ord_min_floor() {
  lmt_ord_min_floor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::lmt_ord_min_floor() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.lmt_ord_min_floor)
  return lmt_ord_min_floor_.GetNoArena();
}
inline void SSEStockOption::set_lmt_ord_min_floor(const ::std::string& value) {
  
  lmt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.lmt_ord_min_floor)
}
#if LANG_CXX11
inline void SSEStockOption::set_lmt_ord_min_floor(::std::string&& value) {
  
  lmt_ord_min_floor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.lmt_ord_min_floor)
}
#endif
inline void SSEStockOption::set_lmt_ord_min_floor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lmt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.lmt_ord_min_floor)
}
inline void SSEStockOption::set_lmt_ord_min_floor(const char* value, size_t size) {
  
  lmt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.lmt_ord_min_floor)
}
inline ::std::string* SSEStockOption::mutable_lmt_ord_min_floor() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.lmt_ord_min_floor)
  return lmt_ord_min_floor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_lmt_ord_min_floor() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.lmt_ord_min_floor)
  
  return lmt_ord_min_floor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_lmt_ord_min_floor(::std::string* lmt_ord_min_floor) {
  if (lmt_ord_min_floor != nullptr) {
    
  } else {
    
  }
  lmt_ord_min_floor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lmt_ord_min_floor);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.lmt_ord_min_floor)
}

// string mkt_ord_min_floor = 26;
inline void SSEStockOption::clear_mkt_ord_min_floor() {
  mkt_ord_min_floor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::mkt_ord_min_floor() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.mkt_ord_min_floor)
  return mkt_ord_min_floor_.GetNoArena();
}
inline void SSEStockOption::set_mkt_ord_min_floor(const ::std::string& value) {
  
  mkt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.mkt_ord_min_floor)
}
#if LANG_CXX11
inline void SSEStockOption::set_mkt_ord_min_floor(::std::string&& value) {
  
  mkt_ord_min_floor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.mkt_ord_min_floor)
}
#endif
inline void SSEStockOption::set_mkt_ord_min_floor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mkt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.mkt_ord_min_floor)
}
inline void SSEStockOption::set_mkt_ord_min_floor(const char* value, size_t size) {
  
  mkt_ord_min_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.mkt_ord_min_floor)
}
inline ::std::string* SSEStockOption::mutable_mkt_ord_min_floor() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.mkt_ord_min_floor)
  return mkt_ord_min_floor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_mkt_ord_min_floor() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.mkt_ord_min_floor)
  
  return mkt_ord_min_floor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_mkt_ord_min_floor(::std::string* mkt_ord_min_floor) {
  if (mkt_ord_min_floor != nullptr) {
    
  } else {
    
  }
  mkt_ord_min_floor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mkt_ord_min_floor);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.mkt_ord_min_floor)
}

// string end_date = 27;
inline void SSEStockOption::clear_end_date() {
  end_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::end_date() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.end_date)
  return end_date_.GetNoArena();
}
inline void SSEStockOption::set_end_date(const ::std::string& value) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.end_date)
}
#if LANG_CXX11
inline void SSEStockOption::set_end_date(::std::string&& value) {
  
  end_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.end_date)
}
#endif
inline void SSEStockOption::set_end_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.end_date)
}
inline void SSEStockOption::set_end_date(const char* value, size_t size) {
  
  end_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.end_date)
}
inline ::std::string* SSEStockOption::mutable_end_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.end_date)
  return end_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_end_date() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.end_date)
  
  return end_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_end_date(::std::string* end_date) {
  if (end_date != nullptr) {
    
  } else {
    
  }
  end_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_date);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.end_date)
}

// string price_limit_type = 28;
inline void SSEStockOption::clear_price_limit_type() {
  price_limit_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::price_limit_type() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.price_limit_type)
  return price_limit_type_.GetNoArena();
}
inline void SSEStockOption::set_price_limit_type(const ::std::string& value) {
  
  price_limit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.price_limit_type)
}
#if LANG_CXX11
inline void SSEStockOption::set_price_limit_type(::std::string&& value) {
  
  price_limit_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.price_limit_type)
}
#endif
inline void SSEStockOption::set_price_limit_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  price_limit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.price_limit_type)
}
inline void SSEStockOption::set_price_limit_type(const char* value, size_t size) {
  
  price_limit_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.price_limit_type)
}
inline ::std::string* SSEStockOption::mutable_price_limit_type() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.price_limit_type)
  return price_limit_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_price_limit_type() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.price_limit_type)
  
  return price_limit_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_price_limit_type(::std::string* price_limit_type) {
  if (price_limit_type != nullptr) {
    
  } else {
    
  }
  price_limit_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_limit_type);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.price_limit_type)
}

// string exercise_date = 29;
inline void SSEStockOption::clear_exercise_date() {
  exercise_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::exercise_date() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.exercise_date)
  return exercise_date_.GetNoArena();
}
inline void SSEStockOption::set_exercise_date(const ::std::string& value) {
  
  exercise_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.exercise_date)
}
#if LANG_CXX11
inline void SSEStockOption::set_exercise_date(::std::string&& value) {
  
  exercise_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.exercise_date)
}
#endif
inline void SSEStockOption::set_exercise_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exercise_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.exercise_date)
}
inline void SSEStockOption::set_exercise_date(const char* value, size_t size) {
  
  exercise_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.exercise_date)
}
inline ::std::string* SSEStockOption::mutable_exercise_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.exercise_date)
  return exercise_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_exercise_date() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.exercise_date)
  
  return exercise_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_exercise_date(::std::string* exercise_date) {
  if (exercise_date != nullptr) {
    
  } else {
    
  }
  exercise_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exercise_date);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.exercise_date)
}

// string margin_unit = 30;
inline void SSEStockOption::clear_margin_unit() {
  margin_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::margin_unit() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.margin_unit)
  return margin_unit_.GetNoArena();
}
inline void SSEStockOption::set_margin_unit(const ::std::string& value) {
  
  margin_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.margin_unit)
}
#if LANG_CXX11
inline void SSEStockOption::set_margin_unit(::std::string&& value) {
  
  margin_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.margin_unit)
}
#endif
inline void SSEStockOption::set_margin_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  margin_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.margin_unit)
}
inline void SSEStockOption::set_margin_unit(const char* value, size_t size) {
  
  margin_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.margin_unit)
}
inline ::std::string* SSEStockOption::mutable_margin_unit() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.margin_unit)
  return margin_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_margin_unit() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.margin_unit)
  
  return margin_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_margin_unit(::std::string* margin_unit) {
  if (margin_unit != nullptr) {
    
  } else {
    
  }
  margin_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), margin_unit);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.margin_unit)
}

// string securityID = 31;
inline void SSEStockOption::clear_securityid() {
  securityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::securityid() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.securityID)
  return securityid_.GetNoArena();
}
inline void SSEStockOption::set_securityid(const ::std::string& value) {
  
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.securityID)
}
#if LANG_CXX11
inline void SSEStockOption::set_securityid(::std::string&& value) {
  
  securityid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.securityID)
}
#endif
inline void SSEStockOption::set_securityid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.securityID)
}
inline void SSEStockOption::set_securityid(const char* value, size_t size) {
  
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.securityID)
}
inline ::std::string* SSEStockOption::mutable_securityid() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.securityID)
  return securityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_securityid() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.securityID)
  
  return securityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_securityid(::std::string* securityid) {
  if (securityid != nullptr) {
    
  } else {
    
  }
  securityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityid);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.securityID)
}

// string security_name_byID = 32;
inline void SSEStockOption::clear_security_name_byid() {
  security_name_byid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::security_name_byid() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.security_name_byID)
  return security_name_byid_.GetNoArena();
}
inline void SSEStockOption::set_security_name_byid(const ::std::string& value) {
  
  security_name_byid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.security_name_byID)
}
#if LANG_CXX11
inline void SSEStockOption::set_security_name_byid(::std::string&& value) {
  
  security_name_byid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.security_name_byID)
}
#endif
inline void SSEStockOption::set_security_name_byid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_name_byid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.security_name_byID)
}
inline void SSEStockOption::set_security_name_byid(const char* value, size_t size) {
  
  security_name_byid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.security_name_byID)
}
inline ::std::string* SSEStockOption::mutable_security_name_byid() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.security_name_byID)
  return security_name_byid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_security_name_byid() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.security_name_byID)
  
  return security_name_byid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_security_name_byid(::std::string* security_name_byid) {
  if (security_name_byid != nullptr) {
    
  } else {
    
  }
  security_name_byid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_name_byid);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.security_name_byID)
}

// string contract_flag = 33;
inline void SSEStockOption::clear_contract_flag() {
  contract_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::contract_flag() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.contract_flag)
  return contract_flag_.GetNoArena();
}
inline void SSEStockOption::set_contract_flag(const ::std::string& value) {
  
  contract_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.contract_flag)
}
#if LANG_CXX11
inline void SSEStockOption::set_contract_flag(::std::string&& value) {
  
  contract_flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.contract_flag)
}
#endif
inline void SSEStockOption::set_contract_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.contract_flag)
}
inline void SSEStockOption::set_contract_flag(const char* value, size_t size) {
  
  contract_flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.contract_flag)
}
inline ::std::string* SSEStockOption::mutable_contract_flag() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.contract_flag)
  return contract_flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_contract_flag() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.contract_flag)
  
  return contract_flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_contract_flag(::std::string* contract_flag) {
  if (contract_flag != nullptr) {
    
  } else {
    
  }
  contract_flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contract_flag);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.contract_flag)
}

// string underlying_closePX = 34;
inline void SSEStockOption::clear_underlying_closepx() {
  underlying_closepx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SSEStockOption::underlying_closepx() const {
  // @@protoc_insertion_point(field_get:pb.SSEStockOption.underlying_closePX)
  return underlying_closepx_.GetNoArena();
}
inline void SSEStockOption::set_underlying_closepx(const ::std::string& value) {
  
  underlying_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.SSEStockOption.underlying_closePX)
}
#if LANG_CXX11
inline void SSEStockOption::set_underlying_closepx(::std::string&& value) {
  
  underlying_closepx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SSEStockOption.underlying_closePX)
}
#endif
inline void SSEStockOption::set_underlying_closepx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  underlying_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SSEStockOption.underlying_closePX)
}
inline void SSEStockOption::set_underlying_closepx(const char* value, size_t size) {
  
  underlying_closepx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SSEStockOption.underlying_closePX)
}
inline ::std::string* SSEStockOption::mutable_underlying_closepx() {
  
  // @@protoc_insertion_point(field_mutable:pb.SSEStockOption.underlying_closePX)
  return underlying_closepx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSEStockOption::release_underlying_closepx() {
  // @@protoc_insertion_point(field_release:pb.SSEStockOption.underlying_closePX)
  
  return underlying_closepx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSEStockOption::set_allocated_underlying_closepx(::std::string* underlying_closepx) {
  if (underlying_closepx != nullptr) {
    
  } else {
    
  }
  underlying_closepx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), underlying_closepx);
  // @@protoc_insertion_point(field_set_allocated:pb.SSEStockOption.underlying_closePX)
}

// -------------------------------------------------------------------

// OptionMonth

// string name = 1;
inline void OptionMonth::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionMonth::name() const {
  // @@protoc_insertion_point(field_get:pb.OptionMonth.name)
  return name_.GetNoArena();
}
inline void OptionMonth::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionMonth.name)
}
#if LANG_CXX11
inline void OptionMonth::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionMonth.name)
}
#endif
inline void OptionMonth::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionMonth.name)
}
inline void OptionMonth::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionMonth.name)
}
inline ::std::string* OptionMonth::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionMonth.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionMonth::release_name() {
  // @@protoc_insertion_point(field_release:pb.OptionMonth.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionMonth::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionMonth.name)
}

// string value = 2;
inline void OptionMonth::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionMonth::value() const {
  // @@protoc_insertion_point(field_get:pb.OptionMonth.value)
  return value_.GetNoArena();
}
inline void OptionMonth::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionMonth.value)
}
#if LANG_CXX11
inline void OptionMonth::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionMonth.value)
}
#endif
inline void OptionMonth::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionMonth.value)
}
inline void OptionMonth::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionMonth.value)
}
inline ::std::string* OptionMonth::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionMonth.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionMonth::release_value() {
  // @@protoc_insertion_point(field_release:pb.OptionMonth.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionMonth::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionMonth.value)
}

// string short = 3;
inline void OptionMonth::clear_short_() {
  short__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptionMonth::short_() const {
  // @@protoc_insertion_point(field_get:pb.OptionMonth.short)
  return short__.GetNoArena();
}
inline void OptionMonth::set_short_(const ::std::string& value) {
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OptionMonth.short)
}
#if LANG_CXX11
inline void OptionMonth::set_short_(::std::string&& value) {
  
  short__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OptionMonth.short)
}
#endif
inline void OptionMonth::set_short_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OptionMonth.short)
}
inline void OptionMonth::set_short_(const char* value, size_t size) {
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OptionMonth.short)
}
inline ::std::string* OptionMonth::mutable_short_() {
  
  // @@protoc_insertion_point(field_mutable:pb.OptionMonth.short)
  return short__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptionMonth::release_short_() {
  // @@protoc_insertion_point(field_release:pb.OptionMonth.short)
  
  return short__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptionMonth::set_allocated_short_(::std::string* short_) {
  if (short_ != nullptr) {
    
  } else {
    
  }
  short__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_);
  // @@protoc_insertion_point(field_set_allocated:pb.OptionMonth.short)
}

// -------------------------------------------------------------------

// OptionMonthList

// repeated .pb.OptionMonth list = 1;
inline int OptionMonthList::list_size() const {
  return list_.size();
}
inline void OptionMonthList::clear_list() {
  list_.Clear();
}
inline ::pb::OptionMonth* OptionMonthList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OptionMonthList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OptionMonth >*
OptionMonthList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.OptionMonthList.list)
  return &list_;
}
inline const ::pb::OptionMonth& OptionMonthList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.OptionMonthList.list)
  return list_.Get(index);
}
inline ::pb::OptionMonth* OptionMonthList::add_list() {
  // @@protoc_insertion_point(field_add:pb.OptionMonthList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OptionMonth >&
OptionMonthList::list() const {
  // @@protoc_insertion_point(field_list:pb.OptionMonthList.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ExchangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ExchangeType>() {
  return ::pb::ExchangeType_descriptor();
}
template <> struct is_proto_enum< ::pb::ProductType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ProductType>() {
  return ::pb::ProductType_descriptor();
}
template <> struct is_proto_enum< ::pb::PeriodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PeriodType>() {
  return ::pb::PeriodType_descriptor();
}
template <> struct is_proto_enum< ::pb::OptionCallPutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OptionCallPutType>() {
  return ::pb::OptionCallPutType_descriptor();
}
template <> struct is_proto_enum< ::pb::OptionDeliveryDateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OptionDeliveryDateType>() {
  return ::pb::OptionDeliveryDateType_descriptor();
}
template <> struct is_proto_enum< ::pb::CloseCommissionAlgorithim> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CloseCommissionAlgorithim>() {
  return ::pb::CloseCommissionAlgorithim_descriptor();
}
template <> struct is_proto_enum< ::pb::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::AccountType>() {
  return ::pb::AccountType_descriptor();
}
template <> struct is_proto_enum< ::pb::CurrencyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::CurrencyType>() {
  return ::pb::CurrencyType_descriptor();
}
template <> struct is_proto_enum< ::pb::TradingAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TradingAccountType>() {
  return ::pb::TradingAccountType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_common_2eproto
