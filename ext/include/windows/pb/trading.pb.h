// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trading.proto

#ifndef PROTOBUF_INCLUDED_trading_2eproto
#define PROTOBUF_INCLUDED_trading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trading_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_trading_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_trading_2eproto();
namespace pb {
class ReqDeleteTradingRoute;
class ReqDeleteTradingRouteDefaultTypeInternal;
extern ReqDeleteTradingRouteDefaultTypeInternal _ReqDeleteTradingRoute_default_instance_;
class TradingAccount;
class TradingAccountDefaultTypeInternal;
extern TradingAccountDefaultTypeInternal _TradingAccount_default_instance_;
class TradingAccountList;
class TradingAccountListDefaultTypeInternal;
extern TradingAccountListDefaultTypeInternal _TradingAccountList_default_instance_;
class TradingRoute;
class TradingRouteDefaultTypeInternal;
extern TradingRouteDefaultTypeInternal _TradingRoute_default_instance_;
class TradingRouteList;
class TradingRouteListDefaultTypeInternal;
extern TradingRouteListDefaultTypeInternal _TradingRouteList_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::ReqDeleteTradingRoute* Arena::CreateMaybeMessage<::pb::ReqDeleteTradingRoute>(Arena*);
template<> ::pb::TradingAccount* Arena::CreateMaybeMessage<::pb::TradingAccount>(Arena*);
template<> ::pb::TradingAccountList* Arena::CreateMaybeMessage<::pb::TradingAccountList>(Arena*);
template<> ::pb::TradingRoute* Arena::CreateMaybeMessage<::pb::TradingRoute>(Arena*);
template<> ::pb::TradingRouteList* Arena::CreateMaybeMessage<::pb::TradingRouteList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum RouteType {
  RT_CTP_FUTURE = 0,
  RT_CTP_STOCK = 1,
  RT_INTERACTIVE_BROKER = 2,
  RT_LTS = 3,
  RT_CATS = 4,
  RT_CTP_STOCK_OPTION = 5,
  RT_KSOP = 7,
  RouteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  RouteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool RouteType_IsValid(int value);
const RouteType RouteType_MIN = RT_CTP_FUTURE;
const RouteType RouteType_MAX = RT_KSOP;
const int RouteType_ARRAYSIZE = RouteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RouteType_descriptor();
inline const ::std::string& RouteType_Name(RouteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RouteType_descriptor(), value);
}
inline bool RouteType_Parse(
    const ::std::string& name, RouteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteType>(
    RouteType_descriptor(), name, value);
}
// ===================================================================

class TradingRoute :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingRoute) */ {
 public:
  TradingRoute();
  virtual ~TradingRoute();

  TradingRoute(const TradingRoute& from);

  inline TradingRoute& operator=(const TradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingRoute(TradingRoute&& from) noexcept
    : TradingRoute() {
    *this = ::std::move(from);
  }

  inline TradingRoute& operator=(TradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingRoute* internal_default_instance() {
    return reinterpret_cast<const TradingRoute*>(
               &_TradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TradingRoute* other);
  friend void swap(TradingRoute& a, TradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingRoute* New() const final {
    return CreateMaybeMessage<TradingRoute>(nullptr);
  }

  TradingRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingRoute& from);
  void MergeFrom(const TradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string trading_front_list = 6;
  int trading_front_list_size() const;
  void clear_trading_front_list();
  static const int kTradingFrontListFieldNumber = 6;
  const ::std::string& trading_front_list(int index) const;
  ::std::string* mutable_trading_front_list(int index);
  void set_trading_front_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trading_front_list(int index, ::std::string&& value);
  #endif
  void set_trading_front_list(int index, const char* value);
  void set_trading_front_list(int index, const char* value, size_t size);
  ::std::string* add_trading_front_list();
  void add_trading_front_list(const ::std::string& value);
  #if LANG_CXX11
  void add_trading_front_list(::std::string&& value);
  #endif
  void add_trading_front_list(const char* value);
  void add_trading_front_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& trading_front_list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_trading_front_list();

  // repeated string market_data_front_list = 7;
  int market_data_front_list_size() const;
  void clear_market_data_front_list();
  static const int kMarketDataFrontListFieldNumber = 7;
  const ::std::string& market_data_front_list(int index) const;
  ::std::string* mutable_market_data_front_list(int index);
  void set_market_data_front_list(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_market_data_front_list(int index, ::std::string&& value);
  #endif
  void set_market_data_front_list(int index, const char* value);
  void set_market_data_front_list(int index, const char* value, size_t size);
  ::std::string* add_market_data_front_list();
  void add_market_data_front_list(const ::std::string& value);
  #if LANG_CXX11
  void add_market_data_front_list(::std::string&& value);
  #endif
  void add_market_data_front_list(const char* value);
  void add_market_data_front_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& market_data_front_list() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_market_data_front_list();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string broker_id = 4;
  void clear_broker_id();
  static const int kBrokerIdFieldNumber = 4;
  const ::std::string& broker_id() const;
  void set_broker_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broker_id(::std::string&& value);
  #endif
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  ::std::string* mutable_broker_id();
  ::std::string* release_broker_id();
  void set_allocated_broker_id(::std::string* broker_id);

  // string user_product_info = 8;
  void clear_user_product_info();
  static const int kUserProductInfoFieldNumber = 8;
  const ::std::string& user_product_info() const;
  void set_user_product_info(const ::std::string& value);
  #if LANG_CXX11
  void set_user_product_info(::std::string&& value);
  #endif
  void set_user_product_info(const char* value);
  void set_user_product_info(const char* value, size_t size);
  ::std::string* mutable_user_product_info();
  ::std::string* release_user_product_info();
  void set_allocated_user_product_info(::std::string* user_product_info);

  // string auth_code = 9;
  void clear_auth_code();
  static const int kAuthCodeFieldNumber = 9;
  const ::std::string& auth_code() const;
  void set_auth_code(const ::std::string& value);
  #if LANG_CXX11
  void set_auth_code(::std::string&& value);
  #endif
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  ::std::string* mutable_auth_code();
  ::std::string* release_auth_code();
  void set_allocated_auth_code(::std::string* auth_code);

  // string user = 10;
  void clear_user();
  static const int kUserFieldNumber = 10;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .pb.RouteType route_type = 5;
  void clear_route_type();
  static const int kRouteTypeFieldNumber = 5;
  ::pb::RouteType route_type() const;
  void set_route_type(::pb::RouteType value);

  // @@protoc_insertion_point(class_scope:pb.TradingRoute)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> trading_front_list_;
  ::google::protobuf::RepeatedPtrField<::std::string> market_data_front_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr broker_id_;
  ::google::protobuf::internal::ArenaStringPtr user_product_info_;
  ::google::protobuf::internal::ArenaStringPtr auth_code_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::int64 id_;
  int route_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trading_2eproto;
};
// -------------------------------------------------------------------

class TradingRouteList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingRouteList) */ {
 public:
  TradingRouteList();
  virtual ~TradingRouteList();

  TradingRouteList(const TradingRouteList& from);

  inline TradingRouteList& operator=(const TradingRouteList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingRouteList(TradingRouteList&& from) noexcept
    : TradingRouteList() {
    *this = ::std::move(from);
  }

  inline TradingRouteList& operator=(TradingRouteList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingRouteList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingRouteList* internal_default_instance() {
    return reinterpret_cast<const TradingRouteList*>(
               &_TradingRouteList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TradingRouteList* other);
  friend void swap(TradingRouteList& a, TradingRouteList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingRouteList* New() const final {
    return CreateMaybeMessage<TradingRouteList>(nullptr);
  }

  TradingRouteList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingRouteList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingRouteList& from);
  void MergeFrom(const TradingRouteList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingRouteList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingRoute list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingRoute* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TradingRoute >*
      mutable_list();
  const ::pb::TradingRoute& list(int index) const;
  ::pb::TradingRoute* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::TradingRoute >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.TradingRouteList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TradingRoute > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trading_2eproto;
};
// -------------------------------------------------------------------

class TradingAccount :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingAccount) */ {
 public:
  TradingAccount();
  virtual ~TradingAccount();

  TradingAccount(const TradingAccount& from);

  inline TradingAccount& operator=(const TradingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingAccount(TradingAccount&& from) noexcept
    : TradingAccount() {
    *this = ::std::move(from);
  }

  inline TradingAccount& operator=(TradingAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingAccount* internal_default_instance() {
    return reinterpret_cast<const TradingAccount*>(
               &_TradingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TradingAccount* other);
  friend void swap(TradingAccount& a, TradingAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingAccount* New() const final {
    return CreateMaybeMessage<TradingAccount>(nullptr);
  }

  TradingAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingAccount& from);
  void MergeFrom(const TradingAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string comment = 3;
  void clear_comment();
  static const int kCommentFieldNumber = 3;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string account = 5;
  void clear_account();
  static const int kAccountFieldNumber = 5;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string password = 6;
  void clear_password();
  static const int kPasswordFieldNumber = 6;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string password2 = 7;
  void clear_password2();
  static const int kPassword2FieldNumber = 7;
  const ::std::string& password2() const;
  void set_password2(const ::std::string& value);
  #if LANG_CXX11
  void set_password2(::std::string&& value);
  #endif
  void set_password2(const char* value);
  void set_password2(const char* value, size_t size);
  ::std::string* mutable_password2();
  ::std::string* release_password2();
  void set_allocated_password2(::std::string* password2);

  // string password3 = 8;
  void clear_password3();
  static const int kPassword3FieldNumber = 8;
  const ::std::string& password3() const;
  void set_password3(const ::std::string& value);
  #if LANG_CXX11
  void set_password3(::std::string&& value);
  #endif
  void set_password3(const char* value);
  void set_password3(const char* value, size_t size);
  ::std::string* mutable_password3();
  ::std::string* release_password3();
  void set_allocated_password3(::std::string* password3);

  // string user = 12;
  void clear_user();
  static const int kUserFieldNumber = 12;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // .pb.TradingRoute trading_route = 4;
  bool has_trading_route() const;
  void clear_trading_route();
  static const int kTradingRouteFieldNumber = 4;
  const ::pb::TradingRoute& trading_route() const;
  ::pb::TradingRoute* release_trading_route();
  ::pb::TradingRoute* mutable_trading_route();
  void set_allocated_trading_route(::pb::TradingRoute* trading_route);

  // bool prevent_self_matching = 9;
  void clear_prevent_self_matching();
  static const int kPreventSelfMatchingFieldNumber = 9;
  bool prevent_self_matching() const;
  void set_prevent_self_matching(bool value);

  // int32 stock_option_position_limit = 10;
  void clear_stock_option_position_limit();
  static const int kStockOptionPositionLimitFieldNumber = 10;
  ::google::protobuf::int32 stock_option_position_limit() const;
  void set_stock_option_position_limit(::google::protobuf::int32 value);

  // int32 cancel_limit = 11;
  void clear_cancel_limit();
  static const int kCancelLimitFieldNumber = 11;
  ::google::protobuf::int32 cancel_limit() const;
  void set_cancel_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TradingAccount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr password2_;
  ::google::protobuf::internal::ArenaStringPtr password3_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::pb::TradingRoute* trading_route_;
  bool prevent_self_matching_;
  ::google::protobuf::int32 stock_option_position_limit_;
  ::google::protobuf::int32 cancel_limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trading_2eproto;
};
// -------------------------------------------------------------------

class TradingAccountList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradingAccountList) */ {
 public:
  TradingAccountList();
  virtual ~TradingAccountList();

  TradingAccountList(const TradingAccountList& from);

  inline TradingAccountList& operator=(const TradingAccountList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradingAccountList(TradingAccountList&& from) noexcept
    : TradingAccountList() {
    *this = ::std::move(from);
  }

  inline TradingAccountList& operator=(TradingAccountList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradingAccountList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradingAccountList* internal_default_instance() {
    return reinterpret_cast<const TradingAccountList*>(
               &_TradingAccountList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TradingAccountList* other);
  friend void swap(TradingAccountList& a, TradingAccountList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradingAccountList* New() const final {
    return CreateMaybeMessage<TradingAccountList>(nullptr);
  }

  TradingAccountList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradingAccountList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradingAccountList& from);
  void MergeFrom(const TradingAccountList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradingAccountList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TradingAccount list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::TradingAccount* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::TradingAccount >*
      mutable_list();
  const ::pb::TradingAccount& list(int index) const;
  ::pb::TradingAccount* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::TradingAccount >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.TradingAccountList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TradingAccount > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trading_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteTradingRoute :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReqDeleteTradingRoute) */ {
 public:
  ReqDeleteTradingRoute();
  virtual ~ReqDeleteTradingRoute();

  ReqDeleteTradingRoute(const ReqDeleteTradingRoute& from);

  inline ReqDeleteTradingRoute& operator=(const ReqDeleteTradingRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqDeleteTradingRoute(ReqDeleteTradingRoute&& from) noexcept
    : ReqDeleteTradingRoute() {
    *this = ::std::move(from);
  }

  inline ReqDeleteTradingRoute& operator=(ReqDeleteTradingRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqDeleteTradingRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqDeleteTradingRoute* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteTradingRoute*>(
               &_ReqDeleteTradingRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ReqDeleteTradingRoute* other);
  friend void swap(ReqDeleteTradingRoute& a, ReqDeleteTradingRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteTradingRoute* New() const final {
    return CreateMaybeMessage<ReqDeleteTradingRoute>(nullptr);
  }

  ReqDeleteTradingRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteTradingRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqDeleteTradingRoute& from);
  void MergeFrom(const ReqDeleteTradingRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteTradingRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.ReqDeleteTradingRoute)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradingRoute

// int64 id = 1;
inline void TradingRoute::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TradingRoute::id() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.id)
  return id_;
}
inline void TradingRoute::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TradingRoute.id)
}

// string name = 2;
inline void TradingRoute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::name() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.name)
  return name_.GetNoArena();
}
inline void TradingRoute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.name)
}
#if LANG_CXX11
inline void TradingRoute::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.name)
}
#endif
inline void TradingRoute::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.name)
}
inline void TradingRoute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.name)
}
inline ::std::string* TradingRoute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_name() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.name)
}

// string comment = 3;
inline void TradingRoute::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::comment() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.comment)
  return comment_.GetNoArena();
}
inline void TradingRoute::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.comment)
}
#if LANG_CXX11
inline void TradingRoute::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.comment)
}
#endif
inline void TradingRoute::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.comment)
}
inline void TradingRoute::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.comment)
}
inline ::std::string* TradingRoute::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_comment() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.comment)
}

// string broker_id = 4;
inline void TradingRoute::clear_broker_id() {
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::broker_id() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.broker_id)
  return broker_id_.GetNoArena();
}
inline void TradingRoute::set_broker_id(const ::std::string& value) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.broker_id)
}
#if LANG_CXX11
inline void TradingRoute::set_broker_id(::std::string&& value) {
  
  broker_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.broker_id)
}
#endif
inline void TradingRoute::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.broker_id)
}
inline void TradingRoute::set_broker_id(const char* value, size_t size) {
  
  broker_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.broker_id)
}
inline ::std::string* TradingRoute::mutable_broker_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.broker_id)
  return broker_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_broker_id() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.broker_id)
  
  return broker_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_broker_id(::std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broker_id);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.broker_id)
}

// .pb.RouteType route_type = 5;
inline void TradingRoute::clear_route_type() {
  route_type_ = 0;
}
inline ::pb::RouteType TradingRoute::route_type() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.route_type)
  return static_cast< ::pb::RouteType >(route_type_);
}
inline void TradingRoute::set_route_type(::pb::RouteType value) {
  
  route_type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradingRoute.route_type)
}

// repeated string trading_front_list = 6;
inline int TradingRoute::trading_front_list_size() const {
  return trading_front_list_.size();
}
inline void TradingRoute::clear_trading_front_list() {
  trading_front_list_.Clear();
}
inline const ::std::string& TradingRoute::trading_front_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.trading_front_list)
  return trading_front_list_.Get(index);
}
inline ::std::string* TradingRoute::mutable_trading_front_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.trading_front_list)
  return trading_front_list_.Mutable(index);
}
inline void TradingRoute::set_trading_front_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TradingRoute.trading_front_list)
  trading_front_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TradingRoute::set_trading_front_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.TradingRoute.trading_front_list)
  trading_front_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TradingRoute::set_trading_front_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trading_front_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.trading_front_list)
}
inline void TradingRoute::set_trading_front_list(int index, const char* value, size_t size) {
  trading_front_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.trading_front_list)
}
inline ::std::string* TradingRoute::add_trading_front_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.TradingRoute.trading_front_list)
  return trading_front_list_.Add();
}
inline void TradingRoute::add_trading_front_list(const ::std::string& value) {
  trading_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TradingRoute.trading_front_list)
}
#if LANG_CXX11
inline void TradingRoute::add_trading_front_list(::std::string&& value) {
  trading_front_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.TradingRoute.trading_front_list)
}
#endif
inline void TradingRoute::add_trading_front_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  trading_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TradingRoute.trading_front_list)
}
inline void TradingRoute::add_trading_front_list(const char* value, size_t size) {
  trading_front_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TradingRoute.trading_front_list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TradingRoute::trading_front_list() const {
  // @@protoc_insertion_point(field_list:pb.TradingRoute.trading_front_list)
  return trading_front_list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TradingRoute::mutable_trading_front_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TradingRoute.trading_front_list)
  return &trading_front_list_;
}

// repeated string market_data_front_list = 7;
inline int TradingRoute::market_data_front_list_size() const {
  return market_data_front_list_.size();
}
inline void TradingRoute::clear_market_data_front_list() {
  market_data_front_list_.Clear();
}
inline const ::std::string& TradingRoute::market_data_front_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.market_data_front_list)
  return market_data_front_list_.Get(index);
}
inline ::std::string* TradingRoute::mutable_market_data_front_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.market_data_front_list)
  return market_data_front_list_.Mutable(index);
}
inline void TradingRoute::set_market_data_front_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TradingRoute.market_data_front_list)
  market_data_front_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TradingRoute::set_market_data_front_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.TradingRoute.market_data_front_list)
  market_data_front_list_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TradingRoute::set_market_data_front_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  market_data_front_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.market_data_front_list)
}
inline void TradingRoute::set_market_data_front_list(int index, const char* value, size_t size) {
  market_data_front_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.market_data_front_list)
}
inline ::std::string* TradingRoute::add_market_data_front_list() {
  // @@protoc_insertion_point(field_add_mutable:pb.TradingRoute.market_data_front_list)
  return market_data_front_list_.Add();
}
inline void TradingRoute::add_market_data_front_list(const ::std::string& value) {
  market_data_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TradingRoute.market_data_front_list)
}
#if LANG_CXX11
inline void TradingRoute::add_market_data_front_list(::std::string&& value) {
  market_data_front_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.TradingRoute.market_data_front_list)
}
#endif
inline void TradingRoute::add_market_data_front_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  market_data_front_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TradingRoute.market_data_front_list)
}
inline void TradingRoute::add_market_data_front_list(const char* value, size_t size) {
  market_data_front_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TradingRoute.market_data_front_list)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
TradingRoute::market_data_front_list() const {
  // @@protoc_insertion_point(field_list:pb.TradingRoute.market_data_front_list)
  return market_data_front_list_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
TradingRoute::mutable_market_data_front_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TradingRoute.market_data_front_list)
  return &market_data_front_list_;
}

// string user_product_info = 8;
inline void TradingRoute::clear_user_product_info() {
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::user_product_info() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.user_product_info)
  return user_product_info_.GetNoArena();
}
inline void TradingRoute::set_user_product_info(const ::std::string& value) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.user_product_info)
}
#if LANG_CXX11
inline void TradingRoute::set_user_product_info(::std::string&& value) {
  
  user_product_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.user_product_info)
}
#endif
inline void TradingRoute::set_user_product_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.user_product_info)
}
inline void TradingRoute::set_user_product_info(const char* value, size_t size) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.user_product_info)
}
inline ::std::string* TradingRoute::mutable_user_product_info() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.user_product_info)
  return user_product_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_user_product_info() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.user_product_info)
  
  return user_product_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_user_product_info(::std::string* user_product_info) {
  if (user_product_info != nullptr) {
    
  } else {
    
  }
  user_product_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_product_info);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.user_product_info)
}

// string auth_code = 9;
inline void TradingRoute::clear_auth_code() {
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::auth_code() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.auth_code)
  return auth_code_.GetNoArena();
}
inline void TradingRoute::set_auth_code(const ::std::string& value) {
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.auth_code)
}
#if LANG_CXX11
inline void TradingRoute::set_auth_code(::std::string&& value) {
  
  auth_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.auth_code)
}
#endif
inline void TradingRoute::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.auth_code)
}
inline void TradingRoute::set_auth_code(const char* value, size_t size) {
  
  auth_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.auth_code)
}
inline ::std::string* TradingRoute::mutable_auth_code() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.auth_code)
  return auth_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_auth_code() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.auth_code)
  
  return auth_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_auth_code(::std::string* auth_code) {
  if (auth_code != nullptr) {
    
  } else {
    
  }
  auth_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_code);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.auth_code)
}

// string user = 10;
inline void TradingRoute::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingRoute::user() const {
  // @@protoc_insertion_point(field_get:pb.TradingRoute.user)
  return user_.GetNoArena();
}
inline void TradingRoute::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingRoute.user)
}
#if LANG_CXX11
inline void TradingRoute::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingRoute.user)
}
#endif
inline void TradingRoute::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingRoute.user)
}
inline void TradingRoute::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingRoute.user)
}
inline ::std::string* TradingRoute::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingRoute.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingRoute::release_user() {
  // @@protoc_insertion_point(field_release:pb.TradingRoute.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingRoute::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingRoute.user)
}

// -------------------------------------------------------------------

// TradingRouteList

// repeated .pb.TradingRoute list = 1;
inline int TradingRouteList::list_size() const {
  return list_.size();
}
inline void TradingRouteList::clear_list() {
  list_.Clear();
}
inline ::pb::TradingRoute* TradingRouteList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TradingRouteList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TradingRoute >*
TradingRouteList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TradingRouteList.list)
  return &list_;
}
inline const ::pb::TradingRoute& TradingRouteList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TradingRouteList.list)
  return list_.Get(index);
}
inline ::pb::TradingRoute* TradingRouteList::add_list() {
  // @@protoc_insertion_point(field_add:pb.TradingRouteList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TradingRoute >&
TradingRouteList::list() const {
  // @@protoc_insertion_point(field_list:pb.TradingRouteList.list)
  return list_;
}

// -------------------------------------------------------------------

// TradingAccount

// string id = 1;
inline void TradingAccount::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::id() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.id)
  return id_.GetNoArena();
}
inline void TradingAccount::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.id)
}
#if LANG_CXX11
inline void TradingAccount::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.id)
}
#endif
inline void TradingAccount::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.id)
}
inline void TradingAccount::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.id)
}
inline ::std::string* TradingAccount::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_id() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.id)
}

// string name = 2;
inline void TradingAccount::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::name() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.name)
  return name_.GetNoArena();
}
inline void TradingAccount::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.name)
}
#if LANG_CXX11
inline void TradingAccount::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.name)
}
#endif
inline void TradingAccount::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.name)
}
inline void TradingAccount::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.name)
}
inline ::std::string* TradingAccount::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_name() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.name)
}

// string comment = 3;
inline void TradingAccount::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::comment() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.comment)
  return comment_.GetNoArena();
}
inline void TradingAccount::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.comment)
}
#if LANG_CXX11
inline void TradingAccount::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.comment)
}
#endif
inline void TradingAccount::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.comment)
}
inline void TradingAccount::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.comment)
}
inline ::std::string* TradingAccount::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_comment() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.comment)
}

// .pb.TradingRoute trading_route = 4;
inline bool TradingAccount::has_trading_route() const {
  return this != internal_default_instance() && trading_route_ != nullptr;
}
inline void TradingAccount::clear_trading_route() {
  if (GetArenaNoVirtual() == nullptr && trading_route_ != nullptr) {
    delete trading_route_;
  }
  trading_route_ = nullptr;
}
inline const ::pb::TradingRoute& TradingAccount::trading_route() const {
  const ::pb::TradingRoute* p = trading_route_;
  // @@protoc_insertion_point(field_get:pb.TradingAccount.trading_route)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::TradingRoute*>(
      &::pb::_TradingRoute_default_instance_);
}
inline ::pb::TradingRoute* TradingAccount::release_trading_route() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.trading_route)
  
  ::pb::TradingRoute* temp = trading_route_;
  trading_route_ = nullptr;
  return temp;
}
inline ::pb::TradingRoute* TradingAccount::mutable_trading_route() {
  
  if (trading_route_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::TradingRoute>(GetArenaNoVirtual());
    trading_route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.trading_route)
  return trading_route_;
}
inline void TradingAccount::set_allocated_trading_route(::pb::TradingRoute* trading_route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trading_route_;
  }
  if (trading_route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trading_route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trading_route, submessage_arena);
    }
    
  } else {
    
  }
  trading_route_ = trading_route;
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.trading_route)
}

// string account = 5;
inline void TradingAccount::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::account() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.account)
  return account_.GetNoArena();
}
inline void TradingAccount::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.account)
}
#if LANG_CXX11
inline void TradingAccount::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.account)
}
#endif
inline void TradingAccount::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.account)
}
inline void TradingAccount::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.account)
}
inline ::std::string* TradingAccount::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_account() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.account)
}

// string password = 6;
inline void TradingAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::password() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.password)
  return password_.GetNoArena();
}
inline void TradingAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.password)
}
#if LANG_CXX11
inline void TradingAccount::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.password)
}
#endif
inline void TradingAccount::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.password)
}
inline void TradingAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.password)
}
inline ::std::string* TradingAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_password() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.password)
}

// string password2 = 7;
inline void TradingAccount::clear_password2() {
  password2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::password2() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.password2)
  return password2_.GetNoArena();
}
inline void TradingAccount::set_password2(const ::std::string& value) {
  
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.password2)
}
#if LANG_CXX11
inline void TradingAccount::set_password2(::std::string&& value) {
  
  password2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.password2)
}
#endif
inline void TradingAccount::set_password2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.password2)
}
inline void TradingAccount::set_password2(const char* value, size_t size) {
  
  password2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.password2)
}
inline ::std::string* TradingAccount::mutable_password2() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.password2)
  return password2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_password2() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.password2)
  
  return password2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_password2(::std::string* password2) {
  if (password2 != nullptr) {
    
  } else {
    
  }
  password2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password2);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.password2)
}

// string password3 = 8;
inline void TradingAccount::clear_password3() {
  password3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::password3() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.password3)
  return password3_.GetNoArena();
}
inline void TradingAccount::set_password3(const ::std::string& value) {
  
  password3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.password3)
}
#if LANG_CXX11
inline void TradingAccount::set_password3(::std::string&& value) {
  
  password3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.password3)
}
#endif
inline void TradingAccount::set_password3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.password3)
}
inline void TradingAccount::set_password3(const char* value, size_t size) {
  
  password3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.password3)
}
inline ::std::string* TradingAccount::mutable_password3() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.password3)
  return password3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_password3() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.password3)
  
  return password3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_password3(::std::string* password3) {
  if (password3 != nullptr) {
    
  } else {
    
  }
  password3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password3);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.password3)
}

// bool prevent_self_matching = 9;
inline void TradingAccount::clear_prevent_self_matching() {
  prevent_self_matching_ = false;
}
inline bool TradingAccount::prevent_self_matching() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.prevent_self_matching)
  return prevent_self_matching_;
}
inline void TradingAccount::set_prevent_self_matching(bool value) {
  
  prevent_self_matching_ = value;
  // @@protoc_insertion_point(field_set:pb.TradingAccount.prevent_self_matching)
}

// int32 stock_option_position_limit = 10;
inline void TradingAccount::clear_stock_option_position_limit() {
  stock_option_position_limit_ = 0;
}
inline ::google::protobuf::int32 TradingAccount::stock_option_position_limit() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.stock_option_position_limit)
  return stock_option_position_limit_;
}
inline void TradingAccount::set_stock_option_position_limit(::google::protobuf::int32 value) {
  
  stock_option_position_limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TradingAccount.stock_option_position_limit)
}

// int32 cancel_limit = 11;
inline void TradingAccount::clear_cancel_limit() {
  cancel_limit_ = 0;
}
inline ::google::protobuf::int32 TradingAccount::cancel_limit() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.cancel_limit)
  return cancel_limit_;
}
inline void TradingAccount::set_cancel_limit(::google::protobuf::int32 value) {
  
  cancel_limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TradingAccount.cancel_limit)
}

// string user = 12;
inline void TradingAccount::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradingAccount::user() const {
  // @@protoc_insertion_point(field_get:pb.TradingAccount.user)
  return user_.GetNoArena();
}
inline void TradingAccount::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradingAccount.user)
}
#if LANG_CXX11
inline void TradingAccount::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradingAccount.user)
}
#endif
inline void TradingAccount::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradingAccount.user)
}
inline void TradingAccount::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradingAccount.user)
}
inline ::std::string* TradingAccount::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradingAccount.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradingAccount::release_user() {
  // @@protoc_insertion_point(field_release:pb.TradingAccount.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradingAccount::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.TradingAccount.user)
}

// -------------------------------------------------------------------

// TradingAccountList

// repeated .pb.TradingAccount list = 1;
inline int TradingAccountList::list_size() const {
  return list_.size();
}
inline void TradingAccountList::clear_list() {
  list_.Clear();
}
inline ::pb::TradingAccount* TradingAccountList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TradingAccountList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TradingAccount >*
TradingAccountList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.TradingAccountList.list)
  return &list_;
}
inline const ::pb::TradingAccount& TradingAccountList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.TradingAccountList.list)
  return list_.Get(index);
}
inline ::pb::TradingAccount* TradingAccountList::add_list() {
  // @@protoc_insertion_point(field_add:pb.TradingAccountList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TradingAccount >&
TradingAccountList::list() const {
  // @@protoc_insertion_point(field_list:pb.TradingAccountList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqDeleteTradingRoute

// int64 id = 1;
inline void ReqDeleteTradingRoute::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ReqDeleteTradingRoute::id() const {
  // @@protoc_insertion_point(field_get:pb.ReqDeleteTradingRoute.id)
  return id_;
}
inline void ReqDeleteTradingRoute::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.ReqDeleteTradingRoute.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::RouteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::RouteType>() {
  return ::pb::RouteType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_trading_2eproto
