// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trading.proto

#include "trading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_trading_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TradingRoute_trading_2eproto;
namespace pb {
class TradingRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradingRoute> _instance;
} _TradingRoute_default_instance_;
class TradingAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradingAccount> _instance;
} _TradingAccount_default_instance_;
}  // namespace pb
static void InitDefaultsTradingRoute_trading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradingRoute_default_instance_;
    new (ptr) ::pb::TradingRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradingRoute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradingRoute_trading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradingRoute_trading_2eproto}, {}};

static void InitDefaultsTradingAccount_trading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_TradingAccount_default_instance_;
    new (ptr) ::pb::TradingAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::TradingAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TradingAccount_trading_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTradingAccount_trading_2eproto}, {
      &scc_info_TradingRoute_trading_2eproto.base,}};

void InitDefaults_trading_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TradingRoute_trading_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradingAccount_trading_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_trading_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_trading_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_trading_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_trading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, route_type_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, trading_front_list_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, market_data_front_list_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, user_product_info_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, auth_code_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingRoute, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, id_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, name_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, trading_route_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, account_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, password_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, password2_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, password3_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, prevent_self_matching_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, stock_option_position_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, cancel_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::TradingAccount, user_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::TradingRoute)},
  { 15, -1, sizeof(::pb::TradingAccount)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TradingRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_TradingAccount_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_trading_2eproto = {
  {}, AddDescriptors_trading_2eproto, "trading.proto", schemas,
  file_default_instances, TableStruct_trading_2eproto::offsets,
  file_level_metadata_trading_2eproto, 2, file_level_enum_descriptors_trading_2eproto, file_level_service_descriptors_trading_2eproto,
};

const char descriptor_table_protodef_trading_2eproto[] =
  "\n\rtrading.proto\022\002pb\"\347\001\n\014TradingRoute\022\n\n\002"
  "id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\017\n\007comment\030\003 \001(\t\022"
  "\021\n\tbroker_id\030\004 \001(\t\022!\n\nroute_type\030\005 \001(\0162\r"
  ".pb.RouteType\022\032\n\022trading_front_list\030\006 \003("
  "\t\022\036\n\026market_data_front_list\030\007 \003(\t\022\031\n\021use"
  "r_product_info\030\010 \001(\t\022\021\n\tauth_code\030\t \001(\t\022"
  "\014\n\004user\030\n \001(\t\"\225\002\n\016TradingAccount\022\n\n\002id\030\001"
  " \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007comment\030\003 \001(\t\022\'\n\rt"
  "rading_route\030\004 \001(\0132\020.pb.TradingRoute\022\017\n\007"
  "account\030\005 \001(\t\022\020\n\010password\030\006 \001(\t\022\021\n\tpassw"
  "ord2\030\007 \001(\t\022\021\n\tpassword3\030\010 \001(\t\022\035\n\025prevent"
  "_self_matching\030\t \001(\010\022#\n\033stock_option_pos"
  "ition_limit\030\n \001(\005\022\024\n\014cancel_limit\030\013 \001(\005\022"
  "\014\n\004user\030\014 \001(\t*\212\001\n\tRouteType\022\021\n\rRT_CTP_FU"
  "TURE\020\000\022\020\n\014RT_CTP_STOCK\020\001\022\031\n\025RT_INTERACTI"
  "VE_BROKER\020\002\022\n\n\006RT_LTS\020\003\022\013\n\007RT_CATS\020\004\022\027\n\023"
  "RT_CTP_STOCK_OPTION\020\005\022\013\n\007RT_KSOP\020\007b\006prot"
  "o3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_trading_2eproto = {
  false, InitDefaults_trading_2eproto, 
  descriptor_table_protodef_trading_2eproto,
  "trading.proto", &assign_descriptors_table_trading_2eproto, 682,
};

void AddDescriptors_trading_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_trading_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trading_2eproto = []() { AddDescriptors_trading_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_trading_2eproto);
  return file_level_enum_descriptors_trading_2eproto[0];
}
bool RouteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TradingRoute::InitAsDefaultInstance() {
}
class TradingRoute::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingRoute::kIdFieldNumber;
const int TradingRoute::kNameFieldNumber;
const int TradingRoute::kCommentFieldNumber;
const int TradingRoute::kBrokerIdFieldNumber;
const int TradingRoute::kRouteTypeFieldNumber;
const int TradingRoute::kTradingFrontListFieldNumber;
const int TradingRoute::kMarketDataFrontListFieldNumber;
const int TradingRoute::kUserProductInfoFieldNumber;
const int TradingRoute::kAuthCodeFieldNumber;
const int TradingRoute::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingRoute::TradingRoute()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradingRoute)
}
TradingRoute::TradingRoute(const TradingRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      trading_front_list_(from.trading_front_list_),
      market_data_front_list_(from.market_data_front_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_product_info().size() > 0) {
    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth_code().size() > 0) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&route_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(route_type_));
  // @@protoc_insertion_point(copy_constructor:pb.TradingRoute)
}

void TradingRoute::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradingRoute_trading_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(route_type_));
}

TradingRoute::~TradingRoute() {
  // @@protoc_insertion_point(destructor:pb.TradingRoute)
  SharedDtor();
}

void TradingRoute::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradingRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingRoute& TradingRoute::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradingRoute_trading_2eproto.base);
  return *internal_default_instance();
}


void TradingRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradingRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_front_list_.Clear();
  market_data_front_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(route_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradingRoute::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradingRoute*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string comment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.RouteType route_type = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_route_type(static_cast<::pb::RouteType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string trading_front_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.TradingRoute.trading_front_list");
          object = msg->add_trading_front_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated string market_data_front_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.TradingRoute.market_data_front_list");
          object = msg->add_market_data_front_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // string user_product_info = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.user_product_info");
        object = msg->mutable_user_product_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string auth_code = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.auth_code");
        object = msg->mutable_auth_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingRoute.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradingRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradingRoute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.RouteType route_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_route_type(static_cast< ::pb::RouteType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string trading_front_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trading_front_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trading_front_list(this->trading_front_list_size() - 1).data(),
            static_cast<int>(this->trading_front_list(this->trading_front_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.trading_front_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string market_data_front_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_market_data_front_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->market_data_front_list(this->market_data_front_list_size() - 1).data(),
            static_cast<int>(this->market_data_front_list(this->market_data_front_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.market_data_front_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_product_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_product_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.user_product_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string auth_code = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.auth_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingRoute.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradingRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradingRoute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradingRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradingRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->broker_id(), output);
  }

  // .pb.RouteType route_type = 5;
  if (this->route_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->route_type(), output);
  }

  // repeated string trading_front_list = 6;
  for (int i = 0, n = this->trading_front_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_front_list(i).data(), static_cast<int>(this->trading_front_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.trading_front_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->trading_front_list(i), output);
  }

  // repeated string market_data_front_list = 7;
  for (int i = 0, n = this->market_data_front_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market_data_front_list(i).data(), static_cast<int>(this->market_data_front_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.market_data_front_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->market_data_front_list(i), output);
  }

  // string user_product_info = 8;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.user_product_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_product_info(), output);
  }

  // string auth_code = 9;
  if (this->auth_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->auth_code(), output);
  }

  // string user = 10;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradingRoute)
}

::google::protobuf::uint8* TradingRoute::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradingRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->broker_id(), target);
  }

  // .pb.RouteType route_type = 5;
  if (this->route_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->route_type(), target);
  }

  // repeated string trading_front_list = 6;
  for (int i = 0, n = this->trading_front_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_front_list(i).data(), static_cast<int>(this->trading_front_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.trading_front_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->trading_front_list(i), target);
  }

  // repeated string market_data_front_list = 7;
  for (int i = 0, n = this->market_data_front_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->market_data_front_list(i).data(), static_cast<int>(this->market_data_front_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.market_data_front_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->market_data_front_list(i), target);
  }

  // string user_product_info = 8;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.user_product_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->user_product_info(), target);
  }

  // string auth_code = 9;
  if (this->auth_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->auth_code(), target);
  }

  // string user = 10;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingRoute.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradingRoute)
  return target;
}

size_t TradingRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradingRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string trading_front_list = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trading_front_list_size());
  for (int i = 0, n = this->trading_front_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trading_front_list(i));
  }

  // repeated string market_data_front_list = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->market_data_front_list_size());
  for (int i = 0, n = this->market_data_front_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->market_data_front_list(i));
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string user_product_info = 8;
  if (this->user_product_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_product_info());
  }

  // string auth_code = 9;
  if (this->auth_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  // string user = 10;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .pb.RouteType route_type = 5;
  if (this->route_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradingRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingRoute* source =
      ::google::protobuf::DynamicCastToGenerated<TradingRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradingRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradingRoute)
    MergeFrom(*source);
  }
}

void TradingRoute::MergeFrom(const TradingRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradingRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trading_front_list_.MergeFrom(from.trading_front_list_);
  market_data_front_list_.MergeFrom(from.market_data_front_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.user_product_info().size() > 0) {

    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  if (from.auth_code().size() > 0) {

    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.route_type() != 0) {
    set_route_type(from.route_type());
  }
}

void TradingRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradingRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingRoute::CopyFrom(const TradingRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradingRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingRoute::IsInitialized() const {
  return true;
}

void TradingRoute::Swap(TradingRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingRoute::InternalSwap(TradingRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trading_front_list_.InternalSwap(CastToBase(&other->trading_front_list_));
  market_data_front_list_.InternalSwap(CastToBase(&other->market_data_front_list_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_product_info_.Swap(&other->user_product_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_code_.Swap(&other->auth_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(route_type_, other->route_type_);
}

::google::protobuf::Metadata TradingRoute::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_trading_2eproto);
  return ::file_level_metadata_trading_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TradingAccount::InitAsDefaultInstance() {
  ::pb::_TradingAccount_default_instance_._instance.get_mutable()->trading_route_ = const_cast< ::pb::TradingRoute*>(
      ::pb::TradingRoute::internal_default_instance());
}
class TradingAccount::HasBitSetters {
 public:
  static const ::pb::TradingRoute& trading_route(const TradingAccount* msg);
};

const ::pb::TradingRoute&
TradingAccount::HasBitSetters::trading_route(const TradingAccount* msg) {
  return *msg->trading_route_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradingAccount::kIdFieldNumber;
const int TradingAccount::kNameFieldNumber;
const int TradingAccount::kCommentFieldNumber;
const int TradingAccount::kTradingRouteFieldNumber;
const int TradingAccount::kAccountFieldNumber;
const int TradingAccount::kPasswordFieldNumber;
const int TradingAccount::kPassword2FieldNumber;
const int TradingAccount::kPassword3FieldNumber;
const int TradingAccount::kPreventSelfMatchingFieldNumber;
const int TradingAccount::kStockOptionPositionLimitFieldNumber;
const int TradingAccount::kCancelLimitFieldNumber;
const int TradingAccount::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradingAccount::TradingAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TradingAccount)
}
TradingAccount::TradingAccount(const TradingAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  password2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password2().size() > 0) {
    password2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password2_);
  }
  password3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password3().size() > 0) {
    password3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password3_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_trading_route()) {
    trading_route_ = new ::pb::TradingRoute(*from.trading_route_);
  } else {
    trading_route_ = nullptr;
  }
  ::memcpy(&prevent_self_matching_, &from.prevent_self_matching_,
    static_cast<size_t>(reinterpret_cast<char*>(&cancel_limit_) -
    reinterpret_cast<char*>(&prevent_self_matching_)) + sizeof(cancel_limit_));
  // @@protoc_insertion_point(copy_constructor:pb.TradingAccount)
}

void TradingAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TradingAccount_trading_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&trading_route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_limit_) -
      reinterpret_cast<char*>(&trading_route_)) + sizeof(cancel_limit_));
}

TradingAccount::~TradingAccount() {
  // @@protoc_insertion_point(destructor:pb.TradingAccount)
  SharedDtor();
}

void TradingAccount::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trading_route_;
}

void TradingAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingAccount& TradingAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TradingAccount_trading_2eproto.base);
  return *internal_default_instance();
}


void TradingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.TradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trading_route_ != nullptr) {
    delete trading_route_;
  }
  trading_route_ = nullptr;
  ::memset(&prevent_self_matching_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_limit_) -
      reinterpret_cast<char*>(&prevent_self_matching_)) + sizeof(cancel_limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TradingAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TradingAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string comment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.TradingRoute trading_route = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::TradingRoute::_InternalParse;
        object = msg->mutable_trading_route();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string account = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password2 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.password2");
        object = msg->mutable_password2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password3 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.password3");
        object = msg->mutable_password3();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool prevent_self_matching = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_prevent_self_matching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 stock_option_position_limit = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_stock_option_position_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cancel_limit = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_cancel_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.TradingAccount.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TradingAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TradingAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.TradingRoute trading_route = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trading_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password2().data(), static_cast<int>(this->password2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.password2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password3 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password3()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password3().data(), static_cast<int>(this->password3().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.password3"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prevent_self_matching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prevent_self_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stock_option_position_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stock_option_position_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cancel_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.TradingAccount.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TradingAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TradingAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TradingAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // .pb.TradingRoute trading_route = 4;
  if (this->has_trading_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::trading_route(this), output);
  }

  // string account = 5;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account(), output);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->password(), output);
  }

  // string password2 = 7;
  if (this->password2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password2().data(), static_cast<int>(this->password2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password2(), output);
  }

  // string password3 = 8;
  if (this->password3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password3().data(), static_cast<int>(this->password3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->password3(), output);
  }

  // bool prevent_self_matching = 9;
  if (this->prevent_self_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->prevent_self_matching(), output);
  }

  // int32 stock_option_position_limit = 10;
  if (this->stock_option_position_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stock_option_position_limit(), output);
  }

  // int32 cancel_limit = 11;
  if (this->cancel_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cancel_limit(), output);
  }

  // string user = 12;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TradingAccount)
}

::google::protobuf::uint8* TradingAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // .pb.TradingRoute trading_route = 4;
  if (this->has_trading_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::trading_route(this), target);
  }

  // string account = 5;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // string password = 6;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // string password2 = 7;
  if (this->password2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password2().data(), static_cast<int>(this->password2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password2(), target);
  }

  // string password3 = 8;
  if (this->password3().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password3().data(), static_cast<int>(this->password3().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.password3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->password3(), target);
  }

  // bool prevent_self_matching = 9;
  if (this->prevent_self_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->prevent_self_matching(), target);
  }

  // int32 stock_option_position_limit = 10;
  if (this->stock_option_position_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stock_option_position_limit(), target);
  }

  // int32 cancel_limit = 11;
  if (this->cancel_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cancel_limit(), target);
  }

  // string user = 12;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.TradingAccount.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TradingAccount)
  return target;
}

size_t TradingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.TradingAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string account = 5;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 6;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string password2 = 7;
  if (this->password2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password2());
  }

  // string password3 = 8;
  if (this->password3().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password3());
  }

  // string user = 12;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // .pb.TradingRoute trading_route = 4;
  if (this->has_trading_route()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trading_route_);
  }

  // bool prevent_self_matching = 9;
  if (this->prevent_self_matching() != 0) {
    total_size += 1 + 1;
  }

  // int32 stock_option_position_limit = 10;
  if (this->stock_option_position_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stock_option_position_limit());
  }

  // int32 cancel_limit = 11;
  if (this->cancel_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cancel_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.TradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingAccount* source =
      ::google::protobuf::DynamicCastToGenerated<TradingAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.TradingAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.TradingAccount)
    MergeFrom(*source);
  }
}

void TradingAccount::MergeFrom(const TradingAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.TradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.password2().size() > 0) {

    password2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password2_);
  }
  if (from.password3().size() > 0) {

    password3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password3_);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.has_trading_route()) {
    mutable_trading_route()->::pb::TradingRoute::MergeFrom(from.trading_route());
  }
  if (from.prevent_self_matching() != 0) {
    set_prevent_self_matching(from.prevent_self_matching());
  }
  if (from.stock_option_position_limit() != 0) {
    set_stock_option_position_limit(from.stock_option_position_limit());
  }
  if (from.cancel_limit() != 0) {
    set_cancel_limit(from.cancel_limit());
  }
}

void TradingAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.TradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingAccount::CopyFrom(const TradingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.TradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingAccount::IsInitialized() const {
  return true;
}

void TradingAccount::Swap(TradingAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradingAccount::InternalSwap(TradingAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password2_.Swap(&other->password2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password3_.Swap(&other->password3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trading_route_, other->trading_route_);
  swap(prevent_self_matching_, other->prevent_self_matching_);
  swap(stock_option_position_limit_, other->stock_option_position_limit_);
  swap(cancel_limit_, other->cancel_limit_);
}

::google::protobuf::Metadata TradingAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_trading_2eproto);
  return ::file_level_metadata_trading_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::TradingRoute* Arena::CreateMaybeMessage< ::pb::TradingRoute >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradingRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::TradingAccount* Arena::CreateMaybeMessage< ::pb::TradingAccount >(Arena* arena) {
  return Arena::CreateInternal< ::pb::TradingAccount >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
