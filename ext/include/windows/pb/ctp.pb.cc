// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctp.proto

#include "ctp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountMoneySummary_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MoneyTransferRecord_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProductID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPCommissionRateItem_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPForceCloseTimeRule_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginItem_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginRate_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPOrderID_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPPositionSummation_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqTransfer_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarginCheckRule_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CTPCommissionRate_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderLink_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SettlementUnitOption_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CTPCloseTradeRecord_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CTPTradeReport_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CTPOrder_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CTPPosition_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CTPTradingAccount_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_CTPTradingUnit_ctp_2eproto;
namespace pb {
class CTPOrderIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderID> _instance;
} _CTPOrderID_default_instance_;
class CTPOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrder> _instance;
} _CTPOrder_default_instance_;
class CTPOrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderList> _instance;
} _CTPOrderList_default_instance_;
class CTPOrderLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderLink> _instance;
} _CTPOrderLink_default_instance_;
class CTPCancelOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCancelOrderRequest> _instance;
} _CTPCancelOrderRequest_default_instance_;
class CTPOnRtnCancelOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOnRtnCancelOrder> _instance;
} _CTPOnRtnCancelOrder_default_instance_;
class CTPTradeReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradeReport> _instance;
} _CTPTradeReport_default_instance_;
class CTPTradeReportListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradeReportList> _instance;
} _CTPTradeReportList_default_instance_;
class CTPPositionSummationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPositionSummation> _instance;
} _CTPPositionSummation_default_instance_;
class CTPPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPosition> _instance;
} _CTPPosition_default_instance_;
class CTPPositionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPositionList> _instance;
} _CTPPositionList_default_instance_;
class CTPCloseTradeRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCloseTradeRecord> _instance;
} _CTPCloseTradeRecord_default_instance_;
class CTPCloseTradeRecordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCloseTradeRecordList> _instance;
} _CTPCloseTradeRecordList_default_instance_;
class CTPMarginRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPMarginRate> _instance;
} _CTPMarginRate_default_instance_;
class CTPMarginItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPMarginItem> _instance;
} _CTPMarginItem_default_instance_;
class CTPCommissionRateItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCommissionRateItem> _instance;
} _CTPCommissionRateItem_default_instance_;
class CTPCommissionRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCommissionRate> _instance;
} _CTPCommissionRate_default_instance_;
class CTPTradingUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingUnit> _instance;
} _CTPTradingUnit_default_instance_;
class CTPForceCloseTimeRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPForceCloseTimeRule> _instance;
} _CTPForceCloseTimeRule_default_instance_;
class CTPTradingUnitOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingUnitOption> _instance;
} _CTPTradingUnitOption_default_instance_;
class MarginCheckRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginCheckRule> _instance;
} _MarginCheckRule_default_instance_;
class SettlementUnitOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettlementUnitOption> _instance;
} _SettlementUnitOption_default_instance_;
class CTPTradingAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingAccount> _instance;
} _CTPTradingAccount_default_instance_;
class CTPTradingAccountSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingAccountSnapshot> _instance;
} _CTPTradingAccountSnapshot_default_instance_;
class CTPRspInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPRspInfo> _instance;
} _CTPRspInfo_default_instance_;
class CtpReqQryAccountRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqQryAccountRegister> _instance;
} _CtpReqQryAccountRegister_default_instance_;
class CtpRspQryAccountRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspQryAccountRegister> _instance;
} _CtpRspQryAccountRegister_default_instance_;
class CtpReqAuthencateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqAuthencate> _instance;
} _CtpReqAuthencate_default_instance_;
class CtpRspAuthencateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspAuthencate> _instance;
} _CtpRspAuthencate_default_instance_;
class CtpReqUserLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqUserLogin> _instance;
} _CtpReqUserLogin_default_instance_;
class CtpRspUserLoginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspUserLogin> _instance;
} _CtpRspUserLogin_default_instance_;
class CtpReqConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqConnect> _instance;
} _CtpReqConnect_default_instance_;
class CtpOnFrontConnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpOnFrontConnected> _instance;
} _CtpOnFrontConnected_default_instance_;
class CtpOnFrontDisconnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpOnFrontDisconnected> _instance;
} _CtpOnFrontDisconnected_default_instance_;
class CtpReqSettlementInfoConfirmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqSettlementInfoConfirm> _instance;
} _CtpReqSettlementInfoConfirm_default_instance_;
class CtpOnRspSettlementInfoConfirmDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpOnRspSettlementInfoConfirm> _instance;
} _CtpOnRspSettlementInfoConfirm_default_instance_;
class CtpReqQryInvestorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqQryInvestor> _instance;
} _CtpReqQryInvestor_default_instance_;
class CtpRspQryInvestorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspQryInvestor> _instance;
} _CtpRspQryInvestor_default_instance_;
class CtpReqQryTransferBankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqQryTransferBank> _instance;
} _CtpReqQryTransferBank_default_instance_;
class CtpRspQryTransferBankDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspQryTransferBank> _instance;
} _CtpRspQryTransferBank_default_instance_;
class CtpReqTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpReqTransfer> _instance;
} _CtpReqTransfer_default_instance_;
class CtpRspTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CtpRspTransfer> _instance;
} _CtpRspTransfer_default_instance_;
class CTPReqSubscribeMarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPReqSubscribeMarketData> _instance;
} _CTPReqSubscribeMarketData_default_instance_;
class CTPRspSusbcribeMarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPRspSusbcribeMarketData> _instance;
} _CTPRspSusbcribeMarketData_default_instance_;
class CTPReqUnSusbibeMarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPReqUnSusbibeMarketData> _instance;
} _CTPReqUnSusbibeMarketData_default_instance_;
class CTPRspUnSusbibeMarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPRspUnSusbibeMarketData> _instance;
} _CTPRspUnSusbibeMarketData_default_instance_;
class CTPOnRspOrderInsertDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOnRspOrderInsert> _instance;
} _CTPOnRspOrderInsert_default_instance_;
}  // namespace pb
static void InitDefaultsCTPOrderID_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderID_default_instance_;
    new (ptr) ::pb::CTPOrderID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPOrderID_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPOrderID_ctp_2eproto}, {}};

static void InitDefaultsCTPOrder_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrder_default_instance_;
    new (ptr) ::pb::CTPOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPOrder_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPOrder_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsCTPOrderList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderList_default_instance_;
    new (ptr) ::pb::CTPOrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPOrderList_ctp_2eproto}, {
      &scc_info_CTPOrder_ctp_2eproto.base,}};

static void InitDefaultsCTPOrderLink_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderLink_default_instance_;
    new (ptr) ::pb::CTPOrderLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderLink_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPOrderLink_ctp_2eproto}, {
      &scc_info_CTPOrder_ctp_2eproto.base,}};

static void InitDefaultsCTPCancelOrderRequest_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCancelOrderRequest_default_instance_;
    new (ptr) ::pb::CTPCancelOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCancelOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPCancelOrderRequest_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPCancelOrderRequest_ctp_2eproto}, {
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsCTPOnRtnCancelOrder_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOnRtnCancelOrder_default_instance_;
    new (ptr) ::pb::CTPOnRtnCancelOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOnRtnCancelOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPOnRtnCancelOrder_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPOnRtnCancelOrder_ctp_2eproto}, {
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsCTPTradeReport_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradeReport_default_instance_;
    new (ptr) ::pb::CTPTradeReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradeReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPTradeReport_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPTradeReport_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,}};

static void InitDefaultsCTPTradeReportList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradeReportList_default_instance_;
    new (ptr) ::pb::CTPTradeReportList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradeReportList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPTradeReportList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPTradeReportList_ctp_2eproto}, {
      &scc_info_CTPTradeReport_ctp_2eproto.base,}};

static void InitDefaultsCTPPositionSummation_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPositionSummation_default_instance_;
    new (ptr) ::pb::CTPPositionSummation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPositionSummation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPPositionSummation_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPPositionSummation_ctp_2eproto}, {}};

static void InitDefaultsCTPPosition_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPosition_default_instance_;
    new (ptr) ::pb::CTPPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPPosition_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPPosition_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPPositionSummation_ctp_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsCTPPositionList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPositionList_default_instance_;
    new (ptr) ::pb::CTPPositionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPositionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPPositionList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPPositionList_ctp_2eproto}, {
      &scc_info_CTPPosition_ctp_2eproto.base,}};

static void InitDefaultsCTPCloseTradeRecord_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCloseTradeRecord_default_instance_;
    new (ptr) ::pb::CTPCloseTradeRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCloseTradeRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPCloseTradeRecord_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPCloseTradeRecord_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,}};

static void InitDefaultsCTPCloseTradeRecordList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCloseTradeRecordList_default_instance_;
    new (ptr) ::pb::CTPCloseTradeRecordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCloseTradeRecordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPCloseTradeRecordList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPCloseTradeRecordList_ctp_2eproto}, {
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base,}};

static void InitDefaultsCTPMarginRate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPMarginRate_default_instance_;
    new (ptr) ::pb::CTPMarginRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPMarginRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginRate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPMarginRate_ctp_2eproto}, {}};

static void InitDefaultsCTPMarginItem_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPMarginItem_default_instance_;
    new (ptr) ::pb::CTPMarginItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPMarginItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginItem_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPMarginItem_ctp_2eproto}, {}};

static void InitDefaultsCTPCommissionRateItem_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCommissionRateItem_default_instance_;
    new (ptr) ::pb::CTPCommissionRateItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCommissionRateItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPCommissionRateItem_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPCommissionRateItem_ctp_2eproto}, {}};

static void InitDefaultsCTPCommissionRate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCommissionRate_default_instance_;
    new (ptr) ::pb::CTPCommissionRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCommissionRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPCommissionRate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPCommissionRate_ctp_2eproto}, {
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingUnit_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingUnit_default_instance_;
    new (ptr) ::pb::CTPTradingUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_CTPTradingUnit_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsCTPTradingUnit_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPPosition_ctp_2eproto.base,
      &scc_info_CTPOrderLink_ctp_2eproto.base,
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base,
      &scc_info_CTPOrder_ctp_2eproto.base,
      &scc_info_CTPTradeReport_ctp_2eproto.base,
      &scc_info_CTPCommissionRate_ctp_2eproto.base,
      &scc_info_CTPMarginRate_ctp_2eproto.base,}};

static void InitDefaultsCTPForceCloseTimeRule_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPForceCloseTimeRule_default_instance_;
    new (ptr) ::pb::CTPForceCloseTimeRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPForceCloseTimeRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPForceCloseTimeRule_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPForceCloseTimeRule_ctp_2eproto}, {}};

static void InitDefaultsCTPTradingUnitOption_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingUnitOption_default_instance_;
    new (ptr) ::pb::CTPTradingUnitOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingUnitOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPTradingUnitOption_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPTradingUnitOption_ctp_2eproto}, {
      &scc_info_CTPForceCloseTimeRule_ctp_2eproto.base,
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base,
      &scc_info_CTPMarginItem_ctp_2eproto.base,}};

static void InitDefaultsMarginCheckRule_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MarginCheckRule_default_instance_;
    new (ptr) ::pb::MarginCheckRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MarginCheckRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarginCheckRule_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarginCheckRule_ctp_2eproto}, {}};

static void InitDefaultsSettlementUnitOption_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SettlementUnitOption_default_instance_;
    new (ptr) ::pb::SettlementUnitOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SettlementUnitOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SettlementUnitOption_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettlementUnitOption_ctp_2eproto}, {
      &scc_info_MarginCheckRule_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingAccount_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingAccount_default_instance_;
    new (ptr) ::pb::CTPTradingAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CTPTradingAccount_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCTPTradingAccount_ctp_2eproto}, {
      &scc_info_AccountMoneySummary_common_2eproto.base,
      &scc_info_MoneyTransferRecord_common_2eproto.base,
      &scc_info_CTPTradingUnit_ctp_2eproto.base,
      &scc_info_SettlementUnitOption_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingAccountSnapshot_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingAccountSnapshot_default_instance_;
    new (ptr) ::pb::CTPTradingAccountSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingAccountSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPTradingAccountSnapshot_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPTradingAccountSnapshot_ctp_2eproto}, {
      &scc_info_CTPTradingAccount_ctp_2eproto.base,}};

static void InitDefaultsCTPRspInfo_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPRspInfo_default_instance_;
    new (ptr) ::pb::CTPRspInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPRspInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPRspInfo_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPRspInfo_ctp_2eproto}, {}};

static void InitDefaultsCtpReqQryAccountRegister_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqQryAccountRegister_default_instance_;
    new (ptr) ::pb::CtpReqQryAccountRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqQryAccountRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqQryAccountRegister_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqQryAccountRegister_ctp_2eproto}, {}};

static void InitDefaultsCtpRspQryAccountRegister_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspQryAccountRegister_default_instance_;
    new (ptr) ::pb::CtpRspQryAccountRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspQryAccountRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRspQryAccountRegister_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRspQryAccountRegister_ctp_2eproto}, {}};

static void InitDefaultsCtpReqAuthencate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqAuthencate_default_instance_;
    new (ptr) ::pb::CtpReqAuthencate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqAuthencate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqAuthencate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqAuthencate_ctp_2eproto}, {}};

static void InitDefaultsCtpRspAuthencate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspAuthencate_default_instance_;
    new (ptr) ::pb::CtpRspAuthencate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspAuthencate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRspAuthencate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRspAuthencate_ctp_2eproto}, {}};

static void InitDefaultsCtpReqUserLogin_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqUserLogin_default_instance_;
    new (ptr) ::pb::CtpReqUserLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqUserLogin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqUserLogin_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqUserLogin_ctp_2eproto}, {}};

static void InitDefaultsCtpRspUserLogin_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspUserLogin_default_instance_;
    new (ptr) ::pb::CtpRspUserLogin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspUserLogin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRspUserLogin_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRspUserLogin_ctp_2eproto}, {}};

static void InitDefaultsCtpReqConnect_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqConnect_default_instance_;
    new (ptr) ::pb::CtpReqConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqConnect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqConnect_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqConnect_ctp_2eproto}, {}};

static void InitDefaultsCtpOnFrontConnected_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpOnFrontConnected_default_instance_;
    new (ptr) ::pb::CtpOnFrontConnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpOnFrontConnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpOnFrontConnected_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpOnFrontConnected_ctp_2eproto}, {}};

static void InitDefaultsCtpOnFrontDisconnected_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpOnFrontDisconnected_default_instance_;
    new (ptr) ::pb::CtpOnFrontDisconnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpOnFrontDisconnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpOnFrontDisconnected_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpOnFrontDisconnected_ctp_2eproto}, {}};

static void InitDefaultsCtpReqSettlementInfoConfirm_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqSettlementInfoConfirm_default_instance_;
    new (ptr) ::pb::CtpReqSettlementInfoConfirm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqSettlementInfoConfirm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqSettlementInfoConfirm_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqSettlementInfoConfirm_ctp_2eproto}, {}};

static void InitDefaultsCtpOnRspSettlementInfoConfirm_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpOnRspSettlementInfoConfirm_default_instance_;
    new (ptr) ::pb::CtpOnRspSettlementInfoConfirm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpOnRspSettlementInfoConfirm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpOnRspSettlementInfoConfirm_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpOnRspSettlementInfoConfirm_ctp_2eproto}, {}};

static void InitDefaultsCtpReqQryInvestor_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqQryInvestor_default_instance_;
    new (ptr) ::pb::CtpReqQryInvestor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqQryInvestor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqQryInvestor_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqQryInvestor_ctp_2eproto}, {}};

static void InitDefaultsCtpRspQryInvestor_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspQryInvestor_default_instance_;
    new (ptr) ::pb::CtpRspQryInvestor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspQryInvestor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRspQryInvestor_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRspQryInvestor_ctp_2eproto}, {}};

static void InitDefaultsCtpReqQryTransferBank_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqQryTransferBank_default_instance_;
    new (ptr) ::pb::CtpReqQryTransferBank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqQryTransferBank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqQryTransferBank_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqQryTransferBank_ctp_2eproto}, {}};

static void InitDefaultsCtpRspQryTransferBank_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspQryTransferBank_default_instance_;
    new (ptr) ::pb::CtpRspQryTransferBank();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspQryTransferBank::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpRspQryTransferBank_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpRspQryTransferBank_ctp_2eproto}, {}};

static void InitDefaultsCtpReqTransfer_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpReqTransfer_default_instance_;
    new (ptr) ::pb::CtpReqTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpReqTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CtpReqTransfer_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCtpReqTransfer_ctp_2eproto}, {}};

static void InitDefaultsCtpRspTransfer_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CtpRspTransfer_default_instance_;
    new (ptr) ::pb::CtpRspTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CtpRspTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CtpRspTransfer_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCtpRspTransfer_ctp_2eproto}, {
      &scc_info_CtpReqTransfer_ctp_2eproto.base,}};

static void InitDefaultsCTPReqSubscribeMarketData_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPReqSubscribeMarketData_default_instance_;
    new (ptr) ::pb::CTPReqSubscribeMarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPReqSubscribeMarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPReqSubscribeMarketData_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPReqSubscribeMarketData_ctp_2eproto}, {}};

static void InitDefaultsCTPRspSusbcribeMarketData_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPRspSusbcribeMarketData_default_instance_;
    new (ptr) ::pb::CTPRspSusbcribeMarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPRspSusbcribeMarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPRspSusbcribeMarketData_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPRspSusbcribeMarketData_ctp_2eproto}, {}};

static void InitDefaultsCTPReqUnSusbibeMarketData_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPReqUnSusbibeMarketData_default_instance_;
    new (ptr) ::pb::CTPReqUnSusbibeMarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPReqUnSusbibeMarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPReqUnSusbibeMarketData_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPReqUnSusbibeMarketData_ctp_2eproto}, {}};

static void InitDefaultsCTPRspUnSusbibeMarketData_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPRspUnSusbibeMarketData_default_instance_;
    new (ptr) ::pb::CTPRspUnSusbibeMarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPRspUnSusbibeMarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPRspUnSusbibeMarketData_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPRspUnSusbibeMarketData_ctp_2eproto}, {}};

static void InitDefaultsCTPOnRspOrderInsert_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOnRspOrderInsert_default_instance_;
    new (ptr) ::pb::CTPOnRspOrderInsert();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOnRspOrderInsert::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPOnRspOrderInsert_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPOnRspOrderInsert_ctp_2eproto}, {}};

void InitDefaults_ctp_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderID_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrder_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderLink_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradeReport_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradeReportList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPositionSummation_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPosition_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPositionList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPMarginRate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPMarginItem_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCommissionRate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingUnit_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPForceCloseTimeRule_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginCheckRule_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettlementUnitOption_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingAccount_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPRspInfo_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqQryAccountRegister_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspQryAccountRegister_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqAuthencate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspAuthencate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqUserLogin_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspUserLogin_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqConnect_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpOnFrontConnected_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpOnFrontDisconnected_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqSettlementInfoConfirm_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpOnRspSettlementInfoConfirm_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqQryInvestor_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspQryInvestor_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqQryTransferBank_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspQryTransferBank_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpReqTransfer_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CtpRspTransfer_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPReqSubscribeMarketData_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPRspSusbcribeMarketData_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPReqUnSusbibeMarketData_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPRspUnSusbibeMarketData_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOnRspOrderInsert_ctp_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ctp_2eproto[47];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ctp_2eproto[6];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ctp_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ctp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, order_ref_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, string_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, status_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_traded_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_canceled_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, send_order_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, send_order_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, local_order_seq_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, force_close_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, order_source_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, order_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, user_product_info_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, time_condition_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, token_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, stoploss_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, take_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, traded_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, reason_comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, parent_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, ctporderid_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, token_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, route_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, error_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, error_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, route_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, traded_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, traded_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, tax_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, total_other_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, initial_traded_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, reserve_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReportList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, position_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, cost_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, available_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, position_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, closed_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, mtm_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, cleared_closed_profit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, today_summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, yesterday_summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, last_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, product_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, closed_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, closed_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, initial_open_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, frozen_interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, position_profit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecordList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, product_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, long_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, long_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, short_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, short_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, long_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, long_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, short_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, short_by_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, minimum_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, product_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, settings_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, position_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, order_link_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, position_detail_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_ctr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_order_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_trade_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, last_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, last_mds_update_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, cr_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, mr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, start_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, end_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, disable_open_start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, limit_price_disable_open_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, limit_price_force_close_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_position_percentage_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_position_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_volume_percentage_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_volume_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, single_product_margin_weight_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, fcr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, cr_settings_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, margin_rate_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, stoploss_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, take_profit_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, volume_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_symbol_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_class_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, open_days_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, start_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, end_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_order_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, common_balance_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, disable_open_under_warning_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_by_prefer_ratio_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_by_prefer_ratio_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_by_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_by_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, margin_ceiling_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, position_amount_ceiling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, id_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, available_check_level_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, force_close_on_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, mcr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, disable_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, summary_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, mtr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, tu_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, last_settle_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspInfo, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspInfo, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspInfo, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspInfo, is_last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, bank_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, bank_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryAccountRegister, currency_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, bank_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, bank_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, bank_account_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, broker_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, id_card_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, identified_card_no_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, customer_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, currency_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, open_or_destory_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, reg_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, out_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, tid_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, cust_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, bank_acc_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryAccountRegister, long_customer_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqAuthencate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqAuthencate, auth_code_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqAuthencate, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspAuthencate, user_product_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqUserLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqUserLogin, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqUserLogin, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqUserLogin, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, login_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, system_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, max_order_ref_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, shfe_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, dce_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, czce_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, cffex_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspUserLogin, ine_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqConnect, address_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqConnect, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqConnect, directory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnFrontConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnFrontDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqSettlementInfoConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqSettlementInfoConfirm, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqSettlementInfoConfirm, investor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, investor_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, confirm_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, confirm_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, settlement_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpOnRspSettlementInfoConfirm, currency_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryInvestor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, investor_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, investor_group_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, investor_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, identified_card_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, identified_card_no_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, is_active_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, telphone_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, address_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, open_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryInvestor, mobile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryTransferBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryTransferBank, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqQryTransferBank, investor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, bank_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, bank_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspQryTransferBank, bank_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, trade_code_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, broker_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, broker_branch_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, trade_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, trade_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_serial_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, plate_serieal_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, last_fragment_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, customer_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, id_card_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, identified_card_no_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, cust_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_account_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_password_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, password_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, install_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, future_serial_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, user_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, verify_cert_no_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, currency_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, trade_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, future_fetch_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, fee_pay_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, cust_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, broker_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, message_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, digest_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_acc_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, device_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_secu_acc_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, bank_pwd_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, secu_pwd_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, oper_no_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, tid_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, transfer_status_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpReqTransfer, long_customer_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, is_last_),
  PROTOBUF_FIELD_OFFSET(::pb::CtpRspTransfer, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPReqSubscribeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPReqSubscribeMarketData, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspSusbcribeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPReqUnSusbibeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPReqUnSusbibeMarketData, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPRspUnSusbibeMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRspOrderInsert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRspOrderInsert, error_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRspOrderInsert, error_msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRspOrderInsert, order_ref_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::CTPOrderID)},
  { 9, -1, sizeof(::pb::CTPOrder)},
  { 52, -1, sizeof(::pb::CTPOrderList)},
  { 58, -1, sizeof(::pb::CTPOrderLink)},
  { 65, -1, sizeof(::pb::CTPCancelOrderRequest)},
  { 79, -1, sizeof(::pb::CTPOnRtnCancelOrder)},
  { 93, -1, sizeof(::pb::CTPTradeReport)},
  { 122, -1, sizeof(::pb::CTPTradeReportList)},
  { 128, -1, sizeof(::pb::CTPPositionSummation)},
  { 151, -1, sizeof(::pb::CTPPosition)},
  { 170, -1, sizeof(::pb::CTPPositionList)},
  { 176, -1, sizeof(::pb::CTPCloseTradeRecord)},
  { 211, -1, sizeof(::pb::CTPCloseTradeRecordList)},
  { 217, -1, sizeof(::pb::CTPMarginRate)},
  { 230, -1, sizeof(::pb::CTPMarginItem)},
  { 239, -1, sizeof(::pb::CTPCommissionRateItem)},
  { 249, -1, sizeof(::pb::CTPCommissionRate)},
  { 259, -1, sizeof(::pb::CTPTradingUnit)},
  { 277, -1, sizeof(::pb::CTPForceCloseTimeRule)},
  { 285, -1, sizeof(::pb::CTPTradingUnitOption)},
  { 307, -1, sizeof(::pb::MarginCheckRule)},
  { 325, -1, sizeof(::pb::SettlementUnitOption)},
  { 337, -1, sizeof(::pb::CTPTradingAccount)},
  { 347, -1, sizeof(::pb::CTPTradingAccountSnapshot)},
  { 355, -1, sizeof(::pb::CTPRspInfo)},
  { 364, -1, sizeof(::pb::CtpReqQryAccountRegister)},
  { 374, -1, sizeof(::pb::CtpRspQryAccountRegister)},
  { 401, -1, sizeof(::pb::CtpReqAuthencate)},
  { 408, -1, sizeof(::pb::CtpRspAuthencate)},
  { 420, -1, sizeof(::pb::CtpReqUserLogin)},
  { 428, -1, sizeof(::pb::CtpRspUserLogin)},
  { 450, -1, sizeof(::pb::CtpReqConnect)},
  { 458, -1, sizeof(::pb::CtpOnFrontConnected)},
  { 463, -1, sizeof(::pb::CtpOnFrontDisconnected)},
  { 468, -1, sizeof(::pb::CtpReqSettlementInfoConfirm)},
  { 475, -1, sizeof(::pb::CtpOnRspSettlementInfoConfirm)},
  { 491, -1, sizeof(::pb::CtpReqQryInvestor)},
  { 496, -1, sizeof(::pb::CtpRspQryInvestor)},
  { 516, -1, sizeof(::pb::CtpReqQryTransferBank)},
  { 523, -1, sizeof(::pb::CtpRspQryTransferBank)},
  { 536, -1, sizeof(::pb::CtpReqTransfer)},
  { 583, -1, sizeof(::pb::CtpRspTransfer)},
  { 593, -1, sizeof(::pb::CTPReqSubscribeMarketData)},
  { 599, -1, sizeof(::pb::CTPRspSusbcribeMarketData)},
  { 604, -1, sizeof(::pb::CTPReqUnSusbibeMarketData)},
  { 610, -1, sizeof(::pb::CTPRspUnSusbibeMarketData)},
  { 615, -1, sizeof(::pb::CTPOnRspOrderInsert)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCancelOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOnRtnCancelOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradeReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradeReportList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPositionSummation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPositionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCloseTradeRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCloseTradeRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPMarginRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPMarginItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCommissionRateItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCommissionRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPForceCloseTimeRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingUnitOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_MarginCheckRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SettlementUnitOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingAccountSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPRspInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqQryAccountRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspQryAccountRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqAuthencate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspAuthencate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqUserLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspUserLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpOnFrontConnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpOnFrontDisconnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqSettlementInfoConfirm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpOnRspSettlementInfoConfirm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqQryInvestor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspQryInvestor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqQryTransferBank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspQryTransferBank_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpReqTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CtpRspTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPReqSubscribeMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPRspSusbcribeMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPReqUnSusbibeMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPRspUnSusbibeMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOnRspOrderInsert_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ctp_2eproto = {
  {}, AddDescriptors_ctp_2eproto, "ctp.proto", schemas,
  file_default_instances, TableStruct_ctp_2eproto::offsets,
  file_level_metadata_ctp_2eproto, 47, file_level_enum_descriptors_ctp_2eproto, file_level_service_descriptors_ctp_2eproto,
};

const char descriptor_table_protodef_ctp_2eproto[] =
  "\n\tctp.proto\022\002pb\032\014common.proto\"X\n\nCTPOrde"
  "rID\022\020\n\010front_id\030\001 \001(\003\022\022\n\nsession_id\030\002 \001("
  "\003\022\021\n\torder_ref\030\003 \001(\003\022\021\n\tstring_id\030\004 \001(\t\""
  "\353\007\n\010CTPOrder\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symbol"
  "\022\032\n\002id\030\002 \001(\0132\016.pb.CTPOrderID\022\022\n\naccount_"
  "id\030\003 \001(\t\022#\n\tdirection\030\004 \001(\0162\020.pb.CTPDire"
  "ction\022\"\n\006status\030\005 \001(\0162\022.pb.CTPOrderStatu"
  "s\022$\n\nprice_type\030\006 \001(\0162\020.pb.CTPPriceType\022"
  "\023\n\013limit_price\030\007 \001(\001\022\016\n\006volume\030\010 \001(\005\022\025\n\r"
  "volume_traded\030\t \001(\005\022\027\n\017volume_canceled\030\n"
  " \001(\005\022\031\n\021frozen_commission\030\013 \001(\001\022\027\n\017send_"
  "order_time\030\014 \001(\003\022\036\n\026send_order_trading_d"
  "ay\030\r \001(\005\022\017\n\007comment\030\016 \001(\t\022\022\n\nrequest_id\030"
  "\017 \001(\005\022\027\n\017local_order_seq\030\020 \001(\005\022\030\n\020force_"
  "close_type\030\021 \001(\005\022\031\n\021order_source_type\030\022 "
  "\001(\005\022*\n\020order_hedge_type\030\023 \001(\0162\020.pb.CTPHe"
  "dgeType\022\031\n\021user_product_info\030\024 \001(\t\022\'\n\rcu"
  "rrency_type\030\025 \001(\0162\020.pb.CurrencyType\022\031\n\021e"
  "xchange_order_id\030\026 \001(\t\022\033\n\023time_condition"
  "_type\030\027 \001(\005\022\030\n\020route_account_id\030\030 \001(\t\022\025\n"
  "\rlocal_type_id\030\031 \001(\005\022\022\n\ncommission\030\032 \001(\001"
  "\022&\n\013offset_flag\030\033 \001(\0162\021.pb.CTPOffsetFlag"
  "\022\022\n\nerror_code\030\034 \001(\005\022\r\n\005token\030\035 \001(\t\022\020\n\010s"
  "toploss\030\036 \001(\001\022\023\n\013take_profit\030\037 \001(\001\022\025\n\rtr"
  "aded_amount\030  \001(\001\022\027\n\017volume_multiple\030! \001"
  "(\005\022!\n\nproduct_id\030\" \001(\0132\r.pb.ProductID\022\022\n"
  "\nprice_tick\030# \001(\001\022\025\n\rfrozen_margin\030$ \001(\001"
  "\022\023\n\013symbol_name\030% \001(\t\022\026\n\016reason_comment\030"
  "& \001(\t\"*\n\014CTPOrderList\022\032\n\004list\030\001 \003(\0132\014.pb"
  ".CTPOrder\"L\n\014CTPOrderLink\022\034\n\006parent\030\001 \001("
  "\0132\014.pb.CTPOrder\022\036\n\010children\030\002 \003(\0132\014.pb.C"
  "TPOrder\"\351\001\n\025CTPCancelOrderRequest\022\022\n\nacc"
  "ount_id\030\001 \001(\t\022\"\n\nCTPOrderID\030\002 \001(\0132\016.pb.C"
  "TPOrderID\022\032\n\006symbol\030\003 \001(\0132\n.pb.Symbol\022\022\n"
  "\nrequest_id\030\004 \001(\005\022\020\n\010front_id\030\005 \001(\005\022\022\n\ns"
  "ession_id\030\006 \001(\005\022\031\n\021exchange_order_id\030\007 \001"
  "(\t\022\r\n\005token\030\010 \001(\t\022\030\n\020route_account_id\030\t "
  "\001(\t\"\340\001\n\023CTPOnRtnCancelOrder\022\022\n\naccount_i"
  "d\030\001 \001(\t\022 \n\010order_id\030\002 \001(\0132\016.pb.CTPOrderI"
  "D\022\031\n\021exchange_order_id\030\003 \001(\t\022\032\n\006symbol\030\004"
  " \001(\0132\n.pb.Symbol\022\022\n\nrequest_id\030\005 \001(\005\022\022\n\n"
  "error_type\030\006 \001(\005\022\r\n\005error\030\007 \001(\005\022\013\n\003msg\030\010"
  " \001(\t\022\030\n\020route_account_id\030\t \001(\t\"\370\004\n\016CTPTr"
  "adeReport\022\022\n\naccount_id\030\001 \001(\t\022\020\n\010trade_i"
  "d\030\002 \001(\t\022\032\n\006symbol\030\003 \001(\0132\n.pb.Symbol\022#\n\td"
  "irection\030\004 \001(\0162\020.pb.CTPDirection\022\r\n\005pric"
  "e\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005\022\023\n\013traded_time\030\007"
  " \001(\003\022\032\n\022traded_trading_day\030\010 \001(\005\022 \n\010orde"
  "r_id\030\t \001(\0132\016.pb.CTPOrderID\022$\n\nprice_type"
  "\030\n \001(\0162\020.pb.CTPPriceType\022$\n\nhedge_type\030\013"
  " \001(\0162\020.pb.CTPHedgeType\022$\n\ntrade_type\030\014 \001"
  "(\0162\020.pb.CTPTradeType\022\025\n\rcurrency_type\030\r "
  "\001(\005\022\031\n\021exchange_order_id\030\016 \001(\t\022\025\n\rlocal_"
  "type_id\030\017 \001(\005\022\022\n\ncommission\030\020 \001(\001\022\013\n\003tax"
  "\030\021 \001(\001\022\027\n\017total_other_fee\030\022 \001(\001\022\034\n\024initi"
  "al_traded_price\030\023 \001(\001\022\017\n\007reserve\030\024 \001(\001\022&"
  "\n\013offset_flag\030\025 \001(\0162\021.pb.CTPOffsetFlag\022\030"
  "\n\020route_account_id\030\026 \001(\t\022\023\n\013symbol_name\030"
  "\027 \001(\t\022\022\n\nprice_tick\030\030 \001(\001\"6\n\022CTPTradeRep"
  "ortList\022 \n\004list\030\001 \003(\0132\022.pb.CTPTradeRepor"
  "t\"\232\003\n\024CTPPositionSummation\022#\n\tdirection\030"
  "\001 \001(\0162\020.pb.CTPDirection\022\014\n\004type\030\002 \001(\005\022\030\n"
  "\020route_account_id\030\003 \001(\t\022\020\n\010position\030\004 \001("
  "\005\022\016\n\006amount\030\005 \001(\001\022\014\n\004cost\030\006 \001(\001\022\016\n\006froze"
  "n\030\007 \001(\005\022\021\n\tavailable\030\010 \001(\005\022\027\n\017position_p"
  "rofit\030\t \001(\001\022\025\n\rclosed_profit\030\n \001(\001\022\016\n\006ma"
  "rgin\030\013 \001(\001\022\025\n\rfrozen_margin\030\014 \001(\001\022\022\n\ncom"
  "mission\030\r \001(\001\022\031\n\021frozen_commission\030\016 \001(\001"
  "\022\020\n\010interest\030\017 \001(\001\022\027\n\017frozen_interest\030\020 "
  "\001(\001\022\022\n\nmtm_profit\030\021 \001(\001\022\035\n\025cleared_close"
  "d_profit\030\022 \001(\001\"\260\003\n\013CTPPosition\022\032\n\006symbol"
  "\030\001 \001(\0132\n.pb.Symbol\022+\n\tsummation\030\002 \001(\0132\030."
  "pb.CTPPositionSummation\0221\n\017today_summati"
  "on\030\003 \001(\0132\030.pb.CTPPositionSummation\0225\n\023ye"
  "sterday_summation\030\004 \001(\0132\030.pb.CTPPosition"
  "Summation\022\034\n\024pre_settlement_price\030\005 \001(\001\022"
  "\030\n\020settlement_price\030\006 \001(\001\022\022\n\nlast_price\030"
  "\007 \001(\001\022\023\n\013trading_day\030\010 \001(\005\022\024\n\014product_ty"
  "pe\030\t \001(\005\022\027\n\017volume_multiple\030\013 \001(\005\022!\n\npro"
  "duct_id\030\014 \001(\0132\r.pb.ProductID\022\022\n\nprice_ti"
  "ck\030\r \001(\001\022\023\n\013symbol_name\030\016 \001(\t\022\022\n\naccount"
  "_id\030\017 \001(\t\"0\n\017CTPPositionList\022\035\n\004list\030\001 \003"
  "(\0132\017.pb.CTPPosition\"\244\006\n\023CTPCloseTradeRec"
  "ord\022\022\n\naccount_id\030\001 \001(\t\022\032\n\006symbol\030\002 \001(\0132"
  "\n.pb.Symbol\022#\n\tdirection\030\003 \001(\0162\020.pb.CTPD"
  "irection\022\023\n\013open_volume\030\004 \001(\005\022\023\n\013open_am"
  "ount\030\005 \001(\001\022\025\n\rclosed_volume\030\006 \001(\005\022\025\n\rclo"
  "sed_amount\030\007 \001(\001\022\021\n\topen_time\030\010 \001(\003\022\030\n\020o"
  "pen_trading_day\030\t \001(\005\022%\n\ropen_order_id\030\n"
  " \001(\0132\016.pb.CTPOrderID\022\025\n\ropen_trade_id\030\013 "
  "\001(\t\022\027\n\017open_trade_type\030\014 \001(\005\022\027\n\017open_hed"
  "ge_type\030\r \001(\005\022\022\n\nclose_time\030\016 \001(\003\022\031\n\021clo"
  "se_trading_day\030\017 \001(\005\022&\n\016close_order_id\030\020"
  " \001(\0132\016.pb.CTPOrderID\022\026\n\016close_trade_id\030\021"
  " \001(\t\022\030\n\020close_trade_type\030\022 \001(\005\022\030\n\020close_"
  "hedge_type\030\023 \001(\005\022\024\n\014close_profit\030\024 \001(\001\022\034"
  "\n\024pre_settlement_price\030\025 \001(\001\022\'\n\rcurrency"
  "_type\030\026 \001(\0162\020.pb.CurrencyType\022\027\n\017open_co"
  "mmission\030\027 \001(\001\022\030\n\020close_commission\030\030 \001(\001"
  "\022\016\n\006margin\030\031 \001(\001\022\033\n\023initial_open_amount\030"
  "\032 \001(\001\022\027\n\017volume_multiple\030\033 \001(\005\022\027\n\017frozen"
  "_interest\030\034 \001(\001\022\030\n\020route_account_id\030\035 \001("
  "\t\022\027\n\017position_profit\030\036 \001(\001\"@\n\027CTPCloseTr"
  "adeRecordList\022%\n\004list\030\001 \003(\0132\027.pb.CTPClos"
  "eTradeRecord\"\302\001\n\rCTPMarginRate\022\"\n\010exchan"
  "ge\030\001 \001(\0162\020.pb.ExchangeType\022\016\n\006symbol\030\002 \001"
  "(\t\022\017\n\007product\030\003 \001(\t\022\026\n\016long_by_volume\030\004 "
  "\001(\001\022\026\n\016long_by_amount\030\005 \001(\001\022\027\n\017short_by_"
  "volume\030\006 \001(\001\022\027\n\017short_by_amount\030\007 \001(\001\022\n\n"
  "\002id\030\n \001(\003\"q\n\rCTPMarginItem\022\026\n\016long_by_vo"
  "lume\030\001 \001(\001\022\026\n\016long_by_amount\030\002 \001(\001\022\027\n\017sh"
  "ort_by_volume\030\003 \001(\001\022\027\n\017short_by_amount\030\004"
  " \001(\001\"\203\001\n\025CTPCommissionRateItem\022\021\n\tby_amo"
  "unt\030\001 \001(\001\022\021\n\tby_volume\030\002 \001(\001\022\017\n\007minimum\030"
  "\003 \001(\001\022&\n\013offset_flag\030\004 \001(\0162\021.pb.CTPOffse"
  "tFlag\022\013\n\003tag\030\005 \001(\t\"\221\001\n\021CTPCommissionRate"
  "\022\"\n\010exchange\030\001 \001(\0162\020.pb.ExchangeType\022\016\n\006"
  "symbol\030\002 \001(\t\022\017\n\007product\030\003 \001(\t\022+\n\010setting"
  "s\030\004 \003(\0132\031.pb.CTPCommissionRateItem\022\n\n\002id"
  "\030\005 \001(\003\"\337\003\n\016CTPTradingUnit\022\032\n\006symbol\030\001 \001("
  "\0132\n.pb.Symbol\022!\n\010position\030\002 \003(\0132\017.pb.CTP"
  "Position\022)\n\017order_link_list\030\003 \003(\0132\020.pb.C"
  "TPOrderLink\0225\n\024position_detail_list\030\004 \003("
  "\0132\027.pb.CTPCloseTradeRecord\0221\n\020history_ct"
  "r_list\030\005 \003(\0132\027.pb.CTPCloseTradeRecord\022(\n"
  "\022history_order_list\030\006 \003(\0132\014.pb.CTPOrder\022"
  ".\n\022history_trade_list\030\007 \003(\0132\022.pb.CTPTrad"
  "eReport\022\022\n\nlast_price\030\n \001(\001\022\034\n\024last_mds_"
  "update_time\030\013 \001(\003\022\022\n\nprice_tick\030\014 \001(\001\022\027\n"
  "\017volume_multiple\030\r \001(\005\022!\n\002cr\030\016 \001(\0132\025.pb."
  "CTPCommissionRate\022\035\n\002mr\030\017 \001(\0132\021.pb.CTPMa"
  "rginRate\"O\n\025CTPForceCloseTimeRule\022\r\n\005sta"
  "rt\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\022\032\n\022disable_open_st"
  "art\030\003 \001(\003\"\346\004\n\024CTPTradingUnitOption\022 \n\030li"
  "mit_price_disable_open\030\001 \001(\005\022\037\n\027limit_pr"
  "ice_force_close\030\002 \001(\005\022)\n!pre_position_pe"
  "rcentage_threshold\030\003 \001(\001\022\036\n\026pre_position"
  "_threshold\030\004 \001(\001\022\'\n\037pre_volume_percentag"
  "e_threshold\030\005 \001(\001\022\034\n\024pre_volume_threshol"
  "d\030\006 \001(\001\022*\n\"single_product_margin_weight_"
  "limit\030\007 \001(\001\022+\n\010fcr_list\030\010 \003(\0132\031.pb.CTPFo"
  "rceCloseTimeRule\022\024\n\014disable_open\030\t \001(\010\022."
  "\n\013cr_settings\030\n \003(\0132\031.pb.CTPCommissionRa"
  "teItem\022&\n\013margin_rate\030\013 \001(\0132\021.pb.CTPMarg"
  "inItem\022\033\n\023stoploss_candidates\030\014 \003(\005\022\036\n\026t"
  "ake_profit_candidates\030\r \003(\005\022\031\n\021volume_ca"
  "ndidates\030\016 \003(\005\022 \n\030disable_open_symbol_li"
  "st\030\017 \003(\t\022\037\n\027disable_open_class_list\030\020 \003("
  "\t\022\027\n\017open_days_limit\030\021 \001(\005\"\226\003\n\017MarginChe"
  "ckRule\022\r\n\005start\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\022\031\n\021fo"
  "rce_close_order\030\003 \001(\005\022\025\n\rwarning_level\030\004"
  " \001(\001\022\031\n\021force_close_level\030\005 \001(\001\022\037\n\027commo"
  "n_balance_multiple\030\006 \001(\001\022(\n disable_open"
  "_under_warning_level\030\007 \001(\010\022%\n\035warning_le"
  "vel_by_prefer_ratio\030\010 \001(\001\022)\n!force_close"
  "_level_by_prefer_ratio\030\t \001(\001\022\037\n\027warning_"
  "level_by_margin\030\n \001(\001\022#\n\033force_close_lev"
  "el_by_margin\030\013 \001(\001\022\026\n\016margin_ceiling\030\014 \001"
  "(\001\022\037\n\027position_amount_ceiling\030\r \001(\001\"\301\001\n\024"
  "SettlementUnitOption\022\n\n\002id\030\001 \001(\003\022\017\n\007comm"
  "ent\030\002 \001(\t\022\030\n\020settlement_group\030\003 \001(\005\022\035\n\025a"
  "vailable_check_level\030\004 \001(\005\022\026\n\016force_clos"
  "e_on\030\005 \001(\010\022%\n\010mcr_list\030\006 \003(\0132\023.pb.Margin"
  "CheckRule\022\024\n\014disable_open\030\007 \001(\010\"\322\001\n\021CTPT"
  "radingAccount\022(\n\007summary\030\001 \001(\0132\027.pb.Acco"
  "untMoneySummary\022)\n\010mtr_list\030\002 \003(\0132\027.pb.M"
  "oneyTransferRecord\022#\n\007tu_list\030\003 \003(\0132\022.pb"
  ".CTPTradingUnit\022\030\n\020last_settle_date\030\004 \001("
  "\005\022)\n\007options\030\005 \001(\0132\030.pb.SettlementUnitOp"
  "tion\"b\n\031CTPTradingAccountSnapshot\022&\n\007acc"
  "ount\030\001 \001(\0132\025.pb.CTPTradingAccount\022\014\n\004tim"
  "e\030\002 \001(\003\022\017\n\007comment\030\003 \001(\t\"V\n\nCTPRspInfo\022\020"
  "\n\010error_id\030\001 \001(\005\022\021\n\terror_msg\030\002 \001(\014\022\022\n\nr"
  "equest_id\030\003 \001(\005\022\017\n\007is_last\030\004 \001(\010\"\177\n\030CtpR"
  "eqQryAccountRegister\022\021\n\tbroker_id\030\001 \001(\t\022"
  "\022\n\naccount_id\030\002 \001(\t\022\017\n\007bank_id\030\003 \001(\t\022\026\n\016"
  "bank_branch_id\030\004 \001(\t\022\023\n\013currency_id\030\005 \001("
  "\t\"\347\003\n\030CtpRspQryAccountRegister\022\020\n\010error_"
  "id\030\001 \001(\005\022\021\n\terror_msg\030\002 \001(\t\022\022\n\nrequest_i"
  "d\030\003 \001(\005\022\017\n\007is_last\030\004 \001(\010\022\023\n\013trading_day\030"
  "\005 \001(\t\022\017\n\007bank_id\030\006 \001(\t\022\026\n\016bank_branch_id"
  "\030\007 \001(\t\022\024\n\014bank_account\030\010 \001(\t\022\021\n\tbroker_i"
  "d\030\t \001(\t\022\030\n\020broker_branch_id\030\n \001(\t\022\022\n\nacc"
  "ount_id\030\013 \001(\t\022\024\n\014id_card_type\030\014 \001(\005\022\032\n\022i"
  "dentified_card_no\030\r \001(\t\022\025\n\rcustomer_name"
  "\030\016 \001(\t\022\023\n\013currency_id\030\017 \001(\t\022\027\n\017open_or_d"
  "estory\030\020 \001(\005\022\020\n\010reg_date\030\021 \001(\t\022\020\n\010out_da"
  "te\030\022 \001(\t\022\013\n\003tid\030\023 \001(\005\022\021\n\tcust_type\030\024 \001(\005"
  "\022\025\n\rbank_acc_type\030\025 \001(\005\022\032\n\022long_customer"
  "_name\030\026 \001(\t\"6\n\020CtpReqAuthencate\022\021\n\tauth_"
  "code\030\001 \001(\t\022\017\n\007product\030\002 \001(\t\"\233\001\n\020CtpRspAu"
  "thencate\022\020\n\010error_id\030\001 \001(\005\022\021\n\terror_msg\030"
  "\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\005\022\017\n\007is_last\030\004 \001"
  "(\010\022\021\n\tbroker_id\030\005 \001(\t\022\017\n\007user_id\030\006 \001(\t\022\031"
  "\n\021user_product_info\030\007 \001(\t\"G\n\017CtpReqUserL"
  "ogin\022\021\n\tbroker_id\030\001 \001(\t\022\017\n\007account\030\002 \001(\t"
  "\022\020\n\010password\030\003 \001(\t\"\330\002\n\017CtpRspUserLogin\022\020"
  "\n\010error_id\030\001 \001(\005\022\021\n\terror_msg\030\002 \001(\t\022\022\n\nr"
  "equest_id\030\003 \001(\005\022\017\n\007is_last\030\004 \001(\010\022\023\n\013trad"
  "ing_day\030\005 \001(\t\022\022\n\nlogin_time\030\006 \001(\t\022\021\n\tbro"
  "ker_id\030\007 \001(\t\022\017\n\007user_id\030\010 \001(\t\022\023\n\013system_"
  "name\030\t \001(\t\022\020\n\010front_id\030\n \001(\005\022\022\n\nsession_"
  "id\030\013 \001(\005\022\025\n\rmax_order_ref\030\014 \001(\t\022\021\n\tshfe_"
  "time\030\r \001(\t\022\020\n\010dce_time\030\016 \001(\t\022\021\n\tczce_tim"
  "e\030\017 \001(\t\022\022\n\ncffex_time\030\020 \001(\t\022\020\n\010ine_time\030"
  "\021 \001(\t\"D\n\rCtpReqConnect\022\017\n\007address\030\001 \001(\t\022"
  "\017\n\007account\030\002 \001(\t\022\021\n\tdirectory\030\003 \001(\t\"\025\n\023C"
  "tpOnFrontConnected\"\030\n\026CtpOnFrontDisconne"
  "cted\"E\n\033CtpReqSettlementInfoConfirm\022\021\n\tb"
  "roker_id\030\001 \001(\t\022\023\n\013investor_id\030\002 \001(\t\"\375\001\n\035"
  "CtpOnRspSettlementInfoConfirm\022\020\n\010error_i"
  "d\030\001 \001(\005\022\021\n\terror_msg\030\002 \001(\t\022\022\n\nrequest_id"
  "\030\003 \001(\005\022\017\n\007is_last\030\004 \001(\010\022\021\n\tbroker_id\030\005 \001"
  "(\t\022\023\n\013investor_id\030\006 \001(\t\022\024\n\014confirm_date\030"
  "\007 \001(\t\022\024\n\014confirm_time\030\010 \001(\t\022\025\n\rsettlemen"
  "t_id\030\t \001(\005\022\022\n\naccount_id\030\n \001(\t\022\023\n\013curren"
  "cy_id\030\013 \001(\t\"\023\n\021CtpReqQryInvestor\"\312\002\n\021Ctp"
  "RspQryInvestor\022\020\n\010error_id\030\001 \001(\005\022\021\n\terro"
  "r_msg\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\005\022\017\n\007is_la"
  "st\030\004 \001(\010\022\023\n\013investor_id\030\005 \001(\t\022\021\n\tbroker_"
  "id\030\006 \001(\t\022\031\n\021investor_group_id\030\007 \001(\t\022\025\n\ri"
  "nvestor_name\030\010 \001(\t\022\034\n\024identified_card_ty"
  "pe\030\t \001(\005\022\032\n\022identified_card_no\030\n \001(\t\022\021\n\t"
  "is_active\030\013 \001(\010\022\020\n\010telphone\030\014 \001(\t\022\017\n\007add"
  "ress\030\r \001(\t\022\021\n\topen_date\030\016 \001(\t\022\016\n\006mobile\030"
  "\017 \001(\t\"\?\n\025CtpReqQryTransferBank\022\021\n\tbroker"
  "_id\030\001 \001(\t\022\023\n\013investor_id\030\002 \001(\t\"\260\001\n\025CtpRs"
  "pQryTransferBank\022\020\n\010error_id\030\001 \001(\005\022\021\n\ter"
  "ror_msg\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\005\022\017\n\007is_"
  "last\030\004 \001(\010\022\021\n\tbroker_id\030\005 \001(\t\022\017\n\007bank_id"
  "\030\006 \001(\t\022\026\n\016bank_branch_id\030\007 \001(\t\022\021\n\tbank_n"
  "ame\030\010 \001(\t\"\221\007\n\016CtpReqTransfer\022\022\n\ntrade_co"
  "de\030\001 \001(\t\022\017\n\007bank_id\030\002 \001(\t\022\026\n\016bank_branch"
  "_id\030\003 \001(\t\022\021\n\tbroker_id\030\004 \001(\t\022\030\n\020broker_b"
  "ranch_id\030\005 \001(\t\022\022\n\ntrade_date\030\006 \001(\t\022\022\n\ntr"
  "ade_time\030\007 \001(\t\022\023\n\013bank_serial\030\010 \001(\t\022\023\n\013t"
  "rading_day\030\t \001(\t\022\025\n\rplate_serieal\030\n \001(\005\022"
  "\025\n\rlast_fragment\030\013 \001(\t\022\022\n\nsession_id\030\014 \001"
  "(\005\022\025\n\rcustomer_name\030\r \001(\t\022\024\n\014id_card_typ"
  "e\030\016 \001(\005\022\032\n\022identified_card_no\030\017 \001(\t\022\021\n\tc"
  "ust_type\030\020 \001(\t\022\024\n\014bank_account\030\021 \001(\t\022\025\n\r"
  "bank_password\030\022 \001(\t\022\022\n\naccount_id\030\023 \001(\t\022"
  "\020\n\010password\030\024 \001(\t\022\022\n\ninstall_id\030\025 \001(\005\022\025\n"
  "\rfuture_serial\030\026 \001(\005\022\017\n\007user_id\030\027 \001(\t\022\033\n"
  "\023verify_cert_no_flag\030\030 \001(\t\022\023\n\013currency_i"
  "d\030\031 \001(\t\022\024\n\014trade_amount\030\032 \001(\001\022\033\n\023future_"
  "fetch_amount\030\033 \001(\001\022\024\n\014fee_pay_flag\030\034 \001(\005"
  "\022\020\n\010cust_fee\030\035 \001(\001\022\022\n\nbroker_fee\030\036 \001(\001\022\017"
  "\n\007message\030\037 \001(\t\022\016\n\006digest\030  \001(\t\022\025\n\rbank_"
  "acc_type\030! \001(\005\022\021\n\tdevice_id\030\" \001(\t\022\025\n\rban"
  "k_secu_acc\030# \001(\t\022\025\n\rbank_pwd_flag\030$ \001(\t\022"
  "\025\n\rsecu_pwd_flag\030% \001(\t\022\017\n\007oper_no\030& \001(\t\022"
  "\022\n\nrequest_id\030\' \001(\005\022\013\n\003tid\030( \001(\005\022\027\n\017tran"
  "sfer_status\030) \001(\t\022\032\n\022long_customer_name\030"
  "* \001(\t\"{\n\016CtpRspTransfer\022\020\n\010error_id\030\001 \001("
  "\005\022\021\n\terror_msg\030\002 \001(\t\022\022\n\nrequest_id\030\003 \001(\005"
  "\022\017\n\007is_last\030\004 \001(\010\022\037\n\003req\030\005 \001(\0132\022.pb.CtpR"
  "eqTransfer\")\n\031CTPReqSubscribeMarketData\022"
  "\014\n\004list\030\001 \003(\t\"\033\n\031CTPRspSusbcribeMarketDa"
  "ta\")\n\031CTPReqUnSusbibeMarketData\022\014\n\004list\030"
  "\001 \003(\t\"\033\n\031CTPRspUnSusbibeMarketData\"M\n\023CT"
  "POnRspOrderInsert\022\020\n\010error_id\030\001 \001(\005\022\021\n\te"
  "rror_msg\030\002 \001(\014\022\021\n\torder_ref\030\003 \001(\t*#\n\014CTP"
  "Direction\022\010\n\004LONG\020\000\022\t\n\005SHORT\020\001*\252\001\n\016CTPOr"
  "derStatus\022\017\n\013CTP_OS_DONE\020\000\022$\n CTP_OS_PEN"
  "DING_WITH_PARTIAL_DONE\020\001\022%\n!CTP_OS_CANCE"
  "LED_WITH_PARTIAL_DONE\020\002\022\022\n\016CTP_OS_PENDIN"
  "G\020\003\022\023\n\017CTP_OS_CANCELED\020\004\022\021\n\rCTP_OS_UNKOW"
  "N\020\005*Q\n\014CTPPriceType\022\017\n\013LIMIT_PRICE\020\000\022\020\n\014"
  "MARKET_PRICE\020\001\022\016\n\nBEST_PRICE\020\002\022\016\n\nLAST_P"
  "RICE\020\003*e\n\rCTPOffsetFlag\022\010\n\004NONE\020\000\022\010\n\004OPE"
  "N\020\001\022\t\n\005CLOSE\020\002\022\017\n\013FORCE_CLOSE\020\003\022\017\n\013CLOSE"
  "_TODAY\020\004\022\023\n\017CLOSE_YESTERDAY\020\005*9\n\014CTPHedg"
  "eType\022\017\n\013SPECULATION\020\000\022\r\n\tARBITRAGE\020\001\022\t\n"
  "\005HEDGE\020\002*\247\001\n\014CTPTradeType\022\n\n\006NORMAL\020\000\022\025\n"
  "\021OPTIONS_EXECUTION\020\001\022\007\n\003OTC\020\002\022\017\n\013EFP_DER"
  "IVED\020\003\022\027\n\023COMBINATION_DERIVED\020\004\022\022\n\016DELIV"
  "ERY_CLOSE\020\005\022\026\n\022SETTLEMENT_DERIVED\020\006\022\025\n\021P"
  "LACEMENT_DERIVED\020\007b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ctp_2eproto = {
  false, InitDefaults_ctp_2eproto, 
  descriptor_table_protodef_ctp_2eproto,
  "ctp.proto", &assign_descriptors_table_ctp_2eproto, 11146,
};

void AddDescriptors_ctp_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_common_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ctp_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ctp_2eproto = []() { AddDescriptors_ctp_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* CTPDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[0];
}
bool CTPDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOrderStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[1];
}
bool CTPOrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPPriceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[2];
}
bool CTPPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOffsetFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[3];
}
bool CTPOffsetFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPHedgeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[4];
}
bool CTPHedgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPTradeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[5];
}
bool CTPTradeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CTPOrderID::InitAsDefaultInstance() {
}
class CTPOrderID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderID::kFrontIdFieldNumber;
const int CTPOrderID::kSessionIdFieldNumber;
const int CTPOrderID::kOrderRefFieldNumber;
const int CTPOrderID::kStringIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderID::CTPOrderID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderID)
}
CTPOrderID::CTPOrderID(const CTPOrderID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.string_id().size() > 0) {
    string_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_id_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_ref_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderID)
}

void CTPOrderID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderID_ctp_2eproto.base);
  string_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
}

CTPOrderID::~CTPOrderID() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderID)
  SharedDtor();
}

void CTPOrderID::SharedDtor() {
  string_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPOrderID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderID& CTPOrderID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderID_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 front_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 order_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_order_ref(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string string_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrderID.string_id");
        object = msg->mutable_string_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 front_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 order_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_id().data(), static_cast<int>(this->string_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrderID.string_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->front_id(), output);
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->session_id(), output);
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->order_ref(), output);
  }

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_id().data(), static_cast<int>(this->string_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrderID.string_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderID)
}

::google::protobuf::uint8* CTPOrderID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->front_id(), target);
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->session_id(), target);
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->order_ref(), target);
  }

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_id().data(), static_cast<int>(this->string_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrderID.string_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderID)
  return target;
}

size_t CTPOrderID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_id());
  }

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->front_id());
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderID)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderID* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderID)
    MergeFrom(*source);
  }
}

void CTPOrderID::MergeFrom(const CTPOrderID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_id().size() > 0) {

    string_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_id_);
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.order_ref() != 0) {
    set_order_ref(from.order_ref());
  }
}

void CTPOrderID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderID::CopyFrom(const CTPOrderID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderID::IsInitialized() const {
  return true;
}

void CTPOrderID::Swap(CTPOrderID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderID::InternalSwap(CTPOrderID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_id_.Swap(&other->string_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(order_ref_, other->order_ref_);
}

::google::protobuf::Metadata CTPOrderID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrder::InitAsDefaultInstance() {
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class CTPOrder::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPOrder* msg);
  static const ::pb::CTPOrderID& id(const CTPOrder* msg);
  static const ::pb::ProductID& product_id(const CTPOrder* msg);
};

const ::pb::Symbol&
CTPOrder::HasBitSetters::symbol(const CTPOrder* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPOrder::HasBitSetters::id(const CTPOrder* msg) {
  return *msg->id_;
}
const ::pb::ProductID&
CTPOrder::HasBitSetters::product_id(const CTPOrder* msg) {
  return *msg->product_id_;
}
void CTPOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void CTPOrder::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrder::kSymbolFieldNumber;
const int CTPOrder::kIdFieldNumber;
const int CTPOrder::kAccountIdFieldNumber;
const int CTPOrder::kDirectionFieldNumber;
const int CTPOrder::kStatusFieldNumber;
const int CTPOrder::kPriceTypeFieldNumber;
const int CTPOrder::kLimitPriceFieldNumber;
const int CTPOrder::kVolumeFieldNumber;
const int CTPOrder::kVolumeTradedFieldNumber;
const int CTPOrder::kVolumeCanceledFieldNumber;
const int CTPOrder::kFrozenCommissionFieldNumber;
const int CTPOrder::kSendOrderTimeFieldNumber;
const int CTPOrder::kSendOrderTradingDayFieldNumber;
const int CTPOrder::kCommentFieldNumber;
const int CTPOrder::kRequestIdFieldNumber;
const int CTPOrder::kLocalOrderSeqFieldNumber;
const int CTPOrder::kForceCloseTypeFieldNumber;
const int CTPOrder::kOrderSourceTypeFieldNumber;
const int CTPOrder::kOrderHedgeTypeFieldNumber;
const int CTPOrder::kUserProductInfoFieldNumber;
const int CTPOrder::kCurrencyTypeFieldNumber;
const int CTPOrder::kExchangeOrderIdFieldNumber;
const int CTPOrder::kTimeConditionTypeFieldNumber;
const int CTPOrder::kRouteAccountIdFieldNumber;
const int CTPOrder::kLocalTypeIdFieldNumber;
const int CTPOrder::kCommissionFieldNumber;
const int CTPOrder::kOffsetFlagFieldNumber;
const int CTPOrder::kErrorCodeFieldNumber;
const int CTPOrder::kTokenFieldNumber;
const int CTPOrder::kStoplossFieldNumber;
const int CTPOrder::kTakeProfitFieldNumber;
const int CTPOrder::kTradedAmountFieldNumber;
const int CTPOrder::kVolumeMultipleFieldNumber;
const int CTPOrder::kProductIdFieldNumber;
const int CTPOrder::kPriceTickFieldNumber;
const int CTPOrder::kFrozenMarginFieldNumber;
const int CTPOrder::kSymbolNameFieldNumber;
const int CTPOrder::kReasonCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrder::CTPOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrder)
}
CTPOrder::CTPOrder(const CTPOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_product_info().size() > 0) {
    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason_comment().size() > 0) {
    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_id()) {
    id_ = new ::pb::CTPOrderID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_margin_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(frozen_margin_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrder)
}

void CTPOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrder_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_margin_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(frozen_margin_));
}

CTPOrder::~CTPOrder() {
  // @@protoc_insertion_point(destructor:pb.CTPOrder)
  SharedDtor();
}

void CTPOrder::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete product_id_;
}

void CTPOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrder& CTPOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrder_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_margin_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(frozen_margin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPOrderID id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderStatus status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::CTPOrderStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPPriceType price_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_price_type(static_cast<::pb::CTPPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double limit_price = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_limit_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_traded = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_volume_traded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_volume_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double frozen_commission = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_frozen_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 send_order_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_send_order_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 send_order_trading_day = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_send_order_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_local_order_seq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 force_close_type = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_force_close_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 order_source_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_order_source_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPHedgeType order_hedge_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_order_hedge_type(static_cast<::pb::CTPHedgeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_product_info = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.user_product_info");
        object = msg->mutable_user_product_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CurrencyType currency_type = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_currency_type(static_cast<::pb::CurrencyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 time_condition_type = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_time_condition_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 local_type_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_local_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double commission = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_code = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_error_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double stoploss = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_stoploss(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double take_profit = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 249) goto handle_unusual;
        msg->set_take_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double traded_amount = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 1) goto handle_unusual;
        msg->set_traded_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_margin = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_frozen_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string symbol_name = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reason_comment = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.reason_comment");
        object = msg->mutable_reason_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderStatus status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::CTPOrderStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPriceType price_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_price_type(static_cast< ::pb::CTPPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_traded = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_traded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 send_order_trading_day = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_order_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_order_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force_close_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_close_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_source_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_source_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPHedgeType order_hedge_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_hedge_type(static_cast< ::pb::CTPHedgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_product_info = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_product_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.user_product_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CurrencyType currency_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::pb::CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_condition_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_condition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stoploss = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double take_profit = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (249 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &take_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double traded_amount = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (257 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traded_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (281 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (289 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason_comment = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.reason_comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account_id(), output);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->price_type(), output);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->limit_price(), output);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->volume_traded(), output);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volume_canceled(), output);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->frozen_commission(), output);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->send_order_time(), output);
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->send_order_trading_day(), output);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->comment(), output);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->request_id(), output);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->local_order_seq(), output);
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->force_close_type(), output);
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->order_source_type(), output);
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->order_hedge_type(), output);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.user_product_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->user_product_info(), output);
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->currency_type(), output);
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->exchange_order_id(), output);
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time_condition_type(), output);
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->route_account_id(), output);
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->local_type_id(), output);
  }

  // double commission = 26;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->commission(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->offset_flag(), output);
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->error_code(), output);
  }

  // string token = 29;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->token(), output);
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->stoploss(), output);
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->take_profit(), output);
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->traded_amount(), output);
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->price_tick(), output);
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->frozen_margin(), output);
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->symbol_name(), output);
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.reason_comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->reason_comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrder)
}

::google::protobuf::uint8* CTPOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->price_type(), target);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->limit_price(), target);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->volume_traded(), target);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volume_canceled(), target);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->frozen_commission(), target);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->send_order_time(), target);
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->send_order_trading_day(), target);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->request_id(), target);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->local_order_seq(), target);
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->force_close_type(), target);
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->order_source_type(), target);
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->order_hedge_type(), target);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.user_product_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_product_info(), target);
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->currency_type(), target);
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->exchange_order_id(), target);
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time_condition_type(), target);
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->route_account_id(), target);
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->local_type_id(), target);
  }

  // double commission = 26;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->commission(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->offset_flag(), target);
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->error_code(), target);
  }

  // string token = 29;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->token(), target);
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->stoploss(), target);
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->take_profit(), target);
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->traded_amount(), target);
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->price_tick(), target);
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->frozen_margin(), target);
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->symbol_name(), target);
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.reason_comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->reason_comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrder)
  return target;
}

size_t CTPOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_product_info());
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // string token = 29;
  if (this->token().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason_comment());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_traded());
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_canceled());
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    total_size += 1 + 8;
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_order_time());
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->send_order_trading_day());
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_order_seq());
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force_close_type());
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_source_type());
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_hedge_type());
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_condition_type());
  }

  // double commission = 26;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    total_size += 2 + 8;
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    total_size += 2 + 8;
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    total_size += 2 + 8;
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    total_size += 2 + 8;
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrder* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrder)
    MergeFrom(*source);
  }
}

void CTPOrder::MergeFrom(const CTPOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.user_product_info().size() > 0) {

    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.reason_comment().size() > 0) {

    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_id()) {
    mutable_id()->::pb::CTPOrderID::MergeFrom(from.id());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.limit_price() != 0) {
    set_limit_price(from.limit_price());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.volume_traded() != 0) {
    set_volume_traded(from.volume_traded());
  }
  if (from.volume_canceled() != 0) {
    set_volume_canceled(from.volume_canceled());
  }
  if (from.frozen_commission() != 0) {
    set_frozen_commission(from.frozen_commission());
  }
  if (from.send_order_time() != 0) {
    set_send_order_time(from.send_order_time());
  }
  if (from.send_order_trading_day() != 0) {
    set_send_order_trading_day(from.send_order_trading_day());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.local_order_seq() != 0) {
    set_local_order_seq(from.local_order_seq());
  }
  if (from.force_close_type() != 0) {
    set_force_close_type(from.force_close_type());
  }
  if (from.order_source_type() != 0) {
    set_order_source_type(from.order_source_type());
  }
  if (from.order_hedge_type() != 0) {
    set_order_hedge_type(from.order_hedge_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.time_condition_type() != 0) {
    set_time_condition_type(from.time_condition_type());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
  if (from.stoploss() != 0) {
    set_stoploss(from.stoploss());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (from.take_profit() != 0) {
    set_take_profit(from.take_profit());
  }
  if (from.traded_amount() != 0) {
    set_traded_amount(from.traded_amount());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.frozen_margin() != 0) {
    set_frozen_margin(from.frozen_margin());
  }
}

void CTPOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrder::CopyFrom(const CTPOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrder::IsInitialized() const {
  return true;
}

void CTPOrder::Swap(CTPOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrder::InternalSwap(CTPOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_product_info_.Swap(&other->user_product_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_comment_.Swap(&other->reason_comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(id_, other->id_);
  swap(product_id_, other->product_id_);
  swap(direction_, other->direction_);
  swap(status_, other->status_);
  swap(limit_price_, other->limit_price_);
  swap(price_type_, other->price_type_);
  swap(volume_, other->volume_);
  swap(volume_traded_, other->volume_traded_);
  swap(volume_canceled_, other->volume_canceled_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(send_order_time_, other->send_order_time_);
  swap(send_order_trading_day_, other->send_order_trading_day_);
  swap(request_id_, other->request_id_);
  swap(local_order_seq_, other->local_order_seq_);
  swap(force_close_type_, other->force_close_type_);
  swap(order_source_type_, other->order_source_type_);
  swap(order_hedge_type_, other->order_hedge_type_);
  swap(currency_type_, other->currency_type_);
  swap(time_condition_type_, other->time_condition_type_);
  swap(commission_, other->commission_);
  swap(local_type_id_, other->local_type_id_);
  swap(offset_flag_, other->offset_flag_);
  swap(stoploss_, other->stoploss_);
  swap(error_code_, other->error_code_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(take_profit_, other->take_profit_);
  swap(traded_amount_, other->traded_amount_);
  swap(price_tick_, other->price_tick_);
  swap(frozen_margin_, other->frozen_margin_);
}

::google::protobuf::Metadata CTPOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrderList::InitAsDefaultInstance() {
}
class CTPOrderList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderList::CTPOrderList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderList)
}
CTPOrderList::CTPOrderList(const CTPOrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderList)
}

void CTPOrderList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderList_ctp_2eproto.base);
}

CTPOrderList::~CTPOrderList() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderList)
  SharedDtor();
}

void CTPOrderList::SharedDtor() {
}

void CTPOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderList& CTPOrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPOrder list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPOrder list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderList)
}

::google::protobuf::uint8* CTPOrderList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderList)
  return target;
}

size_t CTPOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderList)
    MergeFrom(*source);
  }
}

void CTPOrderList::MergeFrom(const CTPOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPOrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderList::CopyFrom(const CTPOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderList::IsInitialized() const {
  return true;
}

void CTPOrderList::Swap(CTPOrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderList::InternalSwap(CTPOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPOrderList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrderLink::InitAsDefaultInstance() {
  ::pb::_CTPOrderLink_default_instance_._instance.get_mutable()->parent_ = const_cast< ::pb::CTPOrder*>(
      ::pb::CTPOrder::internal_default_instance());
}
class CTPOrderLink::HasBitSetters {
 public:
  static const ::pb::CTPOrder& parent(const CTPOrderLink* msg);
};

const ::pb::CTPOrder&
CTPOrderLink::HasBitSetters::parent(const CTPOrderLink* msg) {
  return *msg->parent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderLink::kParentFieldNumber;
const int CTPOrderLink::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderLink::CTPOrderLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderLink)
}
CTPOrderLink::CTPOrderLink(const CTPOrderLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parent()) {
    parent_ = new ::pb::CTPOrder(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderLink)
}

void CTPOrderLink::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderLink_ctp_2eproto.base);
  parent_ = nullptr;
}

CTPOrderLink::~CTPOrderLink() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderLink)
  SharedDtor();
}

void CTPOrderLink::SharedDtor() {
  if (this != internal_default_instance()) delete parent_;
}

void CTPOrderLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderLink& CTPOrderLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderLink_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderLink::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPOrder parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrder::_InternalParse;
        object = msg->mutable_parent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.CTPOrder children = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_children();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPOrder parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrder children = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::parent(this), output);
  }

  // repeated .pb.CTPOrder children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->children(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderLink)
}

::google::protobuf::uint8* CTPOrderLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::parent(this), target);
  }

  // repeated .pb.CTPOrder children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->children(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderLink)
  return target;
}

size_t CTPOrderLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPOrder children = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderLink* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderLink)
    MergeFrom(*source);
  }
}

void CTPOrderLink::MergeFrom(const CTPOrderLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.has_parent()) {
    mutable_parent()->::pb::CTPOrder::MergeFrom(from.parent());
  }
}

void CTPOrderLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderLink::CopyFrom(const CTPOrderLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderLink::IsInitialized() const {
  return true;
}

void CTPOrderLink::Swap(CTPOrderLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderLink::InternalSwap(CTPOrderLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  swap(parent_, other->parent_);
}

::google::protobuf::Metadata CTPOrderLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCancelOrderRequest::InitAsDefaultInstance() {
  ::pb::_CTPCancelOrderRequest_default_instance_._instance.get_mutable()->ctporderid_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPCancelOrderRequest_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class CTPCancelOrderRequest::HasBitSetters {
 public:
  static const ::pb::CTPOrderID& ctporderid(const CTPCancelOrderRequest* msg);
  static const ::pb::Symbol& symbol(const CTPCancelOrderRequest* msg);
};

const ::pb::CTPOrderID&
CTPCancelOrderRequest::HasBitSetters::ctporderid(const CTPCancelOrderRequest* msg) {
  return *msg->ctporderid_;
}
const ::pb::Symbol&
CTPCancelOrderRequest::HasBitSetters::symbol(const CTPCancelOrderRequest* msg) {
  return *msg->symbol_;
}
void CTPCancelOrderRequest::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCancelOrderRequest::kAccountIdFieldNumber;
const int CTPCancelOrderRequest::kCTPOrderIDFieldNumber;
const int CTPCancelOrderRequest::kSymbolFieldNumber;
const int CTPCancelOrderRequest::kRequestIdFieldNumber;
const int CTPCancelOrderRequest::kFrontIdFieldNumber;
const int CTPCancelOrderRequest::kSessionIdFieldNumber;
const int CTPCancelOrderRequest::kExchangeOrderIdFieldNumber;
const int CTPCancelOrderRequest::kTokenFieldNumber;
const int CTPCancelOrderRequest::kRouteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCancelOrderRequest::CTPCancelOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCancelOrderRequest)
}
CTPCancelOrderRequest::CTPCancelOrderRequest(const CTPCancelOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_ctporderid()) {
    ctporderid_ = new ::pb::CTPOrderID(*from.ctporderid_);
  } else {
    ctporderid_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCancelOrderRequest)
}

void CTPCancelOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctporderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ctporderid_)) + sizeof(session_id_));
}

CTPCancelOrderRequest::~CTPCancelOrderRequest() {
  // @@protoc_insertion_point(destructor:pb.CTPCancelOrderRequest)
  SharedDtor();
}

void CTPCancelOrderRequest::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctporderid_;
  if (this != internal_default_instance()) delete symbol_;
}

void CTPCancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCancelOrderRequest& CTPCancelOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctporderid_ != nullptr) {
    delete ctporderid_;
  }
  ctporderid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCancelOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCancelOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPOrderID CTPOrderID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_ctporderid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 front_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 session_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCancelOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCancelOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID CTPOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctporderid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCancelOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCancelOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCancelOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ctporderid(this), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_id(), output);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->front_id(), output);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->session_id(), output);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchange_order_id(), output);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->token(), output);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCancelOrderRequest)
}

::google::protobuf::uint8* CTPCancelOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ctporderid(this), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_id(), target);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->front_id(), target);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->session_id(), target);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchange_order_id(), target);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCancelOrderRequest)
  return target;
}

size_t CTPCancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCancelOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string token = 8;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctporderid_);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_id());
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCancelOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCancelOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCancelOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCancelOrderRequest)
    MergeFrom(*source);
  }
}

void CTPCancelOrderRequest::MergeFrom(const CTPCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_ctporderid()) {
    mutable_ctporderid()->::pb::CTPOrderID::MergeFrom(from.ctporderid());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void CTPCancelOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCancelOrderRequest::CopyFrom(const CTPCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCancelOrderRequest::IsInitialized() const {
  return true;
}

void CTPCancelOrderRequest::Swap(CTPCancelOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCancelOrderRequest::InternalSwap(CTPCancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctporderid_, other->ctporderid_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
}

::google::protobuf::Metadata CTPCancelOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOnRtnCancelOrder::InitAsDefaultInstance() {
  ::pb::_CTPOnRtnCancelOrder_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPOnRtnCancelOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class CTPOnRtnCancelOrder::HasBitSetters {
 public:
  static const ::pb::CTPOrderID& order_id(const CTPOnRtnCancelOrder* msg);
  static const ::pb::Symbol& symbol(const CTPOnRtnCancelOrder* msg);
};

const ::pb::CTPOrderID&
CTPOnRtnCancelOrder::HasBitSetters::order_id(const CTPOnRtnCancelOrder* msg) {
  return *msg->order_id_;
}
const ::pb::Symbol&
CTPOnRtnCancelOrder::HasBitSetters::symbol(const CTPOnRtnCancelOrder* msg) {
  return *msg->symbol_;
}
void CTPOnRtnCancelOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOnRtnCancelOrder::kAccountIdFieldNumber;
const int CTPOnRtnCancelOrder::kOrderIdFieldNumber;
const int CTPOnRtnCancelOrder::kExchangeOrderIdFieldNumber;
const int CTPOnRtnCancelOrder::kSymbolFieldNumber;
const int CTPOnRtnCancelOrder::kRequestIdFieldNumber;
const int CTPOnRtnCancelOrder::kErrorTypeFieldNumber;
const int CTPOnRtnCancelOrder::kErrorFieldNumber;
const int CTPOnRtnCancelOrder::kMsgFieldNumber;
const int CTPOnRtnCancelOrder::kRouteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOnRtnCancelOrder::CTPOnRtnCancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOnRtnCancelOrder)
}
CTPOnRtnCancelOrder::CTPOnRtnCancelOrder(const CTPOnRtnCancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::CTPOrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOnRtnCancelOrder)
}

void CTPOnRtnCancelOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(error_));
}

CTPOnRtnCancelOrder::~CTPOnRtnCancelOrder() {
  // @@protoc_insertion_point(destructor:pb.CTPOnRtnCancelOrder)
  SharedDtor();
}

void CTPOnRtnCancelOrder::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_id_;
  if (this != internal_default_instance()) delete symbol_;
}

void CTPOnRtnCancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOnRtnCancelOrder& CTPOnRtnCancelOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOnRtnCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOnRtnCancelOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOnRtnCancelOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPOrderID order_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string exchange_order_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_error_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string msg = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOnRtnCancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOnRtnCancelOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOnRtnCancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOnRtnCancelOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOnRtnCancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::order_id(this), output);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_order_id(), output);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_id(), output);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->error_type(), output);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->error(), output);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOnRtnCancelOrder)
}

::google::protobuf::uint8* CTPOnRtnCancelOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::order_id(this), target);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_order_id(), target);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_id(), target);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->error_type(), target);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->error(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOnRtnCancelOrder)
  return target;
}

size_t CTPOnRtnCancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOnRtnCancelOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_type());
  }

  // int32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOnRtnCancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOnRtnCancelOrder* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOnRtnCancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOnRtnCancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOnRtnCancelOrder)
    MergeFrom(*source);
  }
}

void CTPOnRtnCancelOrder::MergeFrom(const CTPOnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::CTPOrderID::MergeFrom(from.order_id());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.error_type() != 0) {
    set_error_type(from.error_type());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CTPOnRtnCancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOnRtnCancelOrder::CopyFrom(const CTPOnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOnRtnCancelOrder::IsInitialized() const {
  return true;
}

void CTPOnRtnCancelOrder::Swap(CTPOnRtnCancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOnRtnCancelOrder::InternalSwap(CTPOnRtnCancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_id_, other->order_id_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(error_type_, other->error_type_);
  swap(error_, other->error_);
}

::google::protobuf::Metadata CTPOnRtnCancelOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradeReport::InitAsDefaultInstance() {
  ::pb::_CTPTradeReport_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPTradeReport_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
}
class CTPTradeReport::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPTradeReport* msg);
  static const ::pb::CTPOrderID& order_id(const CTPTradeReport* msg);
};

const ::pb::Symbol&
CTPTradeReport::HasBitSetters::symbol(const CTPTradeReport* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPTradeReport::HasBitSetters::order_id(const CTPTradeReport* msg) {
  return *msg->order_id_;
}
void CTPTradeReport::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradeReport::kAccountIdFieldNumber;
const int CTPTradeReport::kTradeIdFieldNumber;
const int CTPTradeReport::kSymbolFieldNumber;
const int CTPTradeReport::kDirectionFieldNumber;
const int CTPTradeReport::kPriceFieldNumber;
const int CTPTradeReport::kVolumeFieldNumber;
const int CTPTradeReport::kTradedTimeFieldNumber;
const int CTPTradeReport::kTradedTradingDayFieldNumber;
const int CTPTradeReport::kOrderIdFieldNumber;
const int CTPTradeReport::kPriceTypeFieldNumber;
const int CTPTradeReport::kHedgeTypeFieldNumber;
const int CTPTradeReport::kTradeTypeFieldNumber;
const int CTPTradeReport::kCurrencyTypeFieldNumber;
const int CTPTradeReport::kExchangeOrderIdFieldNumber;
const int CTPTradeReport::kLocalTypeIdFieldNumber;
const int CTPTradeReport::kCommissionFieldNumber;
const int CTPTradeReport::kTaxFieldNumber;
const int CTPTradeReport::kTotalOtherFeeFieldNumber;
const int CTPTradeReport::kInitialTradedPriceFieldNumber;
const int CTPTradeReport::kReserveFieldNumber;
const int CTPTradeReport::kOffsetFlagFieldNumber;
const int CTPTradeReport::kRouteAccountIdFieldNumber;
const int CTPTradeReport::kSymbolNameFieldNumber;
const int CTPTradeReport::kPriceTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradeReport::CTPTradeReport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradeReport)
}
CTPTradeReport::CTPTradeReport(const CTPTradeReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_id().size() > 0) {
    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::CTPOrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_flag_) -
    reinterpret_cast<char*>(&price_)) + sizeof(offset_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradeReport)
}

void CTPTradeReport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradeReport_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(offset_flag_));
}

CTPTradeReport::~CTPTradeReport() {
  // @@protoc_insertion_point(destructor:pb.CTPTradeReport)
  SharedDtor();
}

void CTPTradeReport::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete order_id_;
}

void CTPTradeReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradeReport& CTPTradeReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradeReport_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&price_)) + sizeof(offset_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradeReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradeReport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trade_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.trade_id");
        object = msg->mutable_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double price = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 traded_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_traded_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 traded_trading_day = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_traded_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID order_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPriceType price_type = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_price_type(static_cast<::pb::CTPPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPHedgeType hedge_type = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_hedge_type(static_cast<::pb::CTPHedgeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPTradeType trade_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trade_type(static_cast<::pb::CTPTradeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 currency_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_currency_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 local_type_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_local_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double commission = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double tax = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_tax(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double total_other_fee = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_total_other_fee(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double initial_traded_price = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_initial_traded_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double reserve = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_reserve(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string symbol_name = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double price_tick = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradeReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradeReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_id().data(), static_cast<int>(this->trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 traded_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &traded_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traded_trading_day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traded_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID order_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPriceType price_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_price_type(static_cast< ::pb::CTPPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPHedgeType hedge_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hedge_type(static_cast< ::pb::CTPHedgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPTradeType trade_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trade_type(static_cast< ::pb::CTPTradeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tax = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_other_fee = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_other_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double initial_traded_price = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_traded_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reserve = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradeReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradeReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradeReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trade_id(), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // double price = 5;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->traded_time(), output);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->traded_trading_day(), output);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::order_id(this), output);
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->price_type(), output);
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->hedge_type(), output);
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->trade_type(), output);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->currency_type(), output);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->exchange_order_id(), output);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->local_type_id(), output);
  }

  // double commission = 16;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->commission(), output);
  }

  // double tax = 17;
  if (this->tax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->tax(), output);
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->total_other_fee(), output);
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->initial_traded_price(), output);
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->reserve(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->offset_flag(), output);
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->route_account_id(), output);
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->symbol_name(), output);
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->price_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradeReport)
}

::google::protobuf::uint8* CTPTradeReport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trade_id(), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // double price = 5;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->traded_time(), target);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->traded_trading_day(), target);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::order_id(this), target);
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->price_type(), target);
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->hedge_type(), target);
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->trade_type(), target);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->currency_type(), target);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exchange_order_id(), target);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->local_type_id(), target);
  }

  // double commission = 16;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->commission(), target);
  }

  // double tax = 17;
  if (this->tax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->tax(), target);
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->total_other_fee(), target);
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->initial_traded_price(), target);
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->reserve(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->offset_flag(), target);
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->route_account_id(), target);
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->symbol_name(), target);
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->price_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradeReport)
  return target;
}

size_t CTPTradeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradeReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_id());
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // double price = 5;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->traded_time());
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->traded_trading_day());
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hedge_type());
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trade_type());
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // double commission = 16;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // double tax = 17;
  if (this->tax() != 0) {
    total_size += 2 + 8;
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    total_size += 2 + 8;
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    total_size += 2 + 8;
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    total_size += 2 + 8;
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    total_size += 2 + 8;
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradeReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradeReport* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradeReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradeReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradeReport)
    MergeFrom(*source);
  }
}

void CTPTradeReport::MergeFrom(const CTPTradeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.trade_id().size() > 0) {

    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::CTPOrderID::MergeFrom(from.order_id());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.traded_time() != 0) {
    set_traded_time(from.traded_time());
  }
  if (from.traded_trading_day() != 0) {
    set_traded_trading_day(from.traded_trading_day());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.hedge_type() != 0) {
    set_hedge_type(from.hedge_type());
  }
  if (from.trade_type() != 0) {
    set_trade_type(from.trade_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.tax() != 0) {
    set_tax(from.tax());
  }
  if (from.total_other_fee() != 0) {
    set_total_other_fee(from.total_other_fee());
  }
  if (from.initial_traded_price() != 0) {
    set_initial_traded_price(from.initial_traded_price());
  }
  if (from.reserve() != 0) {
    set_reserve(from.reserve());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
}

void CTPTradeReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradeReport::CopyFrom(const CTPTradeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradeReport::IsInitialized() const {
  return true;
}

void CTPTradeReport::Swap(CTPTradeReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradeReport::InternalSwap(CTPTradeReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_id_.Swap(&other->trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(order_id_, other->order_id_);
  swap(price_, other->price_);
  swap(direction_, other->direction_);
  swap(volume_, other->volume_);
  swap(traded_time_, other->traded_time_);
  swap(traded_trading_day_, other->traded_trading_day_);
  swap(price_type_, other->price_type_);
  swap(hedge_type_, other->hedge_type_);
  swap(trade_type_, other->trade_type_);
  swap(currency_type_, other->currency_type_);
  swap(local_type_id_, other->local_type_id_);
  swap(commission_, other->commission_);
  swap(tax_, other->tax_);
  swap(total_other_fee_, other->total_other_fee_);
  swap(initial_traded_price_, other->initial_traded_price_);
  swap(reserve_, other->reserve_);
  swap(price_tick_, other->price_tick_);
  swap(offset_flag_, other->offset_flag_);
}

::google::protobuf::Metadata CTPTradeReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradeReportList::InitAsDefaultInstance() {
}
class CTPTradeReportList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradeReportList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradeReportList::CTPTradeReportList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradeReportList)
}
CTPTradeReportList::CTPTradeReportList(const CTPTradeReportList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradeReportList)
}

void CTPTradeReportList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradeReportList_ctp_2eproto.base);
}

CTPTradeReportList::~CTPTradeReportList() {
  // @@protoc_insertion_point(destructor:pb.CTPTradeReportList)
  SharedDtor();
}

void CTPTradeReportList::SharedDtor() {
}

void CTPTradeReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradeReportList& CTPTradeReportList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradeReportList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradeReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradeReportList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradeReportList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPTradeReport list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradeReport::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradeReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradeReportList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPTradeReport list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradeReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradeReportList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradeReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradeReportList)
}

::google::protobuf::uint8* CTPTradeReportList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradeReportList)
  return target;
}

size_t CTPTradeReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradeReportList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradeReportList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradeReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradeReportList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradeReportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradeReportList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradeReportList)
    MergeFrom(*source);
  }
}

void CTPTradeReportList::MergeFrom(const CTPTradeReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradeReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPTradeReportList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradeReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradeReportList::CopyFrom(const CTPTradeReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradeReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradeReportList::IsInitialized() const {
  return true;
}

void CTPTradeReportList::Swap(CTPTradeReportList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradeReportList::InternalSwap(CTPTradeReportList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPTradeReportList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPositionSummation::InitAsDefaultInstance() {
}
class CTPPositionSummation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPositionSummation::kDirectionFieldNumber;
const int CTPPositionSummation::kTypeFieldNumber;
const int CTPPositionSummation::kRouteAccountIdFieldNumber;
const int CTPPositionSummation::kPositionFieldNumber;
const int CTPPositionSummation::kAmountFieldNumber;
const int CTPPositionSummation::kCostFieldNumber;
const int CTPPositionSummation::kFrozenFieldNumber;
const int CTPPositionSummation::kAvailableFieldNumber;
const int CTPPositionSummation::kPositionProfitFieldNumber;
const int CTPPositionSummation::kClosedProfitFieldNumber;
const int CTPPositionSummation::kMarginFieldNumber;
const int CTPPositionSummation::kFrozenMarginFieldNumber;
const int CTPPositionSummation::kCommissionFieldNumber;
const int CTPPositionSummation::kFrozenCommissionFieldNumber;
const int CTPPositionSummation::kInterestFieldNumber;
const int CTPPositionSummation::kFrozenInterestFieldNumber;
const int CTPPositionSummation::kMtmProfitFieldNumber;
const int CTPPositionSummation::kClearedClosedProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPositionSummation::CTPPositionSummation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPositionSummation)
}
CTPPositionSummation::CTPPositionSummation(const CTPPositionSummation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPPositionSummation)
}

void CTPPositionSummation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPositionSummation_ctp_2eproto.base);
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(available_));
}

CTPPositionSummation::~CTPPositionSummation() {
  // @@protoc_insertion_point(destructor:pb.CTPPositionSummation)
  SharedDtor();
}

void CTPPositionSummation::SharedDtor() {
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPPositionSummation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPositionSummation& CTPPositionSummation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPositionSummation_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPositionSummation::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(available_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPositionSummation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPositionSummation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPDirection direction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPositionSummation.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 position = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cost = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_cost(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 frozen = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_frozen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 available = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_available(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double position_profit = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_position_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double closed_profit = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_closed_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_margin = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_frozen_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double commission = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_commission = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_frozen_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double interest = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_interest = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_frozen_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double mtm_profit = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_mtm_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cleared_closed_profit = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_cleared_closed_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPositionSummation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPositionSummation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPDirection direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPositionSummation.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frozen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 available = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_profit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double closed_profit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closed_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interest = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_interest = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mtm_profit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mtm_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cleared_closed_profit = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleared_closed_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPositionSummation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPositionSummation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPositionSummation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPositionSummation.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->route_account_id(), output);
  }

  // int32 position = 4;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // double amount = 5;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->amount(), output);
  }

  // double cost = 6;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cost(), output);
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frozen(), output);
  }

  // int32 available = 8;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->available(), output);
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->position_profit(), output);
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->closed_profit(), output);
  }

  // double margin = 11;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->margin(), output);
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frozen_margin(), output);
  }

  // double commission = 13;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->commission(), output);
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozen_commission(), output);
  }

  // double interest = 15;
  if (this->interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->interest(), output);
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->frozen_interest(), output);
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->mtm_profit(), output);
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->cleared_closed_profit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPositionSummation)
}

::google::protobuf::uint8* CTPPositionSummation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPositionSummation.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->route_account_id(), target);
  }

  // int32 position = 4;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // double amount = 5;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->amount(), target);
  }

  // double cost = 6;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cost(), target);
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frozen(), target);
  }

  // int32 available = 8;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->available(), target);
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->position_profit(), target);
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->closed_profit(), target);
  }

  // double margin = 11;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->margin(), target);
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frozen_margin(), target);
  }

  // double commission = 13;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->commission(), target);
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozen_commission(), target);
  }

  // double interest = 15;
  if (this->interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->interest(), target);
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->frozen_interest(), target);
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->mtm_profit(), target);
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->cleared_closed_profit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPositionSummation)
  return target;
}

size_t CTPPositionSummation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPositionSummation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double amount = 5;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // int32 position = 4;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frozen());
  }

  // double cost = 6;
  if (this->cost() != 0) {
    total_size += 1 + 8;
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    total_size += 1 + 8;
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    total_size += 1 + 8;
  }

  // double margin = 11;
  if (this->margin() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    total_size += 1 + 8;
  }

  // double commission = 13;
  if (this->commission() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    total_size += 1 + 8;
  }

  // double interest = 15;
  if (this->interest() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    total_size += 2 + 8;
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    total_size += 2 + 8;
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 available = 8;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPositionSummation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPositionSummation)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPositionSummation* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPositionSummation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPositionSummation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPositionSummation)
    MergeFrom(*source);
  }
}

void CTPPositionSummation::MergeFrom(const CTPPositionSummation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPositionSummation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.frozen() != 0) {
    set_frozen(from.frozen());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.position_profit() != 0) {
    set_position_profit(from.position_profit());
  }
  if (from.closed_profit() != 0) {
    set_closed_profit(from.closed_profit());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.frozen_margin() != 0) {
    set_frozen_margin(from.frozen_margin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.frozen_commission() != 0) {
    set_frozen_commission(from.frozen_commission());
  }
  if (from.interest() != 0) {
    set_interest(from.interest());
  }
  if (from.frozen_interest() != 0) {
    set_frozen_interest(from.frozen_interest());
  }
  if (from.mtm_profit() != 0) {
    set_mtm_profit(from.mtm_profit());
  }
  if (from.cleared_closed_profit() != 0) {
    set_cleared_closed_profit(from.cleared_closed_profit());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
}

void CTPPositionSummation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPositionSummation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPositionSummation::CopyFrom(const CTPPositionSummation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPositionSummation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPositionSummation::IsInitialized() const {
  return true;
}

void CTPPositionSummation::Swap(CTPPositionSummation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPositionSummation::InternalSwap(CTPPositionSummation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(amount_, other->amount_);
  swap(position_, other->position_);
  swap(frozen_, other->frozen_);
  swap(cost_, other->cost_);
  swap(position_profit_, other->position_profit_);
  swap(closed_profit_, other->closed_profit_);
  swap(margin_, other->margin_);
  swap(frozen_margin_, other->frozen_margin_);
  swap(commission_, other->commission_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(interest_, other->interest_);
  swap(frozen_interest_, other->frozen_interest_);
  swap(mtm_profit_, other->mtm_profit_);
  swap(cleared_closed_profit_, other->cleared_closed_profit_);
  swap(available_, other->available_);
}

::google::protobuf::Metadata CTPPositionSummation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPosition::InitAsDefaultInstance() {
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->today_summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->yesterday_summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class CTPPosition::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& summation(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& today_summation(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& yesterday_summation(const CTPPosition* msg);
  static const ::pb::ProductID& product_id(const CTPPosition* msg);
};

const ::pb::Symbol&
CTPPosition::HasBitSetters::symbol(const CTPPosition* msg) {
  return *msg->symbol_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::summation(const CTPPosition* msg) {
  return *msg->summation_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::today_summation(const CTPPosition* msg) {
  return *msg->today_summation_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::yesterday_summation(const CTPPosition* msg) {
  return *msg->yesterday_summation_;
}
const ::pb::ProductID&
CTPPosition::HasBitSetters::product_id(const CTPPosition* msg) {
  return *msg->product_id_;
}
void CTPPosition::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void CTPPosition::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPosition::kSymbolFieldNumber;
const int CTPPosition::kSummationFieldNumber;
const int CTPPosition::kTodaySummationFieldNumber;
const int CTPPosition::kYesterdaySummationFieldNumber;
const int CTPPosition::kPreSettlementPriceFieldNumber;
const int CTPPosition::kSettlementPriceFieldNumber;
const int CTPPosition::kLastPriceFieldNumber;
const int CTPPosition::kTradingDayFieldNumber;
const int CTPPosition::kProductTypeFieldNumber;
const int CTPPosition::kVolumeMultipleFieldNumber;
const int CTPPosition::kProductIdFieldNumber;
const int CTPPosition::kPriceTickFieldNumber;
const int CTPPosition::kSymbolNameFieldNumber;
const int CTPPosition::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPosition::CTPPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPosition)
}
CTPPosition::CTPPosition(const CTPPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_summation()) {
    summation_ = new ::pb::CTPPositionSummation(*from.summation_);
  } else {
    summation_ = nullptr;
  }
  if (from.has_today_summation()) {
    today_summation_ = new ::pb::CTPPositionSummation(*from.today_summation_);
  } else {
    today_summation_ = nullptr;
  }
  if (from.has_yesterday_summation()) {
    yesterday_summation_ = new ::pb::CTPPositionSummation(*from.yesterday_summation_);
  } else {
    yesterday_summation_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&pre_settlement_price_, &from.pre_settlement_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&pre_settlement_price_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPPosition)
}

void CTPPosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPosition_ctp_2eproto.base);
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPPosition::~CTPPosition() {
  // @@protoc_insertion_point(destructor:pb.CTPPosition)
  SharedDtor();
}

void CTPPosition::SharedDtor() {
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete summation_;
  if (this != internal_default_instance()) delete today_summation_;
  if (this != internal_default_instance()) delete yesterday_summation_;
  if (this != internal_default_instance()) delete product_id_;
}

void CTPPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPosition& CTPPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPosition_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && summation_ != nullptr) {
    delete summation_;
  }
  summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && today_summation_ != nullptr) {
    delete today_summation_;
  }
  today_summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && yesterday_summation_ != nullptr) {
    delete yesterday_summation_;
  }
  yesterday_summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&pre_settlement_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&pre_settlement_price_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation summation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation today_summation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_today_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation yesterday_summation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_yesterday_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double pre_settlement_price = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_pre_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double settlement_price = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double last_price = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_last_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 trading_day = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 product_type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_product_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_multiple = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string symbol_name = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPosition.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPosition.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation summation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation today_summation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_today_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation yesterday_summation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yesterday_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double settlement_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 product_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPosition.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPosition.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::summation(this), output);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::today_summation(this), output);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::yesterday_summation(this), output);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pre_settlement_price(), output);
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->settlement_price(), output);
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->last_price(), output);
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trading_day(), output);
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->product_type(), output);
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price_tick(), output);
  }

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->symbol_name(), output);
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPosition)
}

::google::protobuf::uint8* CTPPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::summation(this), target);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::today_summation(this), target);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::yesterday_summation(this), target);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pre_settlement_price(), target);
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->settlement_price(), target);
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->last_price(), target);
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trading_day(), target);
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->product_type(), target);
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price_tick(), target);
  }

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->symbol_name(), target);
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPosition)
  return target;
}

size_t CTPPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *summation_);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *today_summation_);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yesterday_summation_);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    total_size += 1 + 8;
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    total_size += 1 + 8;
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->product_type());
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPosition)
    MergeFrom(*source);
  }
}

void CTPPosition::MergeFrom(const CTPPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_summation()) {
    mutable_summation()->::pb::CTPPositionSummation::MergeFrom(from.summation());
  }
  if (from.has_today_summation()) {
    mutable_today_summation()->::pb::CTPPositionSummation::MergeFrom(from.today_summation());
  }
  if (from.has_yesterday_summation()) {
    mutable_yesterday_summation()->::pb::CTPPositionSummation::MergeFrom(from.yesterday_summation());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.pre_settlement_price() != 0) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (from.settlement_price() != 0) {
    set_settlement_price(from.settlement_price());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
  if (from.product_type() != 0) {
    set_product_type(from.product_type());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPosition::CopyFrom(const CTPPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPosition::IsInitialized() const {
  return true;
}

void CTPPosition::Swap(CTPPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPosition::InternalSwap(CTPPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(summation_, other->summation_);
  swap(today_summation_, other->today_summation_);
  swap(yesterday_summation_, other->yesterday_summation_);
  swap(product_id_, other->product_id_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(settlement_price_, other->settlement_price_);
  swap(last_price_, other->last_price_);
  swap(trading_day_, other->trading_day_);
  swap(product_type_, other->product_type_);
  swap(price_tick_, other->price_tick_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPositionList::InitAsDefaultInstance() {
}
class CTPPositionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPositionList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPositionList::CTPPositionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPositionList)
}
CTPPositionList::CTPPositionList(const CTPPositionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPPositionList)
}

void CTPPositionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPositionList_ctp_2eproto.base);
}

CTPPositionList::~CTPPositionList() {
  // @@protoc_insertion_point(destructor:pb.CTPPositionList)
  SharedDtor();
}

void CTPPositionList::SharedDtor() {
}

void CTPPositionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPositionList& CTPPositionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPositionList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPositionList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPositionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPositionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPPosition list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPPosition::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPositionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPositionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPPosition list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPositionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPositionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPositionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPositionList)
}

::google::protobuf::uint8* CTPPositionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPositionList)
  return target;
}

size_t CTPPositionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPositionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPositionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPositionList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPositionList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPositionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPositionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPositionList)
    MergeFrom(*source);
  }
}

void CTPPositionList::MergeFrom(const CTPPositionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPositionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPPositionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPositionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPositionList::CopyFrom(const CTPPositionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPositionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPositionList::IsInitialized() const {
  return true;
}

void CTPPositionList::Swap(CTPPositionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPositionList::InternalSwap(CTPPositionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPPositionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCloseTradeRecord::InitAsDefaultInstance() {
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->open_order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->close_order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
}
class CTPCloseTradeRecord::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPCloseTradeRecord* msg);
  static const ::pb::CTPOrderID& open_order_id(const CTPCloseTradeRecord* msg);
  static const ::pb::CTPOrderID& close_order_id(const CTPCloseTradeRecord* msg);
};

const ::pb::Symbol&
CTPCloseTradeRecord::HasBitSetters::symbol(const CTPCloseTradeRecord* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPCloseTradeRecord::HasBitSetters::open_order_id(const CTPCloseTradeRecord* msg) {
  return *msg->open_order_id_;
}
const ::pb::CTPOrderID&
CTPCloseTradeRecord::HasBitSetters::close_order_id(const CTPCloseTradeRecord* msg) {
  return *msg->close_order_id_;
}
void CTPCloseTradeRecord::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCloseTradeRecord::kAccountIdFieldNumber;
const int CTPCloseTradeRecord::kSymbolFieldNumber;
const int CTPCloseTradeRecord::kDirectionFieldNumber;
const int CTPCloseTradeRecord::kOpenVolumeFieldNumber;
const int CTPCloseTradeRecord::kOpenAmountFieldNumber;
const int CTPCloseTradeRecord::kClosedVolumeFieldNumber;
const int CTPCloseTradeRecord::kClosedAmountFieldNumber;
const int CTPCloseTradeRecord::kOpenTimeFieldNumber;
const int CTPCloseTradeRecord::kOpenTradingDayFieldNumber;
const int CTPCloseTradeRecord::kOpenOrderIdFieldNumber;
const int CTPCloseTradeRecord::kOpenTradeIdFieldNumber;
const int CTPCloseTradeRecord::kOpenTradeTypeFieldNumber;
const int CTPCloseTradeRecord::kOpenHedgeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseTimeFieldNumber;
const int CTPCloseTradeRecord::kCloseTradingDayFieldNumber;
const int CTPCloseTradeRecord::kCloseOrderIdFieldNumber;
const int CTPCloseTradeRecord::kCloseTradeIdFieldNumber;
const int CTPCloseTradeRecord::kCloseTradeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseHedgeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseProfitFieldNumber;
const int CTPCloseTradeRecord::kPreSettlementPriceFieldNumber;
const int CTPCloseTradeRecord::kCurrencyTypeFieldNumber;
const int CTPCloseTradeRecord::kOpenCommissionFieldNumber;
const int CTPCloseTradeRecord::kCloseCommissionFieldNumber;
const int CTPCloseTradeRecord::kMarginFieldNumber;
const int CTPCloseTradeRecord::kInitialOpenAmountFieldNumber;
const int CTPCloseTradeRecord::kVolumeMultipleFieldNumber;
const int CTPCloseTradeRecord::kFrozenInterestFieldNumber;
const int CTPCloseTradeRecord::kRouteAccountIdFieldNumber;
const int CTPCloseTradeRecord::kPositionProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCloseTradeRecord::CTPCloseTradeRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCloseTradeRecord)
}
CTPCloseTradeRecord::CTPCloseTradeRecord(const CTPCloseTradeRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  open_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.open_trade_id().size() > 0) {
    open_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_trade_id_);
  }
  close_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.close_trade_id().size() > 0) {
    close_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_trade_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_open_order_id()) {
    open_order_id_ = new ::pb::CTPOrderID(*from.open_order_id_);
  } else {
    open_order_id_ = nullptr;
  }
  if (from.has_close_order_id()) {
    close_order_id_ = new ::pb::CTPOrderID(*from.close_order_id_);
  } else {
    close_order_id_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCloseTradeRecord)
}

void CTPCloseTradeRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPCloseTradeRecord::~CTPCloseTradeRecord() {
  // @@protoc_insertion_point(destructor:pb.CTPCloseTradeRecord)
  SharedDtor();
}

void CTPCloseTradeRecord::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete open_order_id_;
  if (this != internal_default_instance()) delete close_order_id_;
}

void CTPCloseTradeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCloseTradeRecord& CTPCloseTradeRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCloseTradeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && open_order_id_ != nullptr) {
    delete open_order_id_;
  }
  open_order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && close_order_id_ != nullptr) {
    delete close_order_id_;
  }
  close_order_id_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCloseTradeRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCloseTradeRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPDirection direction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_volume = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_open_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double open_amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_open_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 closed_volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_closed_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double closed_amount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_closed_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 open_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_open_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_trading_day = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_open_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID open_order_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_open_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string open_trade_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.open_trade_id");
        object = msg->mutable_open_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 open_trade_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_open_trade_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_hedge_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_open_hedge_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 close_time = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_close_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 close_trading_day = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_close_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID close_order_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_close_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string close_trade_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.close_trade_id");
        object = msg->mutable_close_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 close_trade_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_close_trade_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 close_hedge_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_close_hedge_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double close_profit = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_close_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_settlement_price = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_pre_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CurrencyType currency_type = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_currency_type(static_cast<::pb::CurrencyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double open_commission = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 185) goto handle_unusual;
        msg->set_open_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double close_commission = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_close_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double initial_open_amount = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_initial_open_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double frozen_interest = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 225) goto handle_unusual;
        msg->set_frozen_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string route_account_id = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double position_profit = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_position_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCloseTradeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCloseTradeRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 closed_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double closed_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closed_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 open_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_trading_day = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID open_order_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string open_trade_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.open_trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_trade_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_trade_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_hedge_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_hedge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 close_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_trading_day = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID close_order_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string close_trade_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_close_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.close_trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_trade_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_trade_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_hedge_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_hedge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close_profit = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CurrencyType currency_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::pb::CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open_commission = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (185 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close_commission = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double initial_open_amount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_open_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_interest = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (225 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_profit = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCloseTradeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCloseTradeRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCloseTradeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open_volume(), output);
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->open_amount(), output);
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->closed_volume(), output);
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->closed_amount(), output);
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->open_time(), output);
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->open_trading_day(), output);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::open_order_id(this), output);
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.open_trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->open_trade_id(), output);
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->open_trade_type(), output);
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->open_hedge_type(), output);
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->close_time(), output);
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->close_trading_day(), output);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::close_order_id(this), output);
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.close_trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->close_trade_id(), output);
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->close_trade_type(), output);
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->close_hedge_type(), output);
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->close_profit(), output);
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->pre_settlement_price(), output);
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->currency_type(), output);
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->open_commission(), output);
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->close_commission(), output);
  }

  // double margin = 25;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->margin(), output);
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->initial_open_amount(), output);
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->volume_multiple(), output);
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->frozen_interest(), output);
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->route_account_id(), output);
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->position_profit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCloseTradeRecord)
}

::google::protobuf::uint8* CTPCloseTradeRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open_volume(), target);
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->open_amount(), target);
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->closed_volume(), target);
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->closed_amount(), target);
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->open_time(), target);
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->open_trading_day(), target);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::open_order_id(this), target);
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.open_trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->open_trade_id(), target);
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->open_trade_type(), target);
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->open_hedge_type(), target);
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->close_time(), target);
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->close_trading_day(), target);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::close_order_id(this), target);
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.close_trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->close_trade_id(), target);
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->close_trade_type(), target);
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->close_hedge_type(), target);
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->close_profit(), target);
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->pre_settlement_price(), target);
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->currency_type(), target);
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->open_commission(), target);
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->close_commission(), target);
  }

  // double margin = 25;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->margin(), target);
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->initial_open_amount(), target);
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->volume_multiple(), target);
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->frozen_interest(), target);
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->route_account_id(), target);
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->position_profit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCloseTradeRecord)
  return target;
}

size_t CTPCloseTradeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCloseTradeRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->open_trade_id());
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->close_trade_id());
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_order_id_);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *close_order_id_);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_volume());
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    total_size += 1 + 8;
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    total_size += 1 + 8;
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closed_volume());
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_trading_day());
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open_time());
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_trade_type());
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_hedge_type());
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close_time());
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_trading_day());
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_trade_type());
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_hedge_type());
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    total_size += 2 + 8;
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    total_size += 2 + 8;
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    total_size += 2 + 8;
  }

  // double margin = 25;
  if (this->margin() != 0) {
    total_size += 2 + 8;
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    total_size += 2 + 8;
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    total_size += 2 + 8;
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCloseTradeRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCloseTradeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCloseTradeRecord* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCloseTradeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCloseTradeRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCloseTradeRecord)
    MergeFrom(*source);
  }
}

void CTPCloseTradeRecord::MergeFrom(const CTPCloseTradeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCloseTradeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.open_trade_id().size() > 0) {

    open_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_trade_id_);
  }
  if (from.close_trade_id().size() > 0) {

    close_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_trade_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_open_order_id()) {
    mutable_open_order_id()->::pb::CTPOrderID::MergeFrom(from.open_order_id());
  }
  if (from.has_close_order_id()) {
    mutable_close_order_id()->::pb::CTPOrderID::MergeFrom(from.close_order_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.open_volume() != 0) {
    set_open_volume(from.open_volume());
  }
  if (from.open_amount() != 0) {
    set_open_amount(from.open_amount());
  }
  if (from.closed_amount() != 0) {
    set_closed_amount(from.closed_amount());
  }
  if (from.closed_volume() != 0) {
    set_closed_volume(from.closed_volume());
  }
  if (from.open_trading_day() != 0) {
    set_open_trading_day(from.open_trading_day());
  }
  if (from.open_time() != 0) {
    set_open_time(from.open_time());
  }
  if (from.open_trade_type() != 0) {
    set_open_trade_type(from.open_trade_type());
  }
  if (from.open_hedge_type() != 0) {
    set_open_hedge_type(from.open_hedge_type());
  }
  if (from.close_time() != 0) {
    set_close_time(from.close_time());
  }
  if (from.close_trading_day() != 0) {
    set_close_trading_day(from.close_trading_day());
  }
  if (from.close_trade_type() != 0) {
    set_close_trade_type(from.close_trade_type());
  }
  if (from.close_profit() != 0) {
    set_close_profit(from.close_profit());
  }
  if (from.close_hedge_type() != 0) {
    set_close_hedge_type(from.close_hedge_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.pre_settlement_price() != 0) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (from.open_commission() != 0) {
    set_open_commission(from.open_commission());
  }
  if (from.close_commission() != 0) {
    set_close_commission(from.close_commission());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.initial_open_amount() != 0) {
    set_initial_open_amount(from.initial_open_amount());
  }
  if (from.frozen_interest() != 0) {
    set_frozen_interest(from.frozen_interest());
  }
  if (from.position_profit() != 0) {
    set_position_profit(from.position_profit());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPCloseTradeRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCloseTradeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCloseTradeRecord::CopyFrom(const CTPCloseTradeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCloseTradeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCloseTradeRecord::IsInitialized() const {
  return true;
}

void CTPCloseTradeRecord::Swap(CTPCloseTradeRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCloseTradeRecord::InternalSwap(CTPCloseTradeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  open_trade_id_.Swap(&other->open_trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  close_trade_id_.Swap(&other->close_trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(open_order_id_, other->open_order_id_);
  swap(close_order_id_, other->close_order_id_);
  swap(direction_, other->direction_);
  swap(open_volume_, other->open_volume_);
  swap(open_amount_, other->open_amount_);
  swap(closed_amount_, other->closed_amount_);
  swap(closed_volume_, other->closed_volume_);
  swap(open_trading_day_, other->open_trading_day_);
  swap(open_time_, other->open_time_);
  swap(open_trade_type_, other->open_trade_type_);
  swap(open_hedge_type_, other->open_hedge_type_);
  swap(close_time_, other->close_time_);
  swap(close_trading_day_, other->close_trading_day_);
  swap(close_trade_type_, other->close_trade_type_);
  swap(close_profit_, other->close_profit_);
  swap(close_hedge_type_, other->close_hedge_type_);
  swap(currency_type_, other->currency_type_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(open_commission_, other->open_commission_);
  swap(close_commission_, other->close_commission_);
  swap(margin_, other->margin_);
  swap(initial_open_amount_, other->initial_open_amount_);
  swap(frozen_interest_, other->frozen_interest_);
  swap(position_profit_, other->position_profit_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPCloseTradeRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCloseTradeRecordList::InitAsDefaultInstance() {
}
class CTPCloseTradeRecordList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCloseTradeRecordList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCloseTradeRecordList::CTPCloseTradeRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCloseTradeRecordList)
}
CTPCloseTradeRecordList::CTPCloseTradeRecordList(const CTPCloseTradeRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPCloseTradeRecordList)
}

void CTPCloseTradeRecordList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
}

CTPCloseTradeRecordList::~CTPCloseTradeRecordList() {
  // @@protoc_insertion_point(destructor:pb.CTPCloseTradeRecordList)
  SharedDtor();
}

void CTPCloseTradeRecordList::SharedDtor() {
}

void CTPCloseTradeRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCloseTradeRecordList& CTPCloseTradeRecordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCloseTradeRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCloseTradeRecordList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCloseTradeRecordList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPCloseTradeRecord list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCloseTradeRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCloseTradeRecordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPCloseTradeRecord list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCloseTradeRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCloseTradeRecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCloseTradeRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCloseTradeRecordList)
}

::google::protobuf::uint8* CTPCloseTradeRecordList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCloseTradeRecordList)
  return target;
}

size_t CTPCloseTradeRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCloseTradeRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCloseTradeRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCloseTradeRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCloseTradeRecordList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCloseTradeRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCloseTradeRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCloseTradeRecordList)
    MergeFrom(*source);
  }
}

void CTPCloseTradeRecordList::MergeFrom(const CTPCloseTradeRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCloseTradeRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPCloseTradeRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCloseTradeRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCloseTradeRecordList::CopyFrom(const CTPCloseTradeRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCloseTradeRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCloseTradeRecordList::IsInitialized() const {
  return true;
}

void CTPCloseTradeRecordList::Swap(CTPCloseTradeRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCloseTradeRecordList::InternalSwap(CTPCloseTradeRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPCloseTradeRecordList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPMarginRate::InitAsDefaultInstance() {
}
class CTPMarginRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPMarginRate::kExchangeFieldNumber;
const int CTPMarginRate::kSymbolFieldNumber;
const int CTPMarginRate::kProductFieldNumber;
const int CTPMarginRate::kLongByVolumeFieldNumber;
const int CTPMarginRate::kLongByAmountFieldNumber;
const int CTPMarginRate::kShortByVolumeFieldNumber;
const int CTPMarginRate::kShortByAmountFieldNumber;
const int CTPMarginRate::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPMarginRate::CTPMarginRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPMarginRate)
}
CTPMarginRate::CTPMarginRate(const CTPMarginRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  ::memcpy(&long_by_volume_, &from.long_by_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPMarginRate)
}

void CTPMarginRate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPMarginRate_ctp_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
}

CTPMarginRate::~CTPMarginRate() {
  // @@protoc_insertion_point(destructor:pb.CTPMarginRate)
  SharedDtor();
}

void CTPMarginRate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPMarginRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPMarginRate& CTPMarginRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPMarginRate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPMarginRate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPMarginRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPMarginRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exchange(static_cast<::pb::ExchangeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPMarginRate.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string product = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPMarginRate.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double long_by_volume = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_long_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double long_by_amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_long_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_short_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_amount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_short_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPMarginRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPMarginRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPMarginRate.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPMarginRate.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPMarginRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPMarginRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPMarginRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product(), output);
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->long_by_volume(), output);
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->long_by_amount(), output);
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->short_by_volume(), output);
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->short_by_amount(), output);
  }

  // int64 id = 10;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPMarginRate)
}

::google::protobuf::uint8* CTPMarginRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->long_by_volume(), target);
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->long_by_amount(), target);
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->short_by_volume(), target);
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->short_by_amount(), target);
  }

  // int64 id = 10;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPMarginRate)
  return target;
}

size_t CTPMarginRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPMarginRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string product = 3;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product());
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  // int64 id = 10;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPMarginRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPMarginRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPMarginRate* source =
      ::google::protobuf::DynamicCastToGenerated<CTPMarginRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPMarginRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPMarginRate)
    MergeFrom(*source);
  }
}

void CTPMarginRate::MergeFrom(const CTPMarginRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPMarginRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  if (from.long_by_volume() != 0) {
    set_long_by_volume(from.long_by_volume());
  }
  if (from.long_by_amount() != 0) {
    set_long_by_amount(from.long_by_amount());
  }
  if (from.short_by_volume() != 0) {
    set_short_by_volume(from.short_by_volume());
  }
  if (from.short_by_amount() != 0) {
    set_short_by_amount(from.short_by_amount());
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CTPMarginRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPMarginRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPMarginRate::CopyFrom(const CTPMarginRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPMarginRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPMarginRate::IsInitialized() const {
  return true;
}

void CTPMarginRate::Swap(CTPMarginRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPMarginRate::InternalSwap(CTPMarginRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(long_by_volume_, other->long_by_volume_);
  swap(long_by_amount_, other->long_by_amount_);
  swap(short_by_volume_, other->short_by_volume_);
  swap(short_by_amount_, other->short_by_amount_);
  swap(exchange_, other->exchange_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CTPMarginRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPMarginItem::InitAsDefaultInstance() {
}
class CTPMarginItem::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPMarginItem::kLongByVolumeFieldNumber;
const int CTPMarginItem::kLongByAmountFieldNumber;
const int CTPMarginItem::kShortByVolumeFieldNumber;
const int CTPMarginItem::kShortByAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPMarginItem::CTPMarginItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPMarginItem)
}
CTPMarginItem::CTPMarginItem(const CTPMarginItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&long_by_volume_, &from.long_by_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_by_amount_) -
    reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPMarginItem)
}

void CTPMarginItem::SharedCtor() {
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_by_amount_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
}

CTPMarginItem::~CTPMarginItem() {
  // @@protoc_insertion_point(destructor:pb.CTPMarginItem)
  SharedDtor();
}

void CTPMarginItem::SharedDtor() {
}

void CTPMarginItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPMarginItem& CTPMarginItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPMarginItem_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPMarginItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_by_amount_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPMarginItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPMarginItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double long_by_volume = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_long_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double long_by_amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_long_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_volume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_short_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_amount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_short_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPMarginItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPMarginItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double long_by_volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_volume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPMarginItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPMarginItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPMarginItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->long_by_volume(), output);
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->long_by_amount(), output);
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->short_by_volume(), output);
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->short_by_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPMarginItem)
}

::google::protobuf::uint8* CTPMarginItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->long_by_volume(), target);
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->long_by_amount(), target);
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->short_by_volume(), target);
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->short_by_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPMarginItem)
  return target;
}

size_t CTPMarginItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPMarginItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPMarginItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPMarginItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPMarginItem* source =
      ::google::protobuf::DynamicCastToGenerated<CTPMarginItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPMarginItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPMarginItem)
    MergeFrom(*source);
  }
}

void CTPMarginItem::MergeFrom(const CTPMarginItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPMarginItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.long_by_volume() != 0) {
    set_long_by_volume(from.long_by_volume());
  }
  if (from.long_by_amount() != 0) {
    set_long_by_amount(from.long_by_amount());
  }
  if (from.short_by_volume() != 0) {
    set_short_by_volume(from.short_by_volume());
  }
  if (from.short_by_amount() != 0) {
    set_short_by_amount(from.short_by_amount());
  }
}

void CTPMarginItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPMarginItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPMarginItem::CopyFrom(const CTPMarginItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPMarginItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPMarginItem::IsInitialized() const {
  return true;
}

void CTPMarginItem::Swap(CTPMarginItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPMarginItem::InternalSwap(CTPMarginItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(long_by_volume_, other->long_by_volume_);
  swap(long_by_amount_, other->long_by_amount_);
  swap(short_by_volume_, other->short_by_volume_);
  swap(short_by_amount_, other->short_by_amount_);
}

::google::protobuf::Metadata CTPMarginItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCommissionRateItem::InitAsDefaultInstance() {
}
class CTPCommissionRateItem::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCommissionRateItem::kByAmountFieldNumber;
const int CTPCommissionRateItem::kByVolumeFieldNumber;
const int CTPCommissionRateItem::kMinimumFieldNumber;
const int CTPCommissionRateItem::kOffsetFlagFieldNumber;
const int CTPCommissionRateItem::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCommissionRateItem::CTPCommissionRateItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCommissionRateItem)
}
CTPCommissionRateItem::CTPCommissionRateItem(const CTPCommissionRateItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&by_amount_, &from.by_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_flag_) -
    reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCommissionRateItem)
}

void CTPCommissionRateItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&by_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
}

CTPCommissionRateItem::~CTPCommissionRateItem() {
  // @@protoc_insertion_point(destructor:pb.CTPCommissionRateItem)
  SharedDtor();
}

void CTPCommissionRateItem::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPCommissionRateItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCommissionRateItem& CTPCommissionRateItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCommissionRateItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&by_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCommissionRateItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCommissionRateItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double by_amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double by_volume = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double minimum = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_minimum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string tag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRateItem.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCommissionRateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCommissionRateItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double by_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double by_volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double minimum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRateItem.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCommissionRateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCommissionRateItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCommissionRateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->by_amount(), output);
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->by_volume(), output);
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minimum(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->offset_flag(), output);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRateItem.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCommissionRateItem)
}

::google::protobuf::uint8* CTPCommissionRateItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->by_amount(), target);
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->by_volume(), target);
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minimum(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->offset_flag(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRateItem.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCommissionRateItem)
  return target;
}

size_t CTPCommissionRateItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCommissionRateItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCommissionRateItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCommissionRateItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCommissionRateItem* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCommissionRateItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCommissionRateItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCommissionRateItem)
    MergeFrom(*source);
  }
}

void CTPCommissionRateItem::MergeFrom(const CTPCommissionRateItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCommissionRateItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.by_amount() != 0) {
    set_by_amount(from.by_amount());
  }
  if (from.by_volume() != 0) {
    set_by_volume(from.by_volume());
  }
  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
}

void CTPCommissionRateItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCommissionRateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCommissionRateItem::CopyFrom(const CTPCommissionRateItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCommissionRateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCommissionRateItem::IsInitialized() const {
  return true;
}

void CTPCommissionRateItem::Swap(CTPCommissionRateItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCommissionRateItem::InternalSwap(CTPCommissionRateItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(by_amount_, other->by_amount_);
  swap(by_volume_, other->by_volume_);
  swap(minimum_, other->minimum_);
  swap(offset_flag_, other->offset_flag_);
}

::google::protobuf::Metadata CTPCommissionRateItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCommissionRate::InitAsDefaultInstance() {
}
class CTPCommissionRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCommissionRate::kExchangeFieldNumber;
const int CTPCommissionRate::kSymbolFieldNumber;
const int CTPCommissionRate::kProductFieldNumber;
const int CTPCommissionRate::kSettingsFieldNumber;
const int CTPCommissionRate::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCommissionRate::CTPCommissionRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCommissionRate)
}
CTPCommissionRate::CTPCommissionRate(const CTPCommissionRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCommissionRate)
}

void CTPCommissionRate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCommissionRate_ctp_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
}

CTPCommissionRate::~CTPCommissionRate() {
  // @@protoc_insertion_point(destructor:pb.CTPCommissionRate)
  SharedDtor();
}

void CTPCommissionRate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPCommissionRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCommissionRate& CTPCommissionRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCommissionRate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCommissionRate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCommissionRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCommissionRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exchange(static_cast<::pb::ExchangeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRate.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string product = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRate.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.CTPCommissionRateItem settings = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCommissionRateItem::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int64 id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCommissionRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCommissionRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRate.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRate.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCommissionRateItem settings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCommissionRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCommissionRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCommissionRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product(), output);
  }

  // repeated .pb.CTPCommissionRateItem settings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->settings(static_cast<int>(i)),
      output);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCommissionRate)
}

::google::protobuf::uint8* CTPCommissionRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }

  // repeated .pb.CTPCommissionRateItem settings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->settings(static_cast<int>(i)), target);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCommissionRate)
  return target;
}

size_t CTPCommissionRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCommissionRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPCommissionRateItem settings = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string product = 3;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product());
  }

  // int64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCommissionRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCommissionRate* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCommissionRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCommissionRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCommissionRate)
    MergeFrom(*source);
  }
}

void CTPCommissionRate::MergeFrom(const CTPCommissionRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void CTPCommissionRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCommissionRate::CopyFrom(const CTPCommissionRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCommissionRate::IsInitialized() const {
  return true;
}

void CTPCommissionRate::Swap(CTPCommissionRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCommissionRate::InternalSwap(CTPCommissionRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(exchange_, other->exchange_);
}

::google::protobuf::Metadata CTPCommissionRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingUnit::InitAsDefaultInstance() {
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->cr_ = const_cast< ::pb::CTPCommissionRate*>(
      ::pb::CTPCommissionRate::internal_default_instance());
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->mr_ = const_cast< ::pb::CTPMarginRate*>(
      ::pb::CTPMarginRate::internal_default_instance());
}
class CTPTradingUnit::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPTradingUnit* msg);
  static const ::pb::CTPCommissionRate& cr(const CTPTradingUnit* msg);
  static const ::pb::CTPMarginRate& mr(const CTPTradingUnit* msg);
};

const ::pb::Symbol&
CTPTradingUnit::HasBitSetters::symbol(const CTPTradingUnit* msg) {
  return *msg->symbol_;
}
const ::pb::CTPCommissionRate&
CTPTradingUnit::HasBitSetters::cr(const CTPTradingUnit* msg) {
  return *msg->cr_;
}
const ::pb::CTPMarginRate&
CTPTradingUnit::HasBitSetters::mr(const CTPTradingUnit* msg) {
  return *msg->mr_;
}
void CTPTradingUnit::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingUnit::kSymbolFieldNumber;
const int CTPTradingUnit::kPositionFieldNumber;
const int CTPTradingUnit::kOrderLinkListFieldNumber;
const int CTPTradingUnit::kPositionDetailListFieldNumber;
const int CTPTradingUnit::kHistoryCtrListFieldNumber;
const int CTPTradingUnit::kHistoryOrderListFieldNumber;
const int CTPTradingUnit::kHistoryTradeListFieldNumber;
const int CTPTradingUnit::kLastPriceFieldNumber;
const int CTPTradingUnit::kLastMdsUpdateTimeFieldNumber;
const int CTPTradingUnit::kPriceTickFieldNumber;
const int CTPTradingUnit::kVolumeMultipleFieldNumber;
const int CTPTradingUnit::kCrFieldNumber;
const int CTPTradingUnit::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingUnit::CTPTradingUnit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingUnit)
}
CTPTradingUnit::CTPTradingUnit(const CTPTradingUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      position_(from.position_),
      order_link_list_(from.order_link_list_),
      position_detail_list_(from.position_detail_list_),
      history_ctr_list_(from.history_ctr_list_),
      history_order_list_(from.history_order_list_),
      history_trade_list_(from.history_trade_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_cr()) {
    cr_ = new ::pb::CTPCommissionRate(*from.cr_);
  } else {
    cr_ = nullptr;
  }
  if (from.has_mr()) {
    mr_ = new ::pb::CTPMarginRate(*from.mr_);
  } else {
    mr_ = nullptr;
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingUnit)
}

void CTPTradingUnit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingUnit_ctp_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPTradingUnit::~CTPTradingUnit() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingUnit)
  SharedDtor();
}

void CTPTradingUnit::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete cr_;
  if (this != internal_default_instance()) delete mr_;
}

void CTPTradingUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingUnit& CTPTradingUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingUnit_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  order_link_list_.Clear();
  position_detail_list_.Clear();
  history_ctr_list_.Clear();
  history_order_list_.Clear();
  history_trade_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cr_ != nullptr) {
    delete cr_;
  }
  cr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mr_ != nullptr) {
    delete mr_;
  }
  mr_ = nullptr;
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingUnit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingUnit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.CTPPosition position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPPosition::_InternalParse;
          object = msg->add_position();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPOrderLink order_link_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrderLink::_InternalParse;
          object = msg->add_order_link_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_position_detail_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_history_ctr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPOrder history_order_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_history_order_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPTradeReport history_trade_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradeReport::_InternalParse;
          object = msg->add_history_trade_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // double last_price = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_last_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 last_mds_update_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_last_mds_update_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double price_tick = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPCommissionRate cr = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPCommissionRate::_InternalParse;
        object = msg->mutable_cr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPMarginRate mr = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPMarginRate::_InternalParse;
        object = msg->mutable_mr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPPosition position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrderLink order_link_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_link_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_ctr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrder history_order_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPTradeReport history_trade_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_trade_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_mds_update_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_mds_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPCommissionRate cr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPMarginRate mr = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingUnit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.CTPPosition position = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->position(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_link_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->order_link_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->position_detail_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_ctr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->history_ctr_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->history_order_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_trade_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->history_trade_list(static_cast<int>(i)),
      output);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->last_price(), output);
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_mds_update_time(), output);
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price_tick(), output);
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volume_multiple(), output);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::cr(this), output);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::mr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingUnit)
}

::google::protobuf::uint8* CTPTradingUnit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.CTPPosition position = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->position(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_link_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->order_link_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->position_detail_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_ctr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->history_ctr_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->history_order_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_trade_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->history_trade_list(static_cast<int>(i)), target);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->last_price(), target);
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_mds_update_time(), target);
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price_tick(), target);
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volume_multiple(), target);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::cr(this), target);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::mr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingUnit)
  return target;
}

size_t CTPTradingUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPPosition position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->order_link_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_link_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->position_detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position_detail_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->history_ctr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_ctr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->history_order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_order_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->history_trade_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_trade_list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cr_);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mr_);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_mds_update_time());
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingUnit* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingUnit)
    MergeFrom(*source);
  }
}

void CTPTradingUnit::MergeFrom(const CTPTradingUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  order_link_list_.MergeFrom(from.order_link_list_);
  position_detail_list_.MergeFrom(from.position_detail_list_);
  history_ctr_list_.MergeFrom(from.history_ctr_list_);
  history_order_list_.MergeFrom(from.history_order_list_);
  history_trade_list_.MergeFrom(from.history_trade_list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_cr()) {
    mutable_cr()->::pb::CTPCommissionRate::MergeFrom(from.cr());
  }
  if (from.has_mr()) {
    mutable_mr()->::pb::CTPMarginRate::MergeFrom(from.mr());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.last_mds_update_time() != 0) {
    set_last_mds_update_time(from.last_mds_update_time());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPTradingUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingUnit::CopyFrom(const CTPTradingUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingUnit::IsInitialized() const {
  return true;
}

void CTPTradingUnit::Swap(CTPTradingUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingUnit::InternalSwap(CTPTradingUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&position_)->InternalSwap(CastToBase(&other->position_));
  CastToBase(&order_link_list_)->InternalSwap(CastToBase(&other->order_link_list_));
  CastToBase(&position_detail_list_)->InternalSwap(CastToBase(&other->position_detail_list_));
  CastToBase(&history_ctr_list_)->InternalSwap(CastToBase(&other->history_ctr_list_));
  CastToBase(&history_order_list_)->InternalSwap(CastToBase(&other->history_order_list_));
  CastToBase(&history_trade_list_)->InternalSwap(CastToBase(&other->history_trade_list_));
  swap(symbol_, other->symbol_);
  swap(cr_, other->cr_);
  swap(mr_, other->mr_);
  swap(last_price_, other->last_price_);
  swap(last_mds_update_time_, other->last_mds_update_time_);
  swap(price_tick_, other->price_tick_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPTradingUnit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPForceCloseTimeRule::InitAsDefaultInstance() {
}
class CTPForceCloseTimeRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPForceCloseTimeRule::kStartFieldNumber;
const int CTPForceCloseTimeRule::kEndFieldNumber;
const int CTPForceCloseTimeRule::kDisableOpenStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPForceCloseTimeRule::CTPForceCloseTimeRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPForceCloseTimeRule)
}
CTPForceCloseTimeRule::CTPForceCloseTimeRule(const CTPForceCloseTimeRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_open_start_) -
    reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPForceCloseTimeRule)
}

void CTPForceCloseTimeRule::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_start_) -
      reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
}

CTPForceCloseTimeRule::~CTPForceCloseTimeRule() {
  // @@protoc_insertion_point(destructor:pb.CTPForceCloseTimeRule)
  SharedDtor();
}

void CTPForceCloseTimeRule::SharedDtor() {
}

void CTPForceCloseTimeRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPForceCloseTimeRule& CTPForceCloseTimeRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPForceCloseTimeRule_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPForceCloseTimeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_start_) -
      reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPForceCloseTimeRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPForceCloseTimeRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 disable_open_start = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_disable_open_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPForceCloseTimeRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPForceCloseTimeRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 disable_open_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disable_open_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPForceCloseTimeRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPForceCloseTimeRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPForceCloseTimeRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->disable_open_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPForceCloseTimeRule)
}

::google::protobuf::uint8* CTPForceCloseTimeRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->disable_open_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPForceCloseTimeRule)
  return target;
}

size_t CTPForceCloseTimeRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPForceCloseTimeRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->disable_open_start());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPForceCloseTimeRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPForceCloseTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPForceCloseTimeRule* source =
      ::google::protobuf::DynamicCastToGenerated<CTPForceCloseTimeRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPForceCloseTimeRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPForceCloseTimeRule)
    MergeFrom(*source);
  }
}

void CTPForceCloseTimeRule::MergeFrom(const CTPForceCloseTimeRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPForceCloseTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.disable_open_start() != 0) {
    set_disable_open_start(from.disable_open_start());
  }
}

void CTPForceCloseTimeRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPForceCloseTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPForceCloseTimeRule::CopyFrom(const CTPForceCloseTimeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPForceCloseTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPForceCloseTimeRule::IsInitialized() const {
  return true;
}

void CTPForceCloseTimeRule::Swap(CTPForceCloseTimeRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPForceCloseTimeRule::InternalSwap(CTPForceCloseTimeRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(disable_open_start_, other->disable_open_start_);
}

::google::protobuf::Metadata CTPForceCloseTimeRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingUnitOption::InitAsDefaultInstance() {
  ::pb::_CTPTradingUnitOption_default_instance_._instance.get_mutable()->margin_rate_ = const_cast< ::pb::CTPMarginItem*>(
      ::pb::CTPMarginItem::internal_default_instance());
}
class CTPTradingUnitOption::HasBitSetters {
 public:
  static const ::pb::CTPMarginItem& margin_rate(const CTPTradingUnitOption* msg);
};

const ::pb::CTPMarginItem&
CTPTradingUnitOption::HasBitSetters::margin_rate(const CTPTradingUnitOption* msg) {
  return *msg->margin_rate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingUnitOption::kLimitPriceDisableOpenFieldNumber;
const int CTPTradingUnitOption::kLimitPriceForceCloseFieldNumber;
const int CTPTradingUnitOption::kPrePositionPercentageThresholdFieldNumber;
const int CTPTradingUnitOption::kPrePositionThresholdFieldNumber;
const int CTPTradingUnitOption::kPreVolumePercentageThresholdFieldNumber;
const int CTPTradingUnitOption::kPreVolumeThresholdFieldNumber;
const int CTPTradingUnitOption::kSingleProductMarginWeightLimitFieldNumber;
const int CTPTradingUnitOption::kFcrListFieldNumber;
const int CTPTradingUnitOption::kDisableOpenFieldNumber;
const int CTPTradingUnitOption::kCrSettingsFieldNumber;
const int CTPTradingUnitOption::kMarginRateFieldNumber;
const int CTPTradingUnitOption::kStoplossCandidatesFieldNumber;
const int CTPTradingUnitOption::kTakeProfitCandidatesFieldNumber;
const int CTPTradingUnitOption::kVolumeCandidatesFieldNumber;
const int CTPTradingUnitOption::kDisableOpenSymbolListFieldNumber;
const int CTPTradingUnitOption::kDisableOpenClassListFieldNumber;
const int CTPTradingUnitOption::kOpenDaysLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingUnitOption::CTPTradingUnitOption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingUnitOption)
}
CTPTradingUnitOption::CTPTradingUnitOption(const CTPTradingUnitOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fcr_list_(from.fcr_list_),
      cr_settings_(from.cr_settings_),
      stoploss_candidates_(from.stoploss_candidates_),
      take_profit_candidates_(from.take_profit_candidates_),
      volume_candidates_(from.volume_candidates_),
      disable_open_symbol_list_(from.disable_open_symbol_list_),
      disable_open_class_list_(from.disable_open_class_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_margin_rate()) {
    margin_rate_ = new ::pb::CTPMarginItem(*from.margin_rate_);
  } else {
    margin_rate_ = nullptr;
  }
  ::memcpy(&limit_price_disable_open_, &from.limit_price_disable_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_days_limit_) -
    reinterpret_cast<char*>(&limit_price_disable_open_)) + sizeof(open_days_limit_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingUnitOption)
}

void CTPTradingUnitOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  ::memset(&margin_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_days_limit_) -
      reinterpret_cast<char*>(&margin_rate_)) + sizeof(open_days_limit_));
}

CTPTradingUnitOption::~CTPTradingUnitOption() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingUnitOption)
  SharedDtor();
}

void CTPTradingUnitOption::SharedDtor() {
  if (this != internal_default_instance()) delete margin_rate_;
}

void CTPTradingUnitOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingUnitOption& CTPTradingUnitOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingUnitOption::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fcr_list_.Clear();
  cr_settings_.Clear();
  stoploss_candidates_.Clear();
  take_profit_candidates_.Clear();
  volume_candidates_.Clear();
  disable_open_symbol_list_.Clear();
  disable_open_class_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && margin_rate_ != nullptr) {
    delete margin_rate_;
  }
  margin_rate_ = nullptr;
  ::memset(&limit_price_disable_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_days_limit_) -
      reinterpret_cast<char*>(&limit_price_disable_open_)) + sizeof(open_days_limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingUnitOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingUnitOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 limit_price_disable_open = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_limit_price_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 limit_price_force_close = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit_price_force_close(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double pre_position_percentage_threshold = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_pre_position_percentage_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_position_threshold = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_pre_position_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_volume_percentage_threshold = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_pre_volume_percentage_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_volume_threshold = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_pre_volume_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double single_product_margin_weight_limit = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_single_product_margin_weight_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPForceCloseTimeRule::_InternalParse;
          object = msg->add_fcr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // bool disable_open = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.CTPCommissionRateItem cr_settings = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCommissionRateItem::_InternalParse;
          object = msg->add_cr_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // .pb.CTPMarginItem margin_rate = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPMarginItem::_InternalParse;
        object = msg->mutable_margin_rate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated int32 stoploss_candidates = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 98) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_stoploss_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        do {
          msg->add_stoploss_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 96 && (ptr += 1));
        break;
      }
      // repeated int32 take_profit_candidates = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 106) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_take_profit_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        do {
          msg->add_take_profit_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 104 && (ptr += 1));
        break;
      }
      // repeated int32 volume_candidates = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) == 114) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_volume_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        do {
          msg->add_volume_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 112 && (ptr += 1));
        break;
      }
      // repeated string disable_open_symbol_list = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPTradingUnitOption.disable_open_symbol_list");
          object = msg->add_disable_open_symbol_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // repeated string disable_open_class_list = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPTradingUnitOption.disable_open_class_list");
          object = msg->add_disable_open_class_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // int32 open_days_limit = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_open_days_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingUnitOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingUnitOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 limit_price_disable_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_price_disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit_price_force_close = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_price_force_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_position_percentage_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_position_percentage_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_position_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_position_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_volume_percentage_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_volume_percentage_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_volume_threshold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_volume_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double single_product_margin_weight_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &single_product_margin_weight_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fcr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCommissionRateItem cr_settings = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cr_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPMarginItem margin_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_margin_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stoploss_candidates = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoploss_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 98u, input, this->mutable_stoploss_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 take_profit_candidates = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_take_profit_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_take_profit_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 volume_candidates = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_volume_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 114u, input, this->mutable_volume_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string disable_open_symbol_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_open_symbol_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_open_symbol_list(this->disable_open_symbol_list_size() - 1).data(),
            static_cast<int>(this->disable_open_symbol_list(this->disable_open_symbol_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingUnitOption.disable_open_symbol_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string disable_open_class_list = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_open_class_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_open_class_list(this->disable_open_class_list_size() - 1).data(),
            static_cast<int>(this->disable_open_class_list(this->disable_open_class_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingUnitOption.disable_open_class_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_days_limit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_days_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingUnitOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingUnitOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingUnitOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit_price_disable_open(), output);
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_price_force_close(), output);
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pre_position_percentage_threshold(), output);
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pre_position_threshold(), output);
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pre_volume_percentage_threshold(), output);
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pre_volume_threshold(), output);
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->single_product_margin_weight_limit(), output);
  }

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fcr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->fcr_list(static_cast<int>(i)),
      output);
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->disable_open(), output);
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->cr_settings(static_cast<int>(i)),
      output);
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::margin_rate(this), output);
  }

  // repeated int32 stoploss_candidates = 12;
  if (this->stoploss_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stoploss_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->stoploss_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stoploss_candidates(i), output);
  }

  // repeated int32 take_profit_candidates = 13;
  if (this->take_profit_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_take_profit_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->take_profit_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->take_profit_candidates(i), output);
  }

  // repeated int32 volume_candidates = 14;
  if (this->volume_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_volume_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->volume_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->volume_candidates(i), output);
  }

  // repeated string disable_open_symbol_list = 15;
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_symbol_list(i).data(), static_cast<int>(this->disable_open_symbol_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_symbol_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->disable_open_symbol_list(i), output);
  }

  // repeated string disable_open_class_list = 16;
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_class_list(i).data(), static_cast<int>(this->disable_open_class_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_class_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->disable_open_class_list(i), output);
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->open_days_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingUnitOption)
}

::google::protobuf::uint8* CTPTradingUnitOption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit_price_disable_open(), target);
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_price_force_close(), target);
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pre_position_percentage_threshold(), target);
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pre_position_threshold(), target);
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pre_volume_percentage_threshold(), target);
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pre_volume_threshold(), target);
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->single_product_margin_weight_limit(), target);
  }

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fcr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->fcr_list(static_cast<int>(i)), target);
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->disable_open(), target);
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->cr_settings(static_cast<int>(i)), target);
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::margin_rate(this), target);
  }

  // repeated int32 stoploss_candidates = 12;
  if (this->stoploss_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _stoploss_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stoploss_candidates_, target);
  }

  // repeated int32 take_profit_candidates = 13;
  if (this->take_profit_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _take_profit_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->take_profit_candidates_, target);
  }

  // repeated int32 volume_candidates = 14;
  if (this->volume_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _volume_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->volume_candidates_, target);
  }

  // repeated string disable_open_symbol_list = 15;
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_symbol_list(i).data(), static_cast<int>(this->disable_open_symbol_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_symbol_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->disable_open_symbol_list(i), target);
  }

  // repeated string disable_open_class_list = 16;
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_class_list(i).data(), static_cast<int>(this->disable_open_class_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_class_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->disable_open_class_list(i), target);
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->open_days_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingUnitOption)
  return target;
}

size_t CTPTradingUnitOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingUnitOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->fcr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fcr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->cr_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cr_settings(static_cast<int>(i)));
    }
  }

  // repeated int32 stoploss_candidates = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stoploss_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _stoploss_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 take_profit_candidates = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->take_profit_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _take_profit_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_candidates = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->volume_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _volume_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string disable_open_symbol_list = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->disable_open_symbol_list_size());
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_open_symbol_list(i));
  }

  // repeated string disable_open_class_list = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->disable_open_class_list_size());
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_open_class_list(i));
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *margin_rate_);
  }

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_price_disable_open());
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_price_force_close());
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    total_size += 1 + 8;
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_days_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingUnitOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingUnitOption* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingUnitOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingUnitOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingUnitOption)
    MergeFrom(*source);
  }
}

void CTPTradingUnitOption::MergeFrom(const CTPTradingUnitOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fcr_list_.MergeFrom(from.fcr_list_);
  cr_settings_.MergeFrom(from.cr_settings_);
  stoploss_candidates_.MergeFrom(from.stoploss_candidates_);
  take_profit_candidates_.MergeFrom(from.take_profit_candidates_);
  volume_candidates_.MergeFrom(from.volume_candidates_);
  disable_open_symbol_list_.MergeFrom(from.disable_open_symbol_list_);
  disable_open_class_list_.MergeFrom(from.disable_open_class_list_);
  if (from.has_margin_rate()) {
    mutable_margin_rate()->::pb::CTPMarginItem::MergeFrom(from.margin_rate());
  }
  if (from.limit_price_disable_open() != 0) {
    set_limit_price_disable_open(from.limit_price_disable_open());
  }
  if (from.limit_price_force_close() != 0) {
    set_limit_price_force_close(from.limit_price_force_close());
  }
  if (from.pre_position_percentage_threshold() != 0) {
    set_pre_position_percentage_threshold(from.pre_position_percentage_threshold());
  }
  if (from.pre_position_threshold() != 0) {
    set_pre_position_threshold(from.pre_position_threshold());
  }
  if (from.pre_volume_percentage_threshold() != 0) {
    set_pre_volume_percentage_threshold(from.pre_volume_percentage_threshold());
  }
  if (from.pre_volume_threshold() != 0) {
    set_pre_volume_threshold(from.pre_volume_threshold());
  }
  if (from.single_product_margin_weight_limit() != 0) {
    set_single_product_margin_weight_limit(from.single_product_margin_weight_limit());
  }
  if (from.disable_open() != 0) {
    set_disable_open(from.disable_open());
  }
  if (from.open_days_limit() != 0) {
    set_open_days_limit(from.open_days_limit());
  }
}

void CTPTradingUnitOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingUnitOption::CopyFrom(const CTPTradingUnitOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingUnitOption::IsInitialized() const {
  return true;
}

void CTPTradingUnitOption::Swap(CTPTradingUnitOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingUnitOption::InternalSwap(CTPTradingUnitOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fcr_list_)->InternalSwap(CastToBase(&other->fcr_list_));
  CastToBase(&cr_settings_)->InternalSwap(CastToBase(&other->cr_settings_));
  stoploss_candidates_.InternalSwap(&other->stoploss_candidates_);
  take_profit_candidates_.InternalSwap(&other->take_profit_candidates_);
  volume_candidates_.InternalSwap(&other->volume_candidates_);
  disable_open_symbol_list_.InternalSwap(CastToBase(&other->disable_open_symbol_list_));
  disable_open_class_list_.InternalSwap(CastToBase(&other->disable_open_class_list_));
  swap(margin_rate_, other->margin_rate_);
  swap(limit_price_disable_open_, other->limit_price_disable_open_);
  swap(limit_price_force_close_, other->limit_price_force_close_);
  swap(pre_position_percentage_threshold_, other->pre_position_percentage_threshold_);
  swap(pre_position_threshold_, other->pre_position_threshold_);
  swap(pre_volume_percentage_threshold_, other->pre_volume_percentage_threshold_);
  swap(pre_volume_threshold_, other->pre_volume_threshold_);
  swap(single_product_margin_weight_limit_, other->single_product_margin_weight_limit_);
  swap(disable_open_, other->disable_open_);
  swap(open_days_limit_, other->open_days_limit_);
}

::google::protobuf::Metadata CTPTradingUnitOption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginCheckRule::InitAsDefaultInstance() {
}
class MarginCheckRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginCheckRule::kStartFieldNumber;
const int MarginCheckRule::kEndFieldNumber;
const int MarginCheckRule::kForceCloseOrderFieldNumber;
const int MarginCheckRule::kWarningLevelFieldNumber;
const int MarginCheckRule::kForceCloseLevelFieldNumber;
const int MarginCheckRule::kCommonBalanceMultipleFieldNumber;
const int MarginCheckRule::kDisableOpenUnderWarningLevelFieldNumber;
const int MarginCheckRule::kWarningLevelByPreferRatioFieldNumber;
const int MarginCheckRule::kForceCloseLevelByPreferRatioFieldNumber;
const int MarginCheckRule::kWarningLevelByMarginFieldNumber;
const int MarginCheckRule::kForceCloseLevelByMarginFieldNumber;
const int MarginCheckRule::kMarginCeilingFieldNumber;
const int MarginCheckRule::kPositionAmountCeilingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginCheckRule::MarginCheckRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MarginCheckRule)
}
MarginCheckRule::MarginCheckRule(const MarginCheckRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_amount_ceiling_) -
    reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
  // @@protoc_insertion_point(copy_constructor:pb.MarginCheckRule)
}

void MarginCheckRule::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_amount_ceiling_) -
      reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
}

MarginCheckRule::~MarginCheckRule() {
  // @@protoc_insertion_point(destructor:pb.MarginCheckRule)
  SharedDtor();
}

void MarginCheckRule::SharedDtor() {
}

void MarginCheckRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginCheckRule& MarginCheckRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginCheckRule_ctp_2eproto.base);
  return *internal_default_instance();
}


void MarginCheckRule::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_amount_ceiling_) -
      reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginCheckRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginCheckRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 force_close_order = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_force_close_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double warning_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_warning_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_force_close_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double common_balance_multiple = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_common_balance_multiple(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool disable_open_under_warning_level = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_disable_open_under_warning_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double warning_level_by_prefer_ratio = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_warning_level_by_prefer_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level_by_prefer_ratio = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_force_close_level_by_prefer_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double warning_level_by_margin = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_warning_level_by_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level_by_margin = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_force_close_level_by_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin_ceiling = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_margin_ceiling(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double position_amount_ceiling = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_position_amount_ceiling(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginCheckRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MarginCheckRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force_close_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_close_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double common_balance_multiple = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &common_balance_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open_under_warning_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_under_warning_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level_by_prefer_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_by_prefer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level_by_prefer_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_by_prefer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level_by_margin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_by_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level_by_margin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_by_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin_ceiling = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_ceiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_amount_ceiling = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_amount_ceiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MarginCheckRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MarginCheckRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginCheckRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->force_close_order(), output);
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->warning_level(), output);
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->force_close_level(), output);
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->common_balance_multiple(), output);
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_open_under_warning_level(), output);
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->warning_level_by_prefer_ratio(), output);
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->force_close_level_by_prefer_ratio(), output);
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->warning_level_by_margin(), output);
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->force_close_level_by_margin(), output);
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->margin_ceiling(), output);
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->position_amount_ceiling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MarginCheckRule)
}

::google::protobuf::uint8* MarginCheckRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->force_close_order(), target);
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->warning_level(), target);
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->force_close_level(), target);
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->common_balance_multiple(), target);
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_open_under_warning_level(), target);
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->warning_level_by_prefer_ratio(), target);
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->force_close_level_by_prefer_ratio(), target);
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->warning_level_by_margin(), target);
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->force_close_level_by_margin(), target);
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->margin_ceiling(), target);
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->position_amount_ceiling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MarginCheckRule)
  return target;
}

size_t MarginCheckRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MarginCheckRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    total_size += 1 + 8;
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force_close_order());
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    total_size += 1 + 1;
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    total_size += 1 + 8;
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    total_size += 1 + 8;
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    total_size += 1 + 8;
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginCheckRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MarginCheckRule)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginCheckRule* source =
      ::google::protobuf::DynamicCastToGenerated<MarginCheckRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MarginCheckRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MarginCheckRule)
    MergeFrom(*source);
  }
}

void MarginCheckRule::MergeFrom(const MarginCheckRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MarginCheckRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.warning_level() != 0) {
    set_warning_level(from.warning_level());
  }
  if (from.force_close_level() != 0) {
    set_force_close_level(from.force_close_level());
  }
  if (from.force_close_order() != 0) {
    set_force_close_order(from.force_close_order());
  }
  if (from.disable_open_under_warning_level() != 0) {
    set_disable_open_under_warning_level(from.disable_open_under_warning_level());
  }
  if (from.common_balance_multiple() != 0) {
    set_common_balance_multiple(from.common_balance_multiple());
  }
  if (from.warning_level_by_prefer_ratio() != 0) {
    set_warning_level_by_prefer_ratio(from.warning_level_by_prefer_ratio());
  }
  if (from.force_close_level_by_prefer_ratio() != 0) {
    set_force_close_level_by_prefer_ratio(from.force_close_level_by_prefer_ratio());
  }
  if (from.warning_level_by_margin() != 0) {
    set_warning_level_by_margin(from.warning_level_by_margin());
  }
  if (from.force_close_level_by_margin() != 0) {
    set_force_close_level_by_margin(from.force_close_level_by_margin());
  }
  if (from.margin_ceiling() != 0) {
    set_margin_ceiling(from.margin_ceiling());
  }
  if (from.position_amount_ceiling() != 0) {
    set_position_amount_ceiling(from.position_amount_ceiling());
  }
}

void MarginCheckRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MarginCheckRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginCheckRule::CopyFrom(const MarginCheckRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MarginCheckRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginCheckRule::IsInitialized() const {
  return true;
}

void MarginCheckRule::Swap(MarginCheckRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginCheckRule::InternalSwap(MarginCheckRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(warning_level_, other->warning_level_);
  swap(force_close_level_, other->force_close_level_);
  swap(force_close_order_, other->force_close_order_);
  swap(disable_open_under_warning_level_, other->disable_open_under_warning_level_);
  swap(common_balance_multiple_, other->common_balance_multiple_);
  swap(warning_level_by_prefer_ratio_, other->warning_level_by_prefer_ratio_);
  swap(force_close_level_by_prefer_ratio_, other->force_close_level_by_prefer_ratio_);
  swap(warning_level_by_margin_, other->warning_level_by_margin_);
  swap(force_close_level_by_margin_, other->force_close_level_by_margin_);
  swap(margin_ceiling_, other->margin_ceiling_);
  swap(position_amount_ceiling_, other->position_amount_ceiling_);
}

::google::protobuf::Metadata MarginCheckRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettlementUnitOption::InitAsDefaultInstance() {
}
class SettlementUnitOption::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettlementUnitOption::kIdFieldNumber;
const int SettlementUnitOption::kCommentFieldNumber;
const int SettlementUnitOption::kSettlementGroupFieldNumber;
const int SettlementUnitOption::kAvailableCheckLevelFieldNumber;
const int SettlementUnitOption::kForceCloseOnFieldNumber;
const int SettlementUnitOption::kMcrListFieldNumber;
const int SettlementUnitOption::kDisableOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettlementUnitOption::SettlementUnitOption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SettlementUnitOption)
}
SettlementUnitOption::SettlementUnitOption(const SettlementUnitOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      mcr_list_(from.mcr_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_open_) -
    reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
  // @@protoc_insertion_point(copy_constructor:pb.SettlementUnitOption)
}

void SettlementUnitOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettlementUnitOption_ctp_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
}

SettlementUnitOption::~SettlementUnitOption() {
  // @@protoc_insertion_point(destructor:pb.SettlementUnitOption)
  SharedDtor();
}

void SettlementUnitOption::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettlementUnitOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlementUnitOption& SettlementUnitOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettlementUnitOption_ctp_2eproto.base);
  return *internal_default_instance();
}


void SettlementUnitOption::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcr_list_.Clear();
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettlementUnitOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettlementUnitOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.SettlementUnitOption.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 settlement_group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_settlement_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 available_check_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_available_check_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool force_close_on = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_force_close_on(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.MarginCheckRule mcr_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::MarginCheckRule::_InternalParse;
          object = msg->add_mcr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // bool disable_open = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettlementUnitOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SettlementUnitOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SettlementUnitOption.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 available_check_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_check_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force_close_on = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_close_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MarginCheckRule mcr_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mcr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SettlementUnitOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SettlementUnitOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettlementUnitOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SettlementUnitOption.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->settlement_group(), output);
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->available_check_level(), output);
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_close_on(), output);
  }

  // repeated .pb.MarginCheckRule mcr_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mcr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->mcr_list(static_cast<int>(i)),
      output);
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SettlementUnitOption)
}

::google::protobuf::uint8* SettlementUnitOption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SettlementUnitOption.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->settlement_group(), target);
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->available_check_level(), target);
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_close_on(), target);
  }

  // repeated .pb.MarginCheckRule mcr_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mcr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->mcr_list(static_cast<int>(i)), target);
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SettlementUnitOption)
  return target;
}

size_t SettlementUnitOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SettlementUnitOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MarginCheckRule mcr_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mcr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mcr_list(static_cast<int>(i)));
    }
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available_check_level());
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlementUnitOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SettlementUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlementUnitOption* source =
      ::google::protobuf::DynamicCastToGenerated<SettlementUnitOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SettlementUnitOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SettlementUnitOption)
    MergeFrom(*source);
  }
}

void SettlementUnitOption::MergeFrom(const SettlementUnitOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SettlementUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mcr_list_.MergeFrom(from.mcr_list_);
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.available_check_level() != 0) {
    set_available_check_level(from.available_check_level());
  }
  if (from.force_close_on() != 0) {
    set_force_close_on(from.force_close_on());
  }
  if (from.disable_open() != 0) {
    set_disable_open(from.disable_open());
  }
}

void SettlementUnitOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SettlementUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlementUnitOption::CopyFrom(const SettlementUnitOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SettlementUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlementUnitOption::IsInitialized() const {
  return true;
}

void SettlementUnitOption::Swap(SettlementUnitOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettlementUnitOption::InternalSwap(SettlementUnitOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mcr_list_)->InternalSwap(CastToBase(&other->mcr_list_));
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(settlement_group_, other->settlement_group_);
  swap(available_check_level_, other->available_check_level_);
  swap(force_close_on_, other->force_close_on_);
  swap(disable_open_, other->disable_open_);
}

::google::protobuf::Metadata SettlementUnitOption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingAccount::InitAsDefaultInstance() {
  ::pb::_CTPTradingAccount_default_instance_._instance.get_mutable()->summary_ = const_cast< ::pb::AccountMoneySummary*>(
      ::pb::AccountMoneySummary::internal_default_instance());
  ::pb::_CTPTradingAccount_default_instance_._instance.get_mutable()->options_ = const_cast< ::pb::SettlementUnitOption*>(
      ::pb::SettlementUnitOption::internal_default_instance());
}
class CTPTradingAccount::HasBitSetters {
 public:
  static const ::pb::AccountMoneySummary& summary(const CTPTradingAccount* msg);
  static const ::pb::SettlementUnitOption& options(const CTPTradingAccount* msg);
};

const ::pb::AccountMoneySummary&
CTPTradingAccount::HasBitSetters::summary(const CTPTradingAccount* msg) {
  return *msg->summary_;
}
const ::pb::SettlementUnitOption&
CTPTradingAccount::HasBitSetters::options(const CTPTradingAccount* msg) {
  return *msg->options_;
}
void CTPTradingAccount::clear_summary() {
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
}
void CTPTradingAccount::clear_mtr_list() {
  mtr_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingAccount::kSummaryFieldNumber;
const int CTPTradingAccount::kMtrListFieldNumber;
const int CTPTradingAccount::kTuListFieldNumber;
const int CTPTradingAccount::kLastSettleDateFieldNumber;
const int CTPTradingAccount::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingAccount::CTPTradingAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingAccount)
}
CTPTradingAccount::CTPTradingAccount(const CTPTradingAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      mtr_list_(from.mtr_list_),
      tu_list_(from.tu_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_summary()) {
    summary_ = new ::pb::AccountMoneySummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from.has_options()) {
    options_ = new ::pb::SettlementUnitOption(*from.options_);
  } else {
    options_ = nullptr;
  }
  last_settle_date_ = from.last_settle_date_;
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingAccount)
}

void CTPTradingAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingAccount_ctp_2eproto.base);
  ::memset(&summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_settle_date_) -
      reinterpret_cast<char*>(&summary_)) + sizeof(last_settle_date_));
}

CTPTradingAccount::~CTPTradingAccount() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingAccount)
  SharedDtor();
}

void CTPTradingAccount::SharedDtor() {
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete options_;
}

void CTPTradingAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingAccount& CTPTradingAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingAccount_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtr_list_.Clear();
  tu_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  last_settle_date_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.AccountMoneySummary summary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::AccountMoneySummary::_InternalParse;
        object = msg->mutable_summary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.MoneyTransferRecord mtr_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::MoneyTransferRecord::_InternalParse;
          object = msg->add_mtr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPTradingUnit tu_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradingUnit::_InternalParse;
          object = msg->add_tu_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int32 last_settle_date = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_settle_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.SettlementUnitOption options = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::SettlementUnitOption::_InternalParse;
        object = msg->mutable_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.AccountMoneySummary summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MoneyTransferRecord mtr_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mtr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPTradingUnit tu_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tu_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_settle_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_settle_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.SettlementUnitOption options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::summary(this), output);
  }

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mtr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->mtr_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tu_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tu_list(static_cast<int>(i)),
      output);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_settle_date(), output);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingAccount)
}

::google::protobuf::uint8* CTPTradingAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::summary(this), target);
  }

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mtr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->mtr_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tu_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tu_list(static_cast<int>(i)), target);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_settle_date(), target);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingAccount)
  return target;
}

size_t CTPTradingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mtr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mtr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tu_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tu_list(static_cast<int>(i)));
    }
  }

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_settle_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingAccount* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingAccount)
    MergeFrom(*source);
  }
}

void CTPTradingAccount::MergeFrom(const CTPTradingAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mtr_list_.MergeFrom(from.mtr_list_);
  tu_list_.MergeFrom(from.tu_list_);
  if (from.has_summary()) {
    mutable_summary()->::pb::AccountMoneySummary::MergeFrom(from.summary());
  }
  if (from.has_options()) {
    mutable_options()->::pb::SettlementUnitOption::MergeFrom(from.options());
  }
  if (from.last_settle_date() != 0) {
    set_last_settle_date(from.last_settle_date());
  }
}

void CTPTradingAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingAccount::CopyFrom(const CTPTradingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingAccount::IsInitialized() const {
  return true;
}

void CTPTradingAccount::Swap(CTPTradingAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingAccount::InternalSwap(CTPTradingAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mtr_list_)->InternalSwap(CastToBase(&other->mtr_list_));
  CastToBase(&tu_list_)->InternalSwap(CastToBase(&other->tu_list_));
  swap(summary_, other->summary_);
  swap(options_, other->options_);
  swap(last_settle_date_, other->last_settle_date_);
}

::google::protobuf::Metadata CTPTradingAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingAccountSnapshot::InitAsDefaultInstance() {
  ::pb::_CTPTradingAccountSnapshot_default_instance_._instance.get_mutable()->account_ = const_cast< ::pb::CTPTradingAccount*>(
      ::pb::CTPTradingAccount::internal_default_instance());
}
class CTPTradingAccountSnapshot::HasBitSetters {
 public:
  static const ::pb::CTPTradingAccount& account(const CTPTradingAccountSnapshot* msg);
};

const ::pb::CTPTradingAccount&
CTPTradingAccountSnapshot::HasBitSetters::account(const CTPTradingAccountSnapshot* msg) {
  return *msg->account_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingAccountSnapshot::kAccountFieldNumber;
const int CTPTradingAccountSnapshot::kTimeFieldNumber;
const int CTPTradingAccountSnapshot::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingAccountSnapshot::CTPTradingAccountSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingAccountSnapshot)
}
CTPTradingAccountSnapshot::CTPTradingAccountSnapshot(const CTPTradingAccountSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_account()) {
    account_ = new ::pb::CTPTradingAccount(*from.account_);
  } else {
    account_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingAccountSnapshot)
}

void CTPTradingAccountSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&account_)) + sizeof(time_));
}

CTPTradingAccountSnapshot::~CTPTradingAccountSnapshot() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingAccountSnapshot)
  SharedDtor();
}

void CTPTradingAccountSnapshot::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
}

void CTPTradingAccountSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingAccountSnapshot& CTPTradingAccountSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingAccountSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingAccountSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingAccountSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPTradingAccount account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPTradingAccount::_InternalParse;
        object = msg->mutable_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradingAccountSnapshot.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingAccountSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingAccountSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPTradingAccount account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingAccountSnapshot.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingAccountSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingAccountSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingAccountSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingAccountSnapshot.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingAccountSnapshot)
}

::google::protobuf::uint8* CTPTradingAccountSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingAccountSnapshot.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingAccountSnapshot)
  return target;
}

size_t CTPTradingAccountSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingAccountSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingAccountSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingAccountSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingAccountSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingAccountSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingAccountSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingAccountSnapshot)
    MergeFrom(*source);
  }
}

void CTPTradingAccountSnapshot::MergeFrom(const CTPTradingAccountSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingAccountSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_account()) {
    mutable_account()->::pb::CTPTradingAccount::MergeFrom(from.account());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void CTPTradingAccountSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingAccountSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingAccountSnapshot::CopyFrom(const CTPTradingAccountSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingAccountSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingAccountSnapshot::IsInitialized() const {
  return true;
}

void CTPTradingAccountSnapshot::Swap(CTPTradingAccountSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingAccountSnapshot::InternalSwap(CTPTradingAccountSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata CTPTradingAccountSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPRspInfo::InitAsDefaultInstance() {
}
class CTPRspInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPRspInfo::kErrorIdFieldNumber;
const int CTPRspInfo::kErrorMsgFieldNumber;
const int CTPRspInfo::kRequestIdFieldNumber;
const int CTPRspInfo::kIsLastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPRspInfo::CTPRspInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPRspInfo)
}
CTPRspInfo::CTPRspInfo(const CTPRspInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPRspInfo)
}

void CTPRspInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPRspInfo_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
}

CTPRspInfo::~CTPRspInfo() {
  // @@protoc_insertion_point(destructor:pb.CTPRspInfo)
  SharedDtor();
}

void CTPRspInfo::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPRspInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPRspInfo& CTPRspInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPRspInfo_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPRspInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPRspInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPRspInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPRspInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPRspInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPRspInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPRspInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPRspInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPRspInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPRspInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPRspInfo)
}

::google::protobuf::uint8* CTPRspInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPRspInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPRspInfo)
  return target;
}

size_t CTPRspInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPRspInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_msg());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPRspInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPRspInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPRspInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CTPRspInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPRspInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPRspInfo)
    MergeFrom(*source);
  }
}

void CTPRspInfo::MergeFrom(const CTPRspInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPRspInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
}

void CTPRspInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPRspInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPRspInfo::CopyFrom(const CTPRspInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPRspInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPRspInfo::IsInitialized() const {
  return true;
}

void CTPRspInfo::Swap(CTPRspInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPRspInfo::InternalSwap(CTPRspInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
}

::google::protobuf::Metadata CTPRspInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqQryAccountRegister::InitAsDefaultInstance() {
}
class CtpReqQryAccountRegister::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqQryAccountRegister::kBrokerIdFieldNumber;
const int CtpReqQryAccountRegister::kAccountIdFieldNumber;
const int CtpReqQryAccountRegister::kBankIdFieldNumber;
const int CtpReqQryAccountRegister::kBankBranchIdFieldNumber;
const int CtpReqQryAccountRegister::kCurrencyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqQryAccountRegister::CtpReqQryAccountRegister()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqQryAccountRegister)
}
CtpReqQryAccountRegister::CtpReqQryAccountRegister(const CtpReqQryAccountRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_id().size() > 0) {
    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_branch_id().size() > 0) {
    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_id().size() > 0) {
    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqQryAccountRegister)
}

void CtpReqQryAccountRegister::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqQryAccountRegister_ctp_2eproto.base);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqQryAccountRegister::~CtpReqQryAccountRegister() {
  // @@protoc_insertion_point(destructor:pb.CtpReqQryAccountRegister)
  SharedDtor();
}

void CtpReqQryAccountRegister::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqQryAccountRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqQryAccountRegister& CtpReqQryAccountRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqQryAccountRegister_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqQryAccountRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqQryAccountRegister::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqQryAccountRegister*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string broker_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryAccountRegister.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryAccountRegister.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryAccountRegister.bank_id");
        object = msg->mutable_bank_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_branch_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryAccountRegister.bank_branch_id");
        object = msg->mutable_bank_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currency_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryAccountRegister.currency_id");
        object = msg->mutable_currency_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqQryAccountRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqQryAccountRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string broker_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryAccountRegister.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryAccountRegister.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_id().data(), static_cast<int>(this->bank_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryAccountRegister.bank_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_branch_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryAccountRegister.bank_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_id().data(), static_cast<int>(this->currency_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryAccountRegister.currency_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqQryAccountRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqQryAccountRegister)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqQryAccountRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->broker_id(), output);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_id(), output);
  }

  // string bank_id = 3;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.bank_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bank_id(), output);
  }

  // string bank_branch_id = 4;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.bank_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bank_branch_id(), output);
  }

  // string currency_id = 5;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.currency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->currency_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqQryAccountRegister)
}

::google::protobuf::uint8* CtpReqQryAccountRegister::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broker_id(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }

  // string bank_id = 3;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.bank_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bank_id(), target);
  }

  // string bank_branch_id = 4;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.bank_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bank_branch_id(), target);
  }

  // string currency_id = 5;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryAccountRegister.currency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->currency_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqQryAccountRegister)
  return target;
}

size_t CtpReqQryAccountRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqQryAccountRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string bank_id = 3;
  if (this->bank_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_id());
  }

  // string bank_branch_id = 4;
  if (this->bank_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_branch_id());
  }

  // string currency_id = 5;
  if (this->currency_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqQryAccountRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqQryAccountRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqQryAccountRegister* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqQryAccountRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqQryAccountRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqQryAccountRegister)
    MergeFrom(*source);
  }
}

void CtpReqQryAccountRegister::MergeFrom(const CtpReqQryAccountRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqQryAccountRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.bank_id().size() > 0) {

    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  if (from.bank_branch_id().size() > 0) {

    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  if (from.currency_id().size() > 0) {

    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
}

void CtpReqQryAccountRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqQryAccountRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqQryAccountRegister::CopyFrom(const CtpReqQryAccountRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqQryAccountRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqQryAccountRegister::IsInitialized() const {
  return true;
}

void CtpReqQryAccountRegister::Swap(CtpReqQryAccountRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqQryAccountRegister::InternalSwap(CtpReqQryAccountRegister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_id_.Swap(&other->bank_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_branch_id_.Swap(&other->bank_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_id_.Swap(&other->currency_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqQryAccountRegister::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspQryAccountRegister::InitAsDefaultInstance() {
}
class CtpRspQryAccountRegister::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspQryAccountRegister::kErrorIdFieldNumber;
const int CtpRspQryAccountRegister::kErrorMsgFieldNumber;
const int CtpRspQryAccountRegister::kRequestIdFieldNumber;
const int CtpRspQryAccountRegister::kIsLastFieldNumber;
const int CtpRspQryAccountRegister::kTradingDayFieldNumber;
const int CtpRspQryAccountRegister::kBankIdFieldNumber;
const int CtpRspQryAccountRegister::kBankBranchIdFieldNumber;
const int CtpRspQryAccountRegister::kBankAccountFieldNumber;
const int CtpRspQryAccountRegister::kBrokerIdFieldNumber;
const int CtpRspQryAccountRegister::kBrokerBranchIdFieldNumber;
const int CtpRspQryAccountRegister::kAccountIdFieldNumber;
const int CtpRspQryAccountRegister::kIdCardTypeFieldNumber;
const int CtpRspQryAccountRegister::kIdentifiedCardNoFieldNumber;
const int CtpRspQryAccountRegister::kCustomerNameFieldNumber;
const int CtpRspQryAccountRegister::kCurrencyIdFieldNumber;
const int CtpRspQryAccountRegister::kOpenOrDestoryFieldNumber;
const int CtpRspQryAccountRegister::kRegDateFieldNumber;
const int CtpRspQryAccountRegister::kOutDateFieldNumber;
const int CtpRspQryAccountRegister::kTidFieldNumber;
const int CtpRspQryAccountRegister::kCustTypeFieldNumber;
const int CtpRspQryAccountRegister::kBankAccTypeFieldNumber;
const int CtpRspQryAccountRegister::kLongCustomerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspQryAccountRegister::CtpRspQryAccountRegister()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspQryAccountRegister)
}
CtpRspQryAccountRegister::CtpRspQryAccountRegister(const CtpRspQryAccountRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trading_day().size() > 0) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_id().size() > 0) {
    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_branch_id().size() > 0) {
    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  bank_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_account().size() > 0) {
    bank_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_account_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  broker_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_branch_id().size() > 0) {
    broker_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_branch_id_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identified_card_no().size() > 0) {
    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_name().size() > 0) {
    customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_name_);
  }
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_id().size() > 0) {
    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  reg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reg_date().size() > 0) {
    reg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reg_date_);
  }
  out_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.out_date().size() > 0) {
    out_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_date_);
  }
  long_customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_customer_name().size() > 0) {
    long_customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_customer_name_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_acc_type_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(bank_acc_type_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspQryAccountRegister)
}

void CtpRspQryAccountRegister::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspQryAccountRegister_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reg_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_acc_type_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(bank_acc_type_));
}

CtpRspQryAccountRegister::~CtpRspQryAccountRegister() {
  // @@protoc_insertion_point(destructor:pb.CtpRspQryAccountRegister)
  SharedDtor();
}

void CtpRspQryAccountRegister::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reg_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpRspQryAccountRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspQryAccountRegister& CtpRspQryAccountRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspQryAccountRegister_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspQryAccountRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reg_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  out_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_acc_type_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(bank_acc_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspQryAccountRegister::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspQryAccountRegister*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string trading_day = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.trading_day");
        object = msg->mutable_trading_day();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.bank_id");
        object = msg->mutable_bank_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_branch_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.bank_branch_id");
        object = msg->mutable_bank_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_account = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.bank_account");
        object = msg->mutable_bank_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_branch_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.broker_branch_id");
        object = msg->mutable_broker_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 id_card_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_id_card_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string identified_card_no = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.identified_card_no");
        object = msg->mutable_identified_card_no();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string customer_name = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.customer_name");
        object = msg->mutable_customer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currency_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.currency_id");
        object = msg->mutable_currency_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 open_or_destory = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_open_or_destory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reg_date = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.reg_date");
        object = msg->mutable_reg_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string out_date = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.out_date");
        object = msg->mutable_out_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 tid = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_tid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 cust_type = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_cust_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 bank_acc_type = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_bank_acc_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string long_customer_name = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryAccountRegister.long_customer_name");
        object = msg->mutable_long_customer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspQryAccountRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspQryAccountRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trading_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.trading_day"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_id().data(), static_cast<int>(this->bank_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.bank_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_branch_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.bank_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_account = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_account().data(), static_cast<int>(this->bank_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.bank_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_branch_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.broker_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id_card_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_card_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identified_card_no = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identified_card_no()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.identified_card_no"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_name().data(), static_cast<int>(this->customer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.customer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_id().data(), static_cast<int>(this->currency_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.currency_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_or_destory = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_or_destory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reg_date = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reg_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reg_date().data(), static_cast<int>(this->reg_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.reg_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string out_date = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->out_date().data(), static_cast<int>(this->out_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.out_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cust_type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cust_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bank_acc_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_acc_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_customer_name = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_customer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryAccountRegister.long_customer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspQryAccountRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspQryAccountRegister)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspQryAccountRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trading_day(), output);
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bank_id(), output);
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bank_branch_id(), output);
  }

  // string bank_account = 8;
  if (this->bank_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_account().data(), static_cast<int>(this->bank_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bank_account(), output);
  }

  // string broker_id = 9;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->broker_id(), output);
  }

  // string broker_branch_id = 10;
  if (this->broker_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.broker_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->broker_branch_id(), output);
  }

  // string account_id = 11;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->account_id(), output);
  }

  // int32 id_card_type = 12;
  if (this->id_card_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->id_card_type(), output);
  }

  // string identified_card_no = 13;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.identified_card_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->identified_card_no(), output);
  }

  // string customer_name = 14;
  if (this->customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_name().data(), static_cast<int>(this->customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.customer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->customer_name(), output);
  }

  // string currency_id = 15;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.currency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->currency_id(), output);
  }

  // int32 open_or_destory = 16;
  if (this->open_or_destory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->open_or_destory(), output);
  }

  // string reg_date = 17;
  if (this->reg_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reg_date().data(), static_cast<int>(this->reg_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.reg_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->reg_date(), output);
  }

  // string out_date = 18;
  if (this->out_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->out_date().data(), static_cast<int>(this->out_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.out_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->out_date(), output);
  }

  // int32 tid = 19;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tid(), output);
  }

  // int32 cust_type = 20;
  if (this->cust_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cust_type(), output);
  }

  // int32 bank_acc_type = 21;
  if (this->bank_acc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->bank_acc_type(), output);
  }

  // string long_customer_name = 22;
  if (this->long_customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.long_customer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->long_customer_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspQryAccountRegister)
}

::google::protobuf::uint8* CtpRspQryAccountRegister::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspQryAccountRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trading_day(), target);
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bank_id(), target);
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bank_branch_id(), target);
  }

  // string bank_account = 8;
  if (this->bank_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_account().data(), static_cast<int>(this->bank_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.bank_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bank_account(), target);
  }

  // string broker_id = 9;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->broker_id(), target);
  }

  // string broker_branch_id = 10;
  if (this->broker_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.broker_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->broker_branch_id(), target);
  }

  // string account_id = 11;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->account_id(), target);
  }

  // int32 id_card_type = 12;
  if (this->id_card_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->id_card_type(), target);
  }

  // string identified_card_no = 13;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.identified_card_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->identified_card_no(), target);
  }

  // string customer_name = 14;
  if (this->customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_name().data(), static_cast<int>(this->customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.customer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->customer_name(), target);
  }

  // string currency_id = 15;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.currency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->currency_id(), target);
  }

  // int32 open_or_destory = 16;
  if (this->open_or_destory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->open_or_destory(), target);
  }

  // string reg_date = 17;
  if (this->reg_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reg_date().data(), static_cast<int>(this->reg_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.reg_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->reg_date(), target);
  }

  // string out_date = 18;
  if (this->out_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->out_date().data(), static_cast<int>(this->out_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.out_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->out_date(), target);
  }

  // int32 tid = 19;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tid(), target);
  }

  // int32 cust_type = 20;
  if (this->cust_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cust_type(), target);
  }

  // int32 bank_acc_type = 21;
  if (this->bank_acc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->bank_acc_type(), target);
  }

  // string long_customer_name = 22;
  if (this->long_customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryAccountRegister.long_customer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->long_customer_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspQryAccountRegister)
  return target;
}

size_t CtpRspQryAccountRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspQryAccountRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trading_day());
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_id());
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_branch_id());
  }

  // string bank_account = 8;
  if (this->bank_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_account());
  }

  // string broker_id = 9;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string broker_branch_id = 10;
  if (this->broker_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_branch_id());
  }

  // string account_id = 11;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string identified_card_no = 13;
  if (this->identified_card_no().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identified_card_no());
  }

  // string customer_name = 14;
  if (this->customer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_name());
  }

  // string currency_id = 15;
  if (this->currency_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_id());
  }

  // string reg_date = 17;
  if (this->reg_date().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reg_date());
  }

  // string out_date = 18;
  if (this->out_date().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->out_date());
  }

  // string long_customer_name = 22;
  if (this->long_customer_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_customer_name());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  // int32 id_card_type = 12;
  if (this->id_card_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id_card_type());
  }

  // int32 open_or_destory = 16;
  if (this->open_or_destory() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_or_destory());
  }

  // int32 tid = 19;
  if (this->tid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  // int32 cust_type = 20;
  if (this->cust_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cust_type());
  }

  // int32 bank_acc_type = 21;
  if (this->bank_acc_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bank_acc_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspQryAccountRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspQryAccountRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspQryAccountRegister* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspQryAccountRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspQryAccountRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspQryAccountRegister)
    MergeFrom(*source);
  }
}

void CtpRspQryAccountRegister::MergeFrom(const CtpRspQryAccountRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspQryAccountRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.trading_day().size() > 0) {

    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  if (from.bank_id().size() > 0) {

    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  if (from.bank_branch_id().size() > 0) {

    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  if (from.bank_account().size() > 0) {

    bank_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_account_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.broker_branch_id().size() > 0) {

    broker_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_branch_id_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.identified_card_no().size() > 0) {

    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  if (from.customer_name().size() > 0) {

    customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_name_);
  }
  if (from.currency_id().size() > 0) {

    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  if (from.reg_date().size() > 0) {

    reg_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reg_date_);
  }
  if (from.out_date().size() > 0) {

    out_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.out_date_);
  }
  if (from.long_customer_name().size() > 0) {

    long_customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_customer_name_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
  if (from.id_card_type() != 0) {
    set_id_card_type(from.id_card_type());
  }
  if (from.open_or_destory() != 0) {
    set_open_or_destory(from.open_or_destory());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
  if (from.cust_type() != 0) {
    set_cust_type(from.cust_type());
  }
  if (from.bank_acc_type() != 0) {
    set_bank_acc_type(from.bank_acc_type());
  }
}

void CtpRspQryAccountRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspQryAccountRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspQryAccountRegister::CopyFrom(const CtpRspQryAccountRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspQryAccountRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspQryAccountRegister::IsInitialized() const {
  return true;
}

void CtpRspQryAccountRegister::Swap(CtpRspQryAccountRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspQryAccountRegister::InternalSwap(CtpRspQryAccountRegister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_id_.Swap(&other->bank_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_branch_id_.Swap(&other->bank_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_account_.Swap(&other->bank_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_branch_id_.Swap(&other->broker_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identified_card_no_.Swap(&other->identified_card_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_name_.Swap(&other->customer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_id_.Swap(&other->currency_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reg_date_.Swap(&other->reg_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  out_date_.Swap(&other->out_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long_customer_name_.Swap(&other->long_customer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
  swap(id_card_type_, other->id_card_type_);
  swap(open_or_destory_, other->open_or_destory_);
  swap(tid_, other->tid_);
  swap(cust_type_, other->cust_type_);
  swap(bank_acc_type_, other->bank_acc_type_);
}

::google::protobuf::Metadata CtpRspQryAccountRegister::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqAuthencate::InitAsDefaultInstance() {
}
class CtpReqAuthencate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqAuthencate::kAuthCodeFieldNumber;
const int CtpReqAuthencate::kProductFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqAuthencate::CtpReqAuthencate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqAuthencate)
}
CtpReqAuthencate::CtpReqAuthencate(const CtpReqAuthencate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auth_code().size() > 0) {
    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqAuthencate)
}

void CtpReqAuthencate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqAuthencate_ctp_2eproto.base);
  auth_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqAuthencate::~CtpReqAuthencate() {
  // @@protoc_insertion_point(destructor:pb.CtpReqAuthencate)
  SharedDtor();
}

void CtpReqAuthencate::SharedDtor() {
  auth_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqAuthencate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqAuthencate& CtpReqAuthencate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqAuthencate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqAuthencate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqAuthencate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqAuthencate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string auth_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqAuthencate.auth_code");
        object = msg->mutable_auth_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string product = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqAuthencate.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqAuthencate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqAuthencate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string auth_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auth_code().data(), static_cast<int>(this->auth_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqAuthencate.auth_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqAuthencate.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqAuthencate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqAuthencate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqAuthencate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_code = 1;
  if (this->auth_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqAuthencate.auth_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_code(), output);
  }

  // string product = 2;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqAuthencate.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqAuthencate)
}

::google::protobuf::uint8* CtpReqAuthencate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_code = 1;
  if (this->auth_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auth_code().data(), static_cast<int>(this->auth_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqAuthencate.auth_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_code(), target);
  }

  // string product = 2;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqAuthencate.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->product(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqAuthencate)
  return target;
}

size_t CtpReqAuthencate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqAuthencate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_code = 1;
  if (this->auth_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auth_code());
  }

  // string product = 2;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqAuthencate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqAuthencate)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqAuthencate* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqAuthencate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqAuthencate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqAuthencate)
    MergeFrom(*source);
  }
}

void CtpReqAuthencate::MergeFrom(const CtpReqAuthencate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqAuthencate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth_code().size() > 0) {

    auth_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_code_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
}

void CtpReqAuthencate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqAuthencate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqAuthencate::CopyFrom(const CtpReqAuthencate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqAuthencate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqAuthencate::IsInitialized() const {
  return true;
}

void CtpReqAuthencate::Swap(CtpReqAuthencate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqAuthencate::InternalSwap(CtpReqAuthencate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  auth_code_.Swap(&other->auth_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqAuthencate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspAuthencate::InitAsDefaultInstance() {
}
class CtpRspAuthencate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspAuthencate::kErrorIdFieldNumber;
const int CtpRspAuthencate::kErrorMsgFieldNumber;
const int CtpRspAuthencate::kRequestIdFieldNumber;
const int CtpRspAuthencate::kIsLastFieldNumber;
const int CtpRspAuthencate::kBrokerIdFieldNumber;
const int CtpRspAuthencate::kUserIdFieldNumber;
const int CtpRspAuthencate::kUserProductInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspAuthencate::CtpRspAuthencate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspAuthencate)
}
CtpRspAuthencate::CtpRspAuthencate(const CtpRspAuthencate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_product_info().size() > 0) {
    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspAuthencate)
}

void CtpRspAuthencate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspAuthencate_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
}

CtpRspAuthencate::~CtpRspAuthencate() {
  // @@protoc_insertion_point(destructor:pb.CtpRspAuthencate)
  SharedDtor();
}

void CtpRspAuthencate::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpRspAuthencate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspAuthencate& CtpRspAuthencate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspAuthencate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspAuthencate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspAuthencate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspAuthencate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspAuthencate.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string broker_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspAuthencate.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspAuthencate.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_product_info = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspAuthencate.user_product_info");
        object = msg->mutable_user_product_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspAuthencate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspAuthencate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspAuthencate.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspAuthencate.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspAuthencate.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_product_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_product_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspAuthencate.user_product_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspAuthencate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspAuthencate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspAuthencate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broker_id(), output);
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_id(), output);
  }

  // string user_product_info = 7;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.user_product_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_product_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspAuthencate)
}

::google::protobuf::uint8* CtpRspAuthencate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspAuthencate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broker_id(), target);
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_id(), target);
  }

  // string user_product_info = 7;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspAuthencate.user_product_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user_product_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspAuthencate)
  return target;
}

size_t CtpRspAuthencate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspAuthencate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string user_id = 6;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string user_product_info = 7;
  if (this->user_product_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_product_info());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspAuthencate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspAuthencate)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspAuthencate* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspAuthencate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspAuthencate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspAuthencate)
    MergeFrom(*source);
  }
}

void CtpRspAuthencate::MergeFrom(const CtpRspAuthencate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspAuthencate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.user_product_info().size() > 0) {

    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
}

void CtpRspAuthencate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspAuthencate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspAuthencate::CopyFrom(const CtpRspAuthencate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspAuthencate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspAuthencate::IsInitialized() const {
  return true;
}

void CtpRspAuthencate::Swap(CtpRspAuthencate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspAuthencate::InternalSwap(CtpRspAuthencate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_product_info_.Swap(&other->user_product_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
}

::google::protobuf::Metadata CtpRspAuthencate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqUserLogin::InitAsDefaultInstance() {
}
class CtpReqUserLogin::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqUserLogin::kBrokerIdFieldNumber;
const int CtpReqUserLogin::kAccountFieldNumber;
const int CtpReqUserLogin::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqUserLogin::CtpReqUserLogin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqUserLogin)
}
CtpReqUserLogin::CtpReqUserLogin(const CtpReqUserLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqUserLogin)
}

void CtpReqUserLogin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqUserLogin_ctp_2eproto.base);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqUserLogin::~CtpReqUserLogin() {
  // @@protoc_insertion_point(destructor:pb.CtpReqUserLogin)
  SharedDtor();
}

void CtpReqUserLogin::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqUserLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqUserLogin& CtpReqUserLogin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqUserLogin_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqUserLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqUserLogin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqUserLogin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string broker_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqUserLogin.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqUserLogin.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqUserLogin.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqUserLogin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string broker_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqUserLogin.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqUserLogin.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqUserLogin.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqUserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqUserLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->broker_id(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqUserLogin)
}

::google::protobuf::uint8* CtpReqUserLogin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broker_id(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqUserLogin.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqUserLogin)
  return target;
}

size_t CtpReqUserLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqUserLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqUserLogin* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqUserLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqUserLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqUserLogin)
    MergeFrom(*source);
  }
}

void CtpReqUserLogin::MergeFrom(const CtpReqUserLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void CtpReqUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqUserLogin::CopyFrom(const CtpReqUserLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqUserLogin::IsInitialized() const {
  return true;
}

void CtpReqUserLogin::Swap(CtpReqUserLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqUserLogin::InternalSwap(CtpReqUserLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqUserLogin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspUserLogin::InitAsDefaultInstance() {
}
class CtpRspUserLogin::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspUserLogin::kErrorIdFieldNumber;
const int CtpRspUserLogin::kErrorMsgFieldNumber;
const int CtpRspUserLogin::kRequestIdFieldNumber;
const int CtpRspUserLogin::kIsLastFieldNumber;
const int CtpRspUserLogin::kTradingDayFieldNumber;
const int CtpRspUserLogin::kLoginTimeFieldNumber;
const int CtpRspUserLogin::kBrokerIdFieldNumber;
const int CtpRspUserLogin::kUserIdFieldNumber;
const int CtpRspUserLogin::kSystemNameFieldNumber;
const int CtpRspUserLogin::kFrontIdFieldNumber;
const int CtpRspUserLogin::kSessionIdFieldNumber;
const int CtpRspUserLogin::kMaxOrderRefFieldNumber;
const int CtpRspUserLogin::kShfeTimeFieldNumber;
const int CtpRspUserLogin::kDceTimeFieldNumber;
const int CtpRspUserLogin::kCzceTimeFieldNumber;
const int CtpRspUserLogin::kCffexTimeFieldNumber;
const int CtpRspUserLogin::kIneTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspUserLogin::CtpRspUserLogin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspUserLogin)
}
CtpRspUserLogin::CtpRspUserLogin(const CtpRspUserLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trading_day().size() > 0) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  login_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.login_time().size() > 0) {
    login_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_time_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_name().size() > 0) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  max_order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.max_order_ref().size() > 0) {
    max_order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_order_ref_);
  }
  shfe_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shfe_time().size() > 0) {
    shfe_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shfe_time_);
  }
  dce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dce_time().size() > 0) {
    dce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dce_time_);
  }
  czce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.czce_time().size() > 0) {
    czce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.czce_time_);
  }
  cffex_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cffex_time().size() > 0) {
    cffex_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cffex_time_);
  }
  ine_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ine_time().size() > 0) {
    ine_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ine_time_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspUserLogin)
}

void CtpRspUserLogin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspUserLogin_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfe_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czce_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cffex_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ine_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(session_id_));
}

CtpRspUserLogin::~CtpRspUserLogin() {
  // @@protoc_insertion_point(destructor:pb.CtpRspUserLogin)
  SharedDtor();
}

void CtpRspUserLogin::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfe_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dce_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czce_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cffex_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ine_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpRspUserLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspUserLogin& CtpRspUserLogin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspUserLogin_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspUserLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_order_ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shfe_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dce_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  czce_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cffex_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ine_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspUserLogin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspUserLogin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string trading_day = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.trading_day");
        object = msg->mutable_trading_day();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string login_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.login_time");
        object = msg->mutable_login_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string system_name = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.system_name");
        object = msg->mutable_system_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 front_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 session_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string max_order_ref = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.max_order_ref");
        object = msg->mutable_max_order_ref();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string shfe_time = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.shfe_time");
        object = msg->mutable_shfe_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string dce_time = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.dce_time");
        object = msg->mutable_dce_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string czce_time = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.czce_time");
        object = msg->mutable_czce_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cffex_time = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.cffex_time");
        object = msg->mutable_cffex_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ine_time = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspUserLogin.ine_time");
        object = msg->mutable_ine_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspUserLogin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trading_day = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.trading_day"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string login_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->login_time().data(), static_cast<int>(this->login_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.login_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string max_order_ref = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_order_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.max_order_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shfe_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shfe_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.shfe_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dce_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dce_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dce_time().data(), static_cast<int>(this->dce_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.dce_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string czce_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_czce_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->czce_time().data(), static_cast<int>(this->czce_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.czce_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cffex_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cffex_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cffex_time().data(), static_cast<int>(this->cffex_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.cffex_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ine_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ine_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ine_time().data(), static_cast<int>(this->ine_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspUserLogin.ine_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspUserLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspUserLogin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trading_day(), output);
  }

  // string login_time = 6;
  if (this->login_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_time().data(), static_cast<int>(this->login_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.login_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->login_time(), output);
  }

  // string broker_id = 7;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->broker_id(), output);
  }

  // string user_id = 8;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->user_id(), output);
  }

  // string system_name = 9;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->system_name(), output);
  }

  // int32 front_id = 10;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->front_id(), output);
  }

  // int32 session_id = 11;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->session_id(), output);
  }

  // string max_order_ref = 12;
  if (this->max_order_ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.max_order_ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->max_order_ref(), output);
  }

  // string shfe_time = 13;
  if (this->shfe_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.shfe_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->shfe_time(), output);
  }

  // string dce_time = 14;
  if (this->dce_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dce_time().data(), static_cast<int>(this->dce_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.dce_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->dce_time(), output);
  }

  // string czce_time = 15;
  if (this->czce_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->czce_time().data(), static_cast<int>(this->czce_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.czce_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->czce_time(), output);
  }

  // string cffex_time = 16;
  if (this->cffex_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cffex_time().data(), static_cast<int>(this->cffex_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.cffex_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->cffex_time(), output);
  }

  // string ine_time = 17;
  if (this->ine_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ine_time().data(), static_cast<int>(this->ine_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.ine_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->ine_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspUserLogin)
}

::google::protobuf::uint8* CtpRspUserLogin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspUserLogin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trading_day(), target);
  }

  // string login_time = 6;
  if (this->login_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->login_time().data(), static_cast<int>(this->login_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.login_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->login_time(), target);
  }

  // string broker_id = 7;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->broker_id(), target);
  }

  // string user_id = 8;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->user_id(), target);
  }

  // string system_name = 9;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.system_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->system_name(), target);
  }

  // int32 front_id = 10;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->front_id(), target);
  }

  // int32 session_id = 11;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->session_id(), target);
  }

  // string max_order_ref = 12;
  if (this->max_order_ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_order_ref().data(), static_cast<int>(this->max_order_ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.max_order_ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->max_order_ref(), target);
  }

  // string shfe_time = 13;
  if (this->shfe_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shfe_time().data(), static_cast<int>(this->shfe_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.shfe_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->shfe_time(), target);
  }

  // string dce_time = 14;
  if (this->dce_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dce_time().data(), static_cast<int>(this->dce_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.dce_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->dce_time(), target);
  }

  // string czce_time = 15;
  if (this->czce_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->czce_time().data(), static_cast<int>(this->czce_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.czce_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->czce_time(), target);
  }

  // string cffex_time = 16;
  if (this->cffex_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cffex_time().data(), static_cast<int>(this->cffex_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.cffex_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cffex_time(), target);
  }

  // string ine_time = 17;
  if (this->ine_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ine_time().data(), static_cast<int>(this->ine_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspUserLogin.ine_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->ine_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspUserLogin)
  return target;
}

size_t CtpRspUserLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspUserLogin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string trading_day = 5;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trading_day());
  }

  // string login_time = 6;
  if (this->login_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->login_time());
  }

  // string broker_id = 7;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string user_id = 8;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string system_name = 9;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  // string max_order_ref = 12;
  if (this->max_order_ref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->max_order_ref());
  }

  // string shfe_time = 13;
  if (this->shfe_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shfe_time());
  }

  // string dce_time = 14;
  if (this->dce_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dce_time());
  }

  // string czce_time = 15;
  if (this->czce_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->czce_time());
  }

  // string cffex_time = 16;
  if (this->cffex_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cffex_time());
  }

  // string ine_time = 17;
  if (this->ine_time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ine_time());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  // int32 front_id = 10;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_id());
  }

  // int32 session_id = 11;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspUserLogin* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspUserLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspUserLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspUserLogin)
    MergeFrom(*source);
  }
}

void CtpRspUserLogin::MergeFrom(const CtpRspUserLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspUserLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.trading_day().size() > 0) {

    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  if (from.login_time().size() > 0) {

    login_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.login_time_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  if (from.max_order_ref().size() > 0) {

    max_order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_order_ref_);
  }
  if (from.shfe_time().size() > 0) {

    shfe_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shfe_time_);
  }
  if (from.dce_time().size() > 0) {

    dce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dce_time_);
  }
  if (from.czce_time().size() > 0) {

    czce_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.czce_time_);
  }
  if (from.cffex_time().size() > 0) {

    cffex_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cffex_time_);
  }
  if (from.ine_time().size() > 0) {

    ine_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ine_time_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void CtpRspUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspUserLogin::CopyFrom(const CtpRspUserLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspUserLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspUserLogin::IsInitialized() const {
  return true;
}

void CtpRspUserLogin::Swap(CtpRspUserLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspUserLogin::InternalSwap(CtpRspUserLogin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  login_time_.Swap(&other->login_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  system_name_.Swap(&other->system_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  max_order_ref_.Swap(&other->max_order_ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shfe_time_.Swap(&other->shfe_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dce_time_.Swap(&other->dce_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  czce_time_.Swap(&other->czce_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cffex_time_.Swap(&other->cffex_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ine_time_.Swap(&other->ine_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
}

::google::protobuf::Metadata CtpRspUserLogin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqConnect::InitAsDefaultInstance() {
}
class CtpReqConnect::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqConnect::kAddressFieldNumber;
const int CtpReqConnect::kAccountFieldNumber;
const int CtpReqConnect::kDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqConnect::CtpReqConnect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqConnect)
}
CtpReqConnect::CtpReqConnect(const CtpReqConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.directory().size() > 0) {
    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqConnect)
}

void CtpReqConnect::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqConnect_ctp_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqConnect::~CtpReqConnect() {
  // @@protoc_insertion_point(destructor:pb.CtpReqConnect)
  SharedDtor();
}

void CtpReqConnect::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqConnect& CtpReqConnect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqConnect_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqConnect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqConnect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqConnect.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqConnect.account");
        object = msg->mutable_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string directory = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqConnect.directory");
        object = msg->mutable_directory();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqConnect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqConnect.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqConnect.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string directory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->directory().data(), static_cast<int>(this->directory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqConnect.directory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqConnect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string directory = 3;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->directory(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqConnect)
}

::google::protobuf::uint8* CtpReqConnect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string directory = 3;
  if (this->directory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->directory().data(), static_cast<int>(this->directory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqConnect.directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->directory(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqConnect)
  return target;
}

size_t CtpReqConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string directory = 3;
  if (this->directory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->directory());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqConnect* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqConnect)
    MergeFrom(*source);
  }
}

void CtpReqConnect::MergeFrom(const CtpReqConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.directory().size() > 0) {

    directory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.directory_);
  }
}

void CtpReqConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqConnect::CopyFrom(const CtpReqConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqConnect::IsInitialized() const {
  return true;
}

void CtpReqConnect::Swap(CtpReqConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqConnect::InternalSwap(CtpReqConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  directory_.Swap(&other->directory_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqConnect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpOnFrontConnected::InitAsDefaultInstance() {
}
class CtpOnFrontConnected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpOnFrontConnected::CtpOnFrontConnected()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpOnFrontConnected)
}
CtpOnFrontConnected::CtpOnFrontConnected(const CtpOnFrontConnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CtpOnFrontConnected)
}

void CtpOnFrontConnected::SharedCtor() {
}

CtpOnFrontConnected::~CtpOnFrontConnected() {
  // @@protoc_insertion_point(destructor:pb.CtpOnFrontConnected)
  SharedDtor();
}

void CtpOnFrontConnected::SharedDtor() {
}

void CtpOnFrontConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpOnFrontConnected& CtpOnFrontConnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpOnFrontConnected_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpOnFrontConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpOnFrontConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpOnFrontConnected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpOnFrontConnected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpOnFrontConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpOnFrontConnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpOnFrontConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpOnFrontConnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpOnFrontConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpOnFrontConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpOnFrontConnected)
}

::google::protobuf::uint8* CtpOnFrontConnected::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpOnFrontConnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpOnFrontConnected)
  return target;
}

size_t CtpOnFrontConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpOnFrontConnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpOnFrontConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpOnFrontConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpOnFrontConnected* source =
      ::google::protobuf::DynamicCastToGenerated<CtpOnFrontConnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpOnFrontConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpOnFrontConnected)
    MergeFrom(*source);
  }
}

void CtpOnFrontConnected::MergeFrom(const CtpOnFrontConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpOnFrontConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CtpOnFrontConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpOnFrontConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpOnFrontConnected::CopyFrom(const CtpOnFrontConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpOnFrontConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpOnFrontConnected::IsInitialized() const {
  return true;
}

void CtpOnFrontConnected::Swap(CtpOnFrontConnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpOnFrontConnected::InternalSwap(CtpOnFrontConnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CtpOnFrontConnected::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpOnFrontDisconnected::InitAsDefaultInstance() {
}
class CtpOnFrontDisconnected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpOnFrontDisconnected::CtpOnFrontDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpOnFrontDisconnected)
}
CtpOnFrontDisconnected::CtpOnFrontDisconnected(const CtpOnFrontDisconnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CtpOnFrontDisconnected)
}

void CtpOnFrontDisconnected::SharedCtor() {
}

CtpOnFrontDisconnected::~CtpOnFrontDisconnected() {
  // @@protoc_insertion_point(destructor:pb.CtpOnFrontDisconnected)
  SharedDtor();
}

void CtpOnFrontDisconnected::SharedDtor() {
}

void CtpOnFrontDisconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpOnFrontDisconnected& CtpOnFrontDisconnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpOnFrontDisconnected_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpOnFrontDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpOnFrontDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpOnFrontDisconnected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpOnFrontDisconnected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpOnFrontDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpOnFrontDisconnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpOnFrontDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpOnFrontDisconnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpOnFrontDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpOnFrontDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpOnFrontDisconnected)
}

::google::protobuf::uint8* CtpOnFrontDisconnected::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpOnFrontDisconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpOnFrontDisconnected)
  return target;
}

size_t CtpOnFrontDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpOnFrontDisconnected)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpOnFrontDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpOnFrontDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpOnFrontDisconnected* source =
      ::google::protobuf::DynamicCastToGenerated<CtpOnFrontDisconnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpOnFrontDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpOnFrontDisconnected)
    MergeFrom(*source);
  }
}

void CtpOnFrontDisconnected::MergeFrom(const CtpOnFrontDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpOnFrontDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CtpOnFrontDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpOnFrontDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpOnFrontDisconnected::CopyFrom(const CtpOnFrontDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpOnFrontDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpOnFrontDisconnected::IsInitialized() const {
  return true;
}

void CtpOnFrontDisconnected::Swap(CtpOnFrontDisconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpOnFrontDisconnected::InternalSwap(CtpOnFrontDisconnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CtpOnFrontDisconnected::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqSettlementInfoConfirm::InitAsDefaultInstance() {
}
class CtpReqSettlementInfoConfirm::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqSettlementInfoConfirm::kBrokerIdFieldNumber;
const int CtpReqSettlementInfoConfirm::kInvestorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqSettlementInfoConfirm::CtpReqSettlementInfoConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqSettlementInfoConfirm)
}
CtpReqSettlementInfoConfirm::CtpReqSettlementInfoConfirm(const CtpReqSettlementInfoConfirm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_id().size() > 0) {
    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqSettlementInfoConfirm)
}

void CtpReqSettlementInfoConfirm::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqSettlementInfoConfirm_ctp_2eproto.base);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqSettlementInfoConfirm::~CtpReqSettlementInfoConfirm() {
  // @@protoc_insertion_point(destructor:pb.CtpReqSettlementInfoConfirm)
  SharedDtor();
}

void CtpReqSettlementInfoConfirm::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqSettlementInfoConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqSettlementInfoConfirm& CtpReqSettlementInfoConfirm::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqSettlementInfoConfirm_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqSettlementInfoConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqSettlementInfoConfirm::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqSettlementInfoConfirm*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string broker_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqSettlementInfoConfirm.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string investor_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqSettlementInfoConfirm.investor_id");
        object = msg->mutable_investor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqSettlementInfoConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqSettlementInfoConfirm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string broker_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqSettlementInfoConfirm.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_id().data(), static_cast<int>(this->investor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqSettlementInfoConfirm.investor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqSettlementInfoConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqSettlementInfoConfirm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqSettlementInfoConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqSettlementInfoConfirm.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->broker_id(), output);
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqSettlementInfoConfirm.investor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqSettlementInfoConfirm)
}

::google::protobuf::uint8* CtpReqSettlementInfoConfirm::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqSettlementInfoConfirm.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broker_id(), target);
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqSettlementInfoConfirm.investor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqSettlementInfoConfirm)
  return target;
}

size_t CtpReqSettlementInfoConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqSettlementInfoConfirm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqSettlementInfoConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqSettlementInfoConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqSettlementInfoConfirm* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqSettlementInfoConfirm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqSettlementInfoConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqSettlementInfoConfirm)
    MergeFrom(*source);
  }
}

void CtpReqSettlementInfoConfirm::MergeFrom(const CtpReqSettlementInfoConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqSettlementInfoConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.investor_id().size() > 0) {

    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
}

void CtpReqSettlementInfoConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqSettlementInfoConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqSettlementInfoConfirm::CopyFrom(const CtpReqSettlementInfoConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqSettlementInfoConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqSettlementInfoConfirm::IsInitialized() const {
  return true;
}

void CtpReqSettlementInfoConfirm::Swap(CtpReqSettlementInfoConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqSettlementInfoConfirm::InternalSwap(CtpReqSettlementInfoConfirm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_id_.Swap(&other->investor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqSettlementInfoConfirm::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpOnRspSettlementInfoConfirm::InitAsDefaultInstance() {
}
class CtpOnRspSettlementInfoConfirm::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpOnRspSettlementInfoConfirm::kErrorIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kErrorMsgFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kRequestIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kIsLastFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kBrokerIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kInvestorIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kConfirmDateFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kConfirmTimeFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kSettlementIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kAccountIdFieldNumber;
const int CtpOnRspSettlementInfoConfirm::kCurrencyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpOnRspSettlementInfoConfirm::CtpOnRspSettlementInfoConfirm()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpOnRspSettlementInfoConfirm)
}
CtpOnRspSettlementInfoConfirm::CtpOnRspSettlementInfoConfirm(const CtpOnRspSettlementInfoConfirm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_id().size() > 0) {
    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.confirm_date().size() > 0) {
    confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
  }
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.confirm_time().size() > 0) {
    confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_id().size() > 0) {
    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&settlement_id_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(settlement_id_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpOnRspSettlementInfoConfirm)
}

void CtpOnRspSettlementInfoConfirm::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpOnRspSettlementInfoConfirm_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settlement_id_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(settlement_id_));
}

CtpOnRspSettlementInfoConfirm::~CtpOnRspSettlementInfoConfirm() {
  // @@protoc_insertion_point(destructor:pb.CtpOnRspSettlementInfoConfirm)
  SharedDtor();
}

void CtpOnRspSettlementInfoConfirm::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpOnRspSettlementInfoConfirm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpOnRspSettlementInfoConfirm& CtpOnRspSettlementInfoConfirm::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpOnRspSettlementInfoConfirm_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpOnRspSettlementInfoConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpOnRspSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confirm_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settlement_id_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(settlement_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpOnRspSettlementInfoConfirm::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpOnRspSettlementInfoConfirm*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string broker_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string investor_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.investor_id");
        object = msg->mutable_investor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string confirm_date = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.confirm_date");
        object = msg->mutable_confirm_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string confirm_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.confirm_time");
        object = msg->mutable_confirm_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 settlement_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_settlement_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string account_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currency_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpOnRspSettlementInfoConfirm.currency_id");
        object = msg->mutable_currency_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpOnRspSettlementInfoConfirm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpOnRspSettlementInfoConfirm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_id().data(), static_cast<int>(this->investor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.investor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string confirm_date = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.confirm_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string confirm_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confirm_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.confirm_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_id().data(), static_cast<int>(this->currency_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpOnRspSettlementInfoConfirm.currency_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpOnRspSettlementInfoConfirm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpOnRspSettlementInfoConfirm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpOnRspSettlementInfoConfirm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpOnRspSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broker_id(), output);
  }

  // string investor_id = 6;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.investor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->investor_id(), output);
  }

  // string confirm_date = 7;
  if (this->confirm_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.confirm_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->confirm_date(), output);
  }

  // string confirm_time = 8;
  if (this->confirm_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.confirm_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->confirm_time(), output);
  }

  // int32 settlement_id = 9;
  if (this->settlement_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->settlement_id(), output);
  }

  // string account_id = 10;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->account_id(), output);
  }

  // string currency_id = 11;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.currency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->currency_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpOnRspSettlementInfoConfirm)
}

::google::protobuf::uint8* CtpOnRspSettlementInfoConfirm::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpOnRspSettlementInfoConfirm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broker_id(), target);
  }

  // string investor_id = 6;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.investor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->investor_id(), target);
  }

  // string confirm_date = 7;
  if (this->confirm_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirm_date().data(), static_cast<int>(this->confirm_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.confirm_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->confirm_date(), target);
  }

  // string confirm_time = 8;
  if (this->confirm_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->confirm_time().data(), static_cast<int>(this->confirm_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.confirm_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->confirm_time(), target);
  }

  // int32 settlement_id = 9;
  if (this->settlement_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->settlement_id(), target);
  }

  // string account_id = 10;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->account_id(), target);
  }

  // string currency_id = 11;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpOnRspSettlementInfoConfirm.currency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->currency_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpOnRspSettlementInfoConfirm)
  return target;
}

size_t CtpOnRspSettlementInfoConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpOnRspSettlementInfoConfirm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string investor_id = 6;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_id());
  }

  // string confirm_date = 7;
  if (this->confirm_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->confirm_date());
  }

  // string confirm_time = 8;
  if (this->confirm_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->confirm_time());
  }

  // string account_id = 10;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string currency_id = 11;
  if (this->currency_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_id());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  // int32 settlement_id = 9;
  if (this->settlement_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpOnRspSettlementInfoConfirm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpOnRspSettlementInfoConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpOnRspSettlementInfoConfirm* source =
      ::google::protobuf::DynamicCastToGenerated<CtpOnRspSettlementInfoConfirm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpOnRspSettlementInfoConfirm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpOnRspSettlementInfoConfirm)
    MergeFrom(*source);
  }
}

void CtpOnRspSettlementInfoConfirm::MergeFrom(const CtpOnRspSettlementInfoConfirm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpOnRspSettlementInfoConfirm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.investor_id().size() > 0) {

    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  if (from.confirm_date().size() > 0) {

    confirm_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_date_);
  }
  if (from.confirm_time().size() > 0) {

    confirm_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_time_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.currency_id().size() > 0) {

    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
  if (from.settlement_id() != 0) {
    set_settlement_id(from.settlement_id());
  }
}

void CtpOnRspSettlementInfoConfirm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpOnRspSettlementInfoConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpOnRspSettlementInfoConfirm::CopyFrom(const CtpOnRspSettlementInfoConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpOnRspSettlementInfoConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpOnRspSettlementInfoConfirm::IsInitialized() const {
  return true;
}

void CtpOnRspSettlementInfoConfirm::Swap(CtpOnRspSettlementInfoConfirm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpOnRspSettlementInfoConfirm::InternalSwap(CtpOnRspSettlementInfoConfirm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_id_.Swap(&other->investor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_date_.Swap(&other->confirm_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confirm_time_.Swap(&other->confirm_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_id_.Swap(&other->currency_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
  swap(settlement_id_, other->settlement_id_);
}

::google::protobuf::Metadata CtpOnRspSettlementInfoConfirm::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqQryInvestor::InitAsDefaultInstance() {
}
class CtpReqQryInvestor::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqQryInvestor::CtpReqQryInvestor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqQryInvestor)
}
CtpReqQryInvestor::CtpReqQryInvestor(const CtpReqQryInvestor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqQryInvestor)
}

void CtpReqQryInvestor::SharedCtor() {
}

CtpReqQryInvestor::~CtpReqQryInvestor() {
  // @@protoc_insertion_point(destructor:pb.CtpReqQryInvestor)
  SharedDtor();
}

void CtpReqQryInvestor::SharedDtor() {
}

void CtpReqQryInvestor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqQryInvestor& CtpReqQryInvestor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqQryInvestor_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqQryInvestor::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqQryInvestor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqQryInvestor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqQryInvestor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqQryInvestor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqQryInvestor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqQryInvestor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqQryInvestor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqQryInvestor)
}

::google::protobuf::uint8* CtpReqQryInvestor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqQryInvestor)
  return target;
}

size_t CtpReqQryInvestor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqQryInvestor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqQryInvestor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqQryInvestor)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqQryInvestor* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqQryInvestor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqQryInvestor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqQryInvestor)
    MergeFrom(*source);
  }
}

void CtpReqQryInvestor::MergeFrom(const CtpReqQryInvestor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqQryInvestor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CtpReqQryInvestor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqQryInvestor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqQryInvestor::CopyFrom(const CtpReqQryInvestor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqQryInvestor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqQryInvestor::IsInitialized() const {
  return true;
}

void CtpReqQryInvestor::Swap(CtpReqQryInvestor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqQryInvestor::InternalSwap(CtpReqQryInvestor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CtpReqQryInvestor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspQryInvestor::InitAsDefaultInstance() {
}
class CtpRspQryInvestor::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspQryInvestor::kErrorIdFieldNumber;
const int CtpRspQryInvestor::kErrorMsgFieldNumber;
const int CtpRspQryInvestor::kRequestIdFieldNumber;
const int CtpRspQryInvestor::kIsLastFieldNumber;
const int CtpRspQryInvestor::kInvestorIdFieldNumber;
const int CtpRspQryInvestor::kBrokerIdFieldNumber;
const int CtpRspQryInvestor::kInvestorGroupIdFieldNumber;
const int CtpRspQryInvestor::kInvestorNameFieldNumber;
const int CtpRspQryInvestor::kIdentifiedCardTypeFieldNumber;
const int CtpRspQryInvestor::kIdentifiedCardNoFieldNumber;
const int CtpRspQryInvestor::kIsActiveFieldNumber;
const int CtpRspQryInvestor::kTelphoneFieldNumber;
const int CtpRspQryInvestor::kAddressFieldNumber;
const int CtpRspQryInvestor::kOpenDateFieldNumber;
const int CtpRspQryInvestor::kMobileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspQryInvestor::CtpRspQryInvestor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspQryInvestor)
}
CtpRspQryInvestor::CtpRspQryInvestor(const CtpRspQryInvestor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_id().size() > 0) {
    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  investor_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_group_id().size() > 0) {
    investor_group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_group_id_);
  }
  investor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_name().size() > 0) {
    investor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_name_);
  }
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identified_card_no().size() > 0) {
    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  telphone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.telphone().size() > 0) {
    telphone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.telphone_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  open_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.open_date().size() > 0) {
    open_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_date_);
  }
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mobile().size() > 0) {
    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&identified_card_type_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(identified_card_type_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspQryInvestor)
}

void CtpRspQryInvestor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspQryInvestor_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telphone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identified_card_type_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(identified_card_type_));
}

CtpRspQryInvestor::~CtpRspQryInvestor() {
  // @@protoc_insertion_point(destructor:pb.CtpRspQryInvestor)
  SharedDtor();
}

void CtpRspQryInvestor::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telphone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpRspQryInvestor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspQryInvestor& CtpRspQryInvestor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspQryInvestor_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspQryInvestor::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  telphone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mobile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identified_card_type_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(identified_card_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspQryInvestor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspQryInvestor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string investor_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.investor_id");
        object = msg->mutable_investor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string investor_group_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.investor_group_id");
        object = msg->mutable_investor_group_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string investor_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.investor_name");
        object = msg->mutable_investor_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 identified_card_type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_identified_card_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string identified_card_no = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.identified_card_no");
        object = msg->mutable_identified_card_no();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool is_active = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_is_active(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string telphone = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.telphone");
        object = msg->mutable_telphone();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string address = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string open_date = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.open_date");
        object = msg->mutable_open_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string mobile = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryInvestor.mobile");
        object = msg->mutable_mobile();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspQryInvestor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspQryInvestor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_id().data(), static_cast<int>(this->investor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.investor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_group_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_group_id().data(), static_cast<int>(this->investor_group_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.investor_group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_name().data(), static_cast<int>(this->investor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.investor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 identified_card_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identified_card_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identified_card_no = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identified_card_no()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.identified_card_no"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_active = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string telphone = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telphone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->telphone().data(), static_cast<int>(this->telphone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.telphone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string open_date = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->open_date().data(), static_cast<int>(this->open_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.open_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mobile = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mobile().data(), static_cast<int>(this->mobile().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryInvestor.mobile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspQryInvestor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspQryInvestor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspQryInvestor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string investor_id = 5;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->investor_id(), output);
  }

  // string broker_id = 6;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->broker_id(), output);
  }

  // string investor_group_id = 7;
  if (this->investor_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_group_id().data(), static_cast<int>(this->investor_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->investor_group_id(), output);
  }

  // string investor_name = 8;
  if (this->investor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_name().data(), static_cast<int>(this->investor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->investor_name(), output);
  }

  // int32 identified_card_type = 9;
  if (this->identified_card_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->identified_card_type(), output);
  }

  // string identified_card_no = 10;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.identified_card_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->identified_card_no(), output);
  }

  // bool is_active = 11;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_active(), output);
  }

  // string telphone = 12;
  if (this->telphone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->telphone().data(), static_cast<int>(this->telphone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.telphone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->telphone(), output);
  }

  // string address = 13;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->address(), output);
  }

  // string open_date = 14;
  if (this->open_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_date().data(), static_cast<int>(this->open_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.open_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->open_date(), output);
  }

  // string mobile = 15;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), static_cast<int>(this->mobile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.mobile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->mobile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspQryInvestor)
}

::google::protobuf::uint8* CtpRspQryInvestor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspQryInvestor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string investor_id = 5;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->investor_id(), target);
  }

  // string broker_id = 6;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->broker_id(), target);
  }

  // string investor_group_id = 7;
  if (this->investor_group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_group_id().data(), static_cast<int>(this->investor_group_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->investor_group_id(), target);
  }

  // string investor_name = 8;
  if (this->investor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_name().data(), static_cast<int>(this->investor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.investor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->investor_name(), target);
  }

  // int32 identified_card_type = 9;
  if (this->identified_card_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->identified_card_type(), target);
  }

  // string identified_card_no = 10;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.identified_card_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->identified_card_no(), target);
  }

  // bool is_active = 11;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_active(), target);
  }

  // string telphone = 12;
  if (this->telphone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->telphone().data(), static_cast<int>(this->telphone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.telphone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->telphone(), target);
  }

  // string address = 13;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->address(), target);
  }

  // string open_date = 14;
  if (this->open_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_date().data(), static_cast<int>(this->open_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.open_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->open_date(), target);
  }

  // string mobile = 15;
  if (this->mobile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mobile().data(), static_cast<int>(this->mobile().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryInvestor.mobile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->mobile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspQryInvestor)
  return target;
}

size_t CtpRspQryInvestor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspQryInvestor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string investor_id = 5;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_id());
  }

  // string broker_id = 6;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string investor_group_id = 7;
  if (this->investor_group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_group_id());
  }

  // string investor_name = 8;
  if (this->investor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_name());
  }

  // string identified_card_no = 10;
  if (this->identified_card_no().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identified_card_no());
  }

  // string telphone = 12;
  if (this->telphone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->telphone());
  }

  // string address = 13;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string open_date = 14;
  if (this->open_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->open_date());
  }

  // string mobile = 15;
  if (this->mobile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mobile());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  // bool is_active = 11;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 identified_card_type = 9;
  if (this->identified_card_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->identified_card_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspQryInvestor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspQryInvestor)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspQryInvestor* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspQryInvestor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspQryInvestor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspQryInvestor)
    MergeFrom(*source);
  }
}

void CtpRspQryInvestor::MergeFrom(const CtpRspQryInvestor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspQryInvestor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.investor_id().size() > 0) {

    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.investor_group_id().size() > 0) {

    investor_group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_group_id_);
  }
  if (from.investor_name().size() > 0) {

    investor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_name_);
  }
  if (from.identified_card_no().size() > 0) {

    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  if (from.telphone().size() > 0) {

    telphone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.telphone_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.open_date().size() > 0) {

    open_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_date_);
  }
  if (from.mobile().size() > 0) {

    mobile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mobile_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.identified_card_type() != 0) {
    set_identified_card_type(from.identified_card_type());
  }
}

void CtpRspQryInvestor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspQryInvestor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspQryInvestor::CopyFrom(const CtpRspQryInvestor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspQryInvestor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspQryInvestor::IsInitialized() const {
  return true;
}

void CtpRspQryInvestor::Swap(CtpRspQryInvestor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspQryInvestor::InternalSwap(CtpRspQryInvestor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_id_.Swap(&other->investor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_group_id_.Swap(&other->investor_group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_name_.Swap(&other->investor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identified_card_no_.Swap(&other->identified_card_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  telphone_.Swap(&other->telphone_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  open_date_.Swap(&other->open_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mobile_.Swap(&other->mobile_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
  swap(is_active_, other->is_active_);
  swap(identified_card_type_, other->identified_card_type_);
}

::google::protobuf::Metadata CtpRspQryInvestor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqQryTransferBank::InitAsDefaultInstance() {
}
class CtpReqQryTransferBank::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqQryTransferBank::kBrokerIdFieldNumber;
const int CtpReqQryTransferBank::kInvestorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqQryTransferBank::CtpReqQryTransferBank()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqQryTransferBank)
}
CtpReqQryTransferBank::CtpReqQryTransferBank(const CtpReqQryTransferBank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.investor_id().size() > 0) {
    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqQryTransferBank)
}

void CtpReqQryTransferBank::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqQryTransferBank_ctp_2eproto.base);
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CtpReqQryTransferBank::~CtpReqQryTransferBank() {
  // @@protoc_insertion_point(destructor:pb.CtpReqQryTransferBank)
  SharedDtor();
}

void CtpReqQryTransferBank::SharedDtor() {
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqQryTransferBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqQryTransferBank& CtpReqQryTransferBank::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqQryTransferBank_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqQryTransferBank::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  investor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqQryTransferBank::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqQryTransferBank*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string broker_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryTransferBank.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string investor_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqQryTransferBank.investor_id");
        object = msg->mutable_investor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqQryTransferBank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqQryTransferBank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string broker_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryTransferBank.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string investor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->investor_id().data(), static_cast<int>(this->investor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqQryTransferBank.investor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqQryTransferBank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqQryTransferBank)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqQryTransferBank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryTransferBank.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->broker_id(), output);
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryTransferBank.investor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->investor_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqQryTransferBank)
}

::google::protobuf::uint8* CtpReqQryTransferBank::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryTransferBank.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->broker_id(), target);
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->investor_id().data(), static_cast<int>(this->investor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqQryTransferBank.investor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investor_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqQryTransferBank)
  return target;
}

size_t CtpReqQryTransferBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqQryTransferBank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string broker_id = 1;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string investor_id = 2;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->investor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqQryTransferBank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqQryTransferBank)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqQryTransferBank* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqQryTransferBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqQryTransferBank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqQryTransferBank)
    MergeFrom(*source);
  }
}

void CtpReqQryTransferBank::MergeFrom(const CtpReqQryTransferBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqQryTransferBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.investor_id().size() > 0) {

    investor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.investor_id_);
  }
}

void CtpReqQryTransferBank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqQryTransferBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqQryTransferBank::CopyFrom(const CtpReqQryTransferBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqQryTransferBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqQryTransferBank::IsInitialized() const {
  return true;
}

void CtpReqQryTransferBank::Swap(CtpReqQryTransferBank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqQryTransferBank::InternalSwap(CtpReqQryTransferBank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  investor_id_.Swap(&other->investor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CtpReqQryTransferBank::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspQryTransferBank::InitAsDefaultInstance() {
}
class CtpRspQryTransferBank::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspQryTransferBank::kErrorIdFieldNumber;
const int CtpRspQryTransferBank::kErrorMsgFieldNumber;
const int CtpRspQryTransferBank::kRequestIdFieldNumber;
const int CtpRspQryTransferBank::kIsLastFieldNumber;
const int CtpRspQryTransferBank::kBrokerIdFieldNumber;
const int CtpRspQryTransferBank::kBankIdFieldNumber;
const int CtpRspQryTransferBank::kBankBranchIdFieldNumber;
const int CtpRspQryTransferBank::kBankNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspQryTransferBank::CtpRspQryTransferBank()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspQryTransferBank)
}
CtpRspQryTransferBank::CtpRspQryTransferBank(const CtpRspQryTransferBank& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_id().size() > 0) {
    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_branch_id().size() > 0) {
    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_name().size() > 0) {
    bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspQryTransferBank)
}

void CtpRspQryTransferBank::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspQryTransferBank_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
}

CtpRspQryTransferBank::~CtpRspQryTransferBank() {
  // @@protoc_insertion_point(destructor:pb.CtpRspQryTransferBank)
  SharedDtor();
}

void CtpRspQryTransferBank::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpRspQryTransferBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspQryTransferBank& CtpRspQryTransferBank::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspQryTransferBank_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspQryTransferBank::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspQryTransferBank::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspQryTransferBank*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryTransferBank.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string broker_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryTransferBank.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryTransferBank.bank_id");
        object = msg->mutable_bank_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_branch_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryTransferBank.bank_branch_id");
        object = msg->mutable_bank_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspQryTransferBank.bank_name");
        object = msg->mutable_bank_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspQryTransferBank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspQryTransferBank)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryTransferBank.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryTransferBank.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_id().data(), static_cast<int>(this->bank_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryTransferBank.bank_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_branch_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryTransferBank.bank_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_name().data(), static_cast<int>(this->bank_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspQryTransferBank.bank_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspQryTransferBank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspQryTransferBank)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspQryTransferBank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broker_id(), output);
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bank_id(), output);
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bank_branch_id(), output);
  }

  // string bank_name = 8;
  if (this->bank_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bank_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspQryTransferBank)
}

::google::protobuf::uint8* CtpRspQryTransferBank::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspQryTransferBank)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broker_id(), target);
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bank_id(), target);
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bank_branch_id(), target);
  }

  // string bank_name = 8;
  if (this->bank_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_name().data(), static_cast<int>(this->bank_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspQryTransferBank.bank_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bank_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspQryTransferBank)
  return target;
}

size_t CtpRspQryTransferBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspQryTransferBank)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // string broker_id = 5;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string bank_id = 6;
  if (this->bank_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_id());
  }

  // string bank_branch_id = 7;
  if (this->bank_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_branch_id());
  }

  // string bank_name = 8;
  if (this->bank_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_name());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspQryTransferBank::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspQryTransferBank)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspQryTransferBank* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspQryTransferBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspQryTransferBank)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspQryTransferBank)
    MergeFrom(*source);
  }
}

void CtpRspQryTransferBank::MergeFrom(const CtpRspQryTransferBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspQryTransferBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.bank_id().size() > 0) {

    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  if (from.bank_branch_id().size() > 0) {

    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  if (from.bank_name().size() > 0) {

    bank_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_name_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
}

void CtpRspQryTransferBank::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspQryTransferBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspQryTransferBank::CopyFrom(const CtpRspQryTransferBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspQryTransferBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspQryTransferBank::IsInitialized() const {
  return true;
}

void CtpRspQryTransferBank::Swap(CtpRspQryTransferBank* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspQryTransferBank::InternalSwap(CtpRspQryTransferBank* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_id_.Swap(&other->bank_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_branch_id_.Swap(&other->bank_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_name_.Swap(&other->bank_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
}

::google::protobuf::Metadata CtpRspQryTransferBank::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpReqTransfer::InitAsDefaultInstance() {
}
class CtpReqTransfer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpReqTransfer::kTradeCodeFieldNumber;
const int CtpReqTransfer::kBankIdFieldNumber;
const int CtpReqTransfer::kBankBranchIdFieldNumber;
const int CtpReqTransfer::kBrokerIdFieldNumber;
const int CtpReqTransfer::kBrokerBranchIdFieldNumber;
const int CtpReqTransfer::kTradeDateFieldNumber;
const int CtpReqTransfer::kTradeTimeFieldNumber;
const int CtpReqTransfer::kBankSerialFieldNumber;
const int CtpReqTransfer::kTradingDayFieldNumber;
const int CtpReqTransfer::kPlateSeriealFieldNumber;
const int CtpReqTransfer::kLastFragmentFieldNumber;
const int CtpReqTransfer::kSessionIdFieldNumber;
const int CtpReqTransfer::kCustomerNameFieldNumber;
const int CtpReqTransfer::kIdCardTypeFieldNumber;
const int CtpReqTransfer::kIdentifiedCardNoFieldNumber;
const int CtpReqTransfer::kCustTypeFieldNumber;
const int CtpReqTransfer::kBankAccountFieldNumber;
const int CtpReqTransfer::kBankPasswordFieldNumber;
const int CtpReqTransfer::kAccountIdFieldNumber;
const int CtpReqTransfer::kPasswordFieldNumber;
const int CtpReqTransfer::kInstallIdFieldNumber;
const int CtpReqTransfer::kFutureSerialFieldNumber;
const int CtpReqTransfer::kUserIdFieldNumber;
const int CtpReqTransfer::kVerifyCertNoFlagFieldNumber;
const int CtpReqTransfer::kCurrencyIdFieldNumber;
const int CtpReqTransfer::kTradeAmountFieldNumber;
const int CtpReqTransfer::kFutureFetchAmountFieldNumber;
const int CtpReqTransfer::kFeePayFlagFieldNumber;
const int CtpReqTransfer::kCustFeeFieldNumber;
const int CtpReqTransfer::kBrokerFeeFieldNumber;
const int CtpReqTransfer::kMessageFieldNumber;
const int CtpReqTransfer::kDigestFieldNumber;
const int CtpReqTransfer::kBankAccTypeFieldNumber;
const int CtpReqTransfer::kDeviceIdFieldNumber;
const int CtpReqTransfer::kBankSecuAccFieldNumber;
const int CtpReqTransfer::kBankPwdFlagFieldNumber;
const int CtpReqTransfer::kSecuPwdFlagFieldNumber;
const int CtpReqTransfer::kOperNoFieldNumber;
const int CtpReqTransfer::kRequestIdFieldNumber;
const int CtpReqTransfer::kTidFieldNumber;
const int CtpReqTransfer::kTransferStatusFieldNumber;
const int CtpReqTransfer::kLongCustomerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpReqTransfer::CtpReqTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpReqTransfer)
}
CtpReqTransfer::CtpReqTransfer(const CtpReqTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_code().size() > 0) {
    trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
  }
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_id().size() > 0) {
    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_branch_id().size() > 0) {
    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_id().size() > 0) {
    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  broker_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.broker_branch_id().size() > 0) {
    broker_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_branch_id_);
  }
  trade_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_date().size() > 0) {
    trade_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_date_);
  }
  trade_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_time().size() > 0) {
    trade_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_time_);
  }
  bank_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_serial().size() > 0) {
    bank_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_serial_);
  }
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trading_day().size() > 0) {
    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  last_fragment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.last_fragment().size() > 0) {
    last_fragment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_fragment_);
  }
  customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.customer_name().size() > 0) {
    customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_name_);
  }
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.identified_card_no().size() > 0) {
    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  cust_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cust_type().size() > 0) {
    cust_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cust_type_);
  }
  bank_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_account().size() > 0) {
    bank_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_account_);
  }
  bank_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_password().size() > 0) {
    bank_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_password_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  verify_cert_no_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.verify_cert_no_flag().size() > 0) {
    verify_cert_no_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_cert_no_flag_);
  }
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.currency_id().size() > 0) {
    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.digest().size() > 0) {
    digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_id().size() > 0) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  bank_secu_acc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_secu_acc().size() > 0) {
    bank_secu_acc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_secu_acc_);
  }
  bank_pwd_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bank_pwd_flag().size() > 0) {
    bank_pwd_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_pwd_flag_);
  }
  secu_pwd_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secu_pwd_flag().size() > 0) {
    secu_pwd_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secu_pwd_flag_);
  }
  oper_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.oper_no().size() > 0) {
    oper_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oper_no_);
  }
  transfer_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transfer_status().size() > 0) {
    transfer_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_status_);
  }
  long_customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.long_customer_name().size() > 0) {
    long_customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_customer_name_);
  }
  ::memcpy(&plate_serieal_, &from.plate_serieal_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&plate_serieal_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpReqTransfer)
}

void CtpReqTransfer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpReqTransfer_ctp_2eproto.base);
  trade_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_fragment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cust_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_cert_no_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_secu_acc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_pwd_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secu_pwd_flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oper_no_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plate_serieal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&plate_serieal_)) + sizeof(tid_));
}

CtpReqTransfer::~CtpReqTransfer() {
  // @@protoc_insertion_point(destructor:pb.CtpReqTransfer)
  SharedDtor();
}

void CtpReqTransfer::SharedDtor() {
  trade_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_fragment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cust_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_cert_no_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_secu_acc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_pwd_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secu_pwd_flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oper_no_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CtpReqTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpReqTransfer& CtpReqTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpReqTransfer_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpReqTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpReqTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trade_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broker_branch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trading_day_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_fragment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  customer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identified_card_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cust_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verify_cert_no_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_secu_acc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bank_pwd_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secu_pwd_flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oper_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transfer_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  long_customer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plate_serieal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&plate_serieal_)) + sizeof(tid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpReqTransfer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpReqTransfer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string trade_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.trade_code");
        object = msg->mutable_trade_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_id");
        object = msg->mutable_bank_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_branch_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_branch_id");
        object = msg->mutable_bank_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.broker_id");
        object = msg->mutable_broker_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string broker_branch_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.broker_branch_id");
        object = msg->mutable_broker_branch_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trade_date = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.trade_date");
        object = msg->mutable_trade_date();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trade_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.trade_time");
        object = msg->mutable_trade_time();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_serial = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_serial");
        object = msg->mutable_bank_serial();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trading_day = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.trading_day");
        object = msg->mutable_trading_day();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 plate_serieal = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_plate_serieal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string last_fragment = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.last_fragment");
        object = msg->mutable_last_fragment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 session_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string customer_name = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.customer_name");
        object = msg->mutable_customer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 id_card_type = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_id_card_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string identified_card_no = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.identified_card_no");
        object = msg->mutable_identified_card_no();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cust_type = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.cust_type");
        object = msg->mutable_cust_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_account = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_account");
        object = msg->mutable_bank_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_password = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_password");
        object = msg->mutable_bank_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string password = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.password");
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 install_id = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_install_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 future_serial = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_future_serial(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_id = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.user_id");
        object = msg->mutable_user_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string verify_cert_no_flag = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.verify_cert_no_flag");
        object = msg->mutable_verify_cert_no_flag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string currency_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 202) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.currency_id");
        object = msg->mutable_currency_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double trade_amount = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_trade_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double future_fetch_amount = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 217) goto handle_unusual;
        msg->set_future_fetch_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 fee_pay_flag = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_fee_pay_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double cust_fee = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 233) goto handle_unusual;
        msg->set_cust_fee(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double broker_fee = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_broker_fee(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string message = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 250) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string digest = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.digest");
        object = msg->mutable_digest();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 bank_acc_type = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bank_acc_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string device_id = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.device_id");
        object = msg->mutable_device_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_secu_acc = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_secu_acc");
        object = msg->mutable_bank_secu_acc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string bank_pwd_flag = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.bank_pwd_flag");
        object = msg->mutable_bank_pwd_flag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string secu_pwd_flag = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.secu_pwd_flag");
        object = msg->mutable_secu_pwd_flag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string oper_no = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.oper_no");
        object = msg->mutable_oper_no();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 tid = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_tid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string transfer_status = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.transfer_status");
        object = msg->mutable_transfer_status();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string long_customer_name = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpReqTransfer.long_customer_name");
        object = msg->mutable_long_customer_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpReqTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpReqTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string trade_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_code().data(), static_cast<int>(this->trade_code().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.trade_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_id().data(), static_cast<int>(this->bank_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_branch_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_id().data(), static_cast<int>(this->broker_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.broker_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string broker_branch_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_broker_branch_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.broker_branch_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_date().data(), static_cast<int>(this->trade_date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.trade_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_time().data(), static_cast<int>(this->trade_time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.trade_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_serial()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_serial().data(), static_cast<int>(this->bank_serial().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_serial"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trading_day = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_day()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trading_day().data(), static_cast<int>(this->trading_day().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.trading_day"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 plate_serieal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plate_serieal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_fragment = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_fragment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_fragment().data(), static_cast<int>(this->last_fragment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.last_fragment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customer_name = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->customer_name().data(), static_cast<int>(this->customer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.customer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id_card_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_card_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string identified_card_no = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identified_card_no()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.identified_card_no"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cust_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cust_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cust_type().data(), static_cast<int>(this->cust_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.cust_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_account = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_account().data(), static_cast<int>(this->bank_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_password = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_password().data(), static_cast<int>(this->bank_password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 install_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &install_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 future_serial = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &future_serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), static_cast<int>(this->user_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string verify_cert_no_flag = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_cert_no_flag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_cert_no_flag().data(), static_cast<int>(this->verify_cert_no_flag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.verify_cert_no_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string currency_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (202 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->currency_id().data(), static_cast<int>(this->currency_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.currency_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trade_amount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trade_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double future_fetch_amount = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (217 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &future_fetch_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fee_pay_flag = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_pay_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cust_fee = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (233 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cust_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double broker_fee = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &broker_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (250 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string digest = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->digest().data(), static_cast<int>(this->digest().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.digest"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bank_acc_type = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_acc_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_id = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), static_cast<int>(this->device_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_secu_acc = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (282 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_secu_acc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_secu_acc().data(), static_cast<int>(this->bank_secu_acc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_secu_acc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bank_pwd_flag = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (290 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_pwd_flag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bank_pwd_flag().data(), static_cast<int>(this->bank_pwd_flag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.bank_pwd_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string secu_pwd_flag = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secu_pwd_flag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->secu_pwd_flag().data(), static_cast<int>(this->secu_pwd_flag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.secu_pwd_flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oper_no = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oper_no()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oper_no().data(), static_cast<int>(this->oper_no().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.oper_no"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tid = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string transfer_status = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (330 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfer_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transfer_status().data(), static_cast<int>(this->transfer_status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.transfer_status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string long_customer_name = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (338 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_long_customer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpReqTransfer.long_customer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpReqTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpReqTransfer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpReqTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpReqTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trade_code = 1;
  if (this->trade_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trade_code(), output);
  }

  // string bank_id = 2;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bank_id(), output);
  }

  // string bank_branch_id = 3;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bank_branch_id(), output);
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.broker_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->broker_id(), output);
  }

  // string broker_branch_id = 5;
  if (this->broker_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.broker_branch_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->broker_branch_id(), output);
  }

  // string trade_date = 6;
  if (this->trade_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_date().data(), static_cast<int>(this->trade_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->trade_date(), output);
  }

  // string trade_time = 7;
  if (this->trade_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_time().data(), static_cast<int>(this->trade_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->trade_time(), output);
  }

  // string bank_serial = 8;
  if (this->bank_serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_serial().data(), static_cast<int>(this->bank_serial().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bank_serial(), output);
  }

  // string trading_day = 9;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trading_day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->trading_day(), output);
  }

  // int32 plate_serieal = 10;
  if (this->plate_serieal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->plate_serieal(), output);
  }

  // string last_fragment = 11;
  if (this->last_fragment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_fragment().data(), static_cast<int>(this->last_fragment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.last_fragment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->last_fragment(), output);
  }

  // int32 session_id = 12;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->session_id(), output);
  }

  // string customer_name = 13;
  if (this->customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_name().data(), static_cast<int>(this->customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.customer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->customer_name(), output);
  }

  // int32 id_card_type = 14;
  if (this->id_card_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->id_card_type(), output);
  }

  // string identified_card_no = 15;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.identified_card_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->identified_card_no(), output);
  }

  // string cust_type = 16;
  if (this->cust_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cust_type().data(), static_cast<int>(this->cust_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.cust_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->cust_type(), output);
  }

  // string bank_account = 17;
  if (this->bank_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_account().data(), static_cast<int>(this->bank_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->bank_account(), output);
  }

  // string bank_password = 18;
  if (this->bank_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_password().data(), static_cast<int>(this->bank_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->bank_password(), output);
  }

  // string account_id = 19;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->account_id(), output);
  }

  // string password = 20;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->password(), output);
  }

  // int32 install_id = 21;
  if (this->install_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->install_id(), output);
  }

  // int32 future_serial = 22;
  if (this->future_serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->future_serial(), output);
  }

  // string user_id = 23;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->user_id(), output);
  }

  // string verify_cert_no_flag = 24;
  if (this->verify_cert_no_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_cert_no_flag().data(), static_cast<int>(this->verify_cert_no_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.verify_cert_no_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->verify_cert_no_flag(), output);
  }

  // string currency_id = 25;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.currency_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->currency_id(), output);
  }

  // double trade_amount = 26;
  if (this->trade_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->trade_amount(), output);
  }

  // double future_fetch_amount = 27;
  if (this->future_fetch_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->future_fetch_amount(), output);
  }

  // int32 fee_pay_flag = 28;
  if (this->fee_pay_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->fee_pay_flag(), output);
  }

  // double cust_fee = 29;
  if (this->cust_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->cust_fee(), output);
  }

  // double broker_fee = 30;
  if (this->broker_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->broker_fee(), output);
  }

  // string message = 31;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->message(), output);
  }

  // string digest = 32;
  if (this->digest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digest().data(), static_cast<int>(this->digest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->digest(), output);
  }

  // int32 bank_acc_type = 33;
  if (this->bank_acc_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->bank_acc_type(), output);
  }

  // string device_id = 34;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->device_id(), output);
  }

  // string bank_secu_acc = 35;
  if (this->bank_secu_acc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_secu_acc().data(), static_cast<int>(this->bank_secu_acc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_secu_acc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->bank_secu_acc(), output);
  }

  // string bank_pwd_flag = 36;
  if (this->bank_pwd_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_pwd_flag().data(), static_cast<int>(this->bank_pwd_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_pwd_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->bank_pwd_flag(), output);
  }

  // string secu_pwd_flag = 37;
  if (this->secu_pwd_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secu_pwd_flag().data(), static_cast<int>(this->secu_pwd_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.secu_pwd_flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->secu_pwd_flag(), output);
  }

  // string oper_no = 38;
  if (this->oper_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oper_no().data(), static_cast<int>(this->oper_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.oper_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->oper_no(), output);
  }

  // int32 request_id = 39;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->request_id(), output);
  }

  // int32 tid = 40;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tid(), output);
  }

  // string transfer_status = 41;
  if (this->transfer_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_status().data(), static_cast<int>(this->transfer_status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.transfer_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->transfer_status(), output);
  }

  // string long_customer_name = 42;
  if (this->long_customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.long_customer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->long_customer_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpReqTransfer)
}

::google::protobuf::uint8* CtpReqTransfer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpReqTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trade_code = 1;
  if (this->trade_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_code().data(), static_cast<int>(this->trade_code().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trade_code(), target);
  }

  // string bank_id = 2;
  if (this->bank_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_id().data(), static_cast<int>(this->bank_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bank_id(), target);
  }

  // string bank_branch_id = 3;
  if (this->bank_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_branch_id().data(), static_cast<int>(this->bank_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bank_branch_id(), target);
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_id().data(), static_cast<int>(this->broker_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.broker_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->broker_id(), target);
  }

  // string broker_branch_id = 5;
  if (this->broker_branch_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->broker_branch_id().data(), static_cast<int>(this->broker_branch_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.broker_branch_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->broker_branch_id(), target);
  }

  // string trade_date = 6;
  if (this->trade_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_date().data(), static_cast<int>(this->trade_date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->trade_date(), target);
  }

  // string trade_time = 7;
  if (this->trade_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_time().data(), static_cast<int>(this->trade_time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trade_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->trade_time(), target);
  }

  // string bank_serial = 8;
  if (this->bank_serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_serial().data(), static_cast<int>(this->bank_serial().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bank_serial(), target);
  }

  // string trading_day = 9;
  if (this->trading_day().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trading_day().data(), static_cast<int>(this->trading_day().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.trading_day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trading_day(), target);
  }

  // int32 plate_serieal = 10;
  if (this->plate_serieal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->plate_serieal(), target);
  }

  // string last_fragment = 11;
  if (this->last_fragment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_fragment().data(), static_cast<int>(this->last_fragment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.last_fragment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->last_fragment(), target);
  }

  // int32 session_id = 12;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->session_id(), target);
  }

  // string customer_name = 13;
  if (this->customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->customer_name().data(), static_cast<int>(this->customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.customer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->customer_name(), target);
  }

  // int32 id_card_type = 14;
  if (this->id_card_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->id_card_type(), target);
  }

  // string identified_card_no = 15;
  if (this->identified_card_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identified_card_no().data(), static_cast<int>(this->identified_card_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.identified_card_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->identified_card_no(), target);
  }

  // string cust_type = 16;
  if (this->cust_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cust_type().data(), static_cast<int>(this->cust_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.cust_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cust_type(), target);
  }

  // string bank_account = 17;
  if (this->bank_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_account().data(), static_cast<int>(this->bank_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bank_account(), target);
  }

  // string bank_password = 18;
  if (this->bank_password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_password().data(), static_cast<int>(this->bank_password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->bank_password(), target);
  }

  // string account_id = 19;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->account_id(), target);
  }

  // string password = 20;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->password(), target);
  }

  // int32 install_id = 21;
  if (this->install_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->install_id(), target);
  }

  // int32 future_serial = 22;
  if (this->future_serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->future_serial(), target);
  }

  // string user_id = 23;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), static_cast<int>(this->user_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->user_id(), target);
  }

  // string verify_cert_no_flag = 24;
  if (this->verify_cert_no_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_cert_no_flag().data(), static_cast<int>(this->verify_cert_no_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.verify_cert_no_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->verify_cert_no_flag(), target);
  }

  // string currency_id = 25;
  if (this->currency_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->currency_id().data(), static_cast<int>(this->currency_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.currency_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->currency_id(), target);
  }

  // double trade_amount = 26;
  if (this->trade_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->trade_amount(), target);
  }

  // double future_fetch_amount = 27;
  if (this->future_fetch_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->future_fetch_amount(), target);
  }

  // int32 fee_pay_flag = 28;
  if (this->fee_pay_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->fee_pay_flag(), target);
  }

  // double cust_fee = 29;
  if (this->cust_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->cust_fee(), target);
  }

  // double broker_fee = 30;
  if (this->broker_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->broker_fee(), target);
  }

  // string message = 31;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->message(), target);
  }

  // string digest = 32;
  if (this->digest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->digest().data(), static_cast<int>(this->digest().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->digest(), target);
  }

  // int32 bank_acc_type = 33;
  if (this->bank_acc_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->bank_acc_type(), target);
  }

  // string device_id = 34;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), static_cast<int>(this->device_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->device_id(), target);
  }

  // string bank_secu_acc = 35;
  if (this->bank_secu_acc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_secu_acc().data(), static_cast<int>(this->bank_secu_acc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_secu_acc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->bank_secu_acc(), target);
  }

  // string bank_pwd_flag = 36;
  if (this->bank_pwd_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bank_pwd_flag().data(), static_cast<int>(this->bank_pwd_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.bank_pwd_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->bank_pwd_flag(), target);
  }

  // string secu_pwd_flag = 37;
  if (this->secu_pwd_flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->secu_pwd_flag().data(), static_cast<int>(this->secu_pwd_flag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.secu_pwd_flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->secu_pwd_flag(), target);
  }

  // string oper_no = 38;
  if (this->oper_no().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oper_no().data(), static_cast<int>(this->oper_no().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.oper_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->oper_no(), target);
  }

  // int32 request_id = 39;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->request_id(), target);
  }

  // int32 tid = 40;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tid(), target);
  }

  // string transfer_status = 41;
  if (this->transfer_status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transfer_status().data(), static_cast<int>(this->transfer_status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.transfer_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->transfer_status(), target);
  }

  // string long_customer_name = 42;
  if (this->long_customer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->long_customer_name().data(), static_cast<int>(this->long_customer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpReqTransfer.long_customer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->long_customer_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpReqTransfer)
  return target;
}

size_t CtpReqTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpReqTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_code = 1;
  if (this->trade_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_code());
  }

  // string bank_id = 2;
  if (this->bank_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_id());
  }

  // string bank_branch_id = 3;
  if (this->bank_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_branch_id());
  }

  // string broker_id = 4;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_id());
  }

  // string broker_branch_id = 5;
  if (this->broker_branch_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->broker_branch_id());
  }

  // string trade_date = 6;
  if (this->trade_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_date());
  }

  // string trade_time = 7;
  if (this->trade_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_time());
  }

  // string bank_serial = 8;
  if (this->bank_serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_serial());
  }

  // string trading_day = 9;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trading_day());
  }

  // string last_fragment = 11;
  if (this->last_fragment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_fragment());
  }

  // string customer_name = 13;
  if (this->customer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->customer_name());
  }

  // string identified_card_no = 15;
  if (this->identified_card_no().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identified_card_no());
  }

  // string cust_type = 16;
  if (this->cust_type().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cust_type());
  }

  // string bank_account = 17;
  if (this->bank_account().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_account());
  }

  // string bank_password = 18;
  if (this->bank_password().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_password());
  }

  // string account_id = 19;
  if (this->account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string password = 20;
  if (this->password().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string user_id = 23;
  if (this->user_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string verify_cert_no_flag = 24;
  if (this->verify_cert_no_flag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verify_cert_no_flag());
  }

  // string currency_id = 25;
  if (this->currency_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency_id());
  }

  // string message = 31;
  if (this->message().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string digest = 32;
  if (this->digest().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->digest());
  }

  // string device_id = 34;
  if (this->device_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // string bank_secu_acc = 35;
  if (this->bank_secu_acc().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_secu_acc());
  }

  // string bank_pwd_flag = 36;
  if (this->bank_pwd_flag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bank_pwd_flag());
  }

  // string secu_pwd_flag = 37;
  if (this->secu_pwd_flag().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secu_pwd_flag());
  }

  // string oper_no = 38;
  if (this->oper_no().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oper_no());
  }

  // string transfer_status = 41;
  if (this->transfer_status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transfer_status());
  }

  // string long_customer_name = 42;
  if (this->long_customer_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->long_customer_name());
  }

  // int32 plate_serieal = 10;
  if (this->plate_serieal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plate_serieal());
  }

  // int32 session_id = 12;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  // int32 id_card_type = 14;
  if (this->id_card_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id_card_type());
  }

  // int32 install_id = 21;
  if (this->install_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->install_id());
  }

  // int32 future_serial = 22;
  if (this->future_serial() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->future_serial());
  }

  // int32 fee_pay_flag = 28;
  if (this->fee_pay_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fee_pay_flag());
  }

  // double trade_amount = 26;
  if (this->trade_amount() != 0) {
    total_size += 2 + 8;
  }

  // double future_fetch_amount = 27;
  if (this->future_fetch_amount() != 0) {
    total_size += 2 + 8;
  }

  // double cust_fee = 29;
  if (this->cust_fee() != 0) {
    total_size += 2 + 8;
  }

  // double broker_fee = 30;
  if (this->broker_fee() != 0) {
    total_size += 2 + 8;
  }

  // int32 bank_acc_type = 33;
  if (this->bank_acc_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bank_acc_type());
  }

  // int32 request_id = 39;
  if (this->request_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 tid = 40;
  if (this->tid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpReqTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpReqTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpReqTransfer* source =
      ::google::protobuf::DynamicCastToGenerated<CtpReqTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpReqTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpReqTransfer)
    MergeFrom(*source);
  }
}

void CtpReqTransfer::MergeFrom(const CtpReqTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpReqTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trade_code().size() > 0) {

    trade_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_code_);
  }
  if (from.bank_id().size() > 0) {

    bank_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_id_);
  }
  if (from.bank_branch_id().size() > 0) {

    bank_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_branch_id_);
  }
  if (from.broker_id().size() > 0) {

    broker_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_id_);
  }
  if (from.broker_branch_id().size() > 0) {

    broker_branch_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.broker_branch_id_);
  }
  if (from.trade_date().size() > 0) {

    trade_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_date_);
  }
  if (from.trade_time().size() > 0) {

    trade_time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_time_);
  }
  if (from.bank_serial().size() > 0) {

    bank_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_serial_);
  }
  if (from.trading_day().size() > 0) {

    trading_day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trading_day_);
  }
  if (from.last_fragment().size() > 0) {

    last_fragment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_fragment_);
  }
  if (from.customer_name().size() > 0) {

    customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.customer_name_);
  }
  if (from.identified_card_no().size() > 0) {

    identified_card_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identified_card_no_);
  }
  if (from.cust_type().size() > 0) {

    cust_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cust_type_);
  }
  if (from.bank_account().size() > 0) {

    bank_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_account_);
  }
  if (from.bank_password().size() > 0) {

    bank_password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_password_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.verify_cert_no_flag().size() > 0) {

    verify_cert_no_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_cert_no_flag_);
  }
  if (from.currency_id().size() > 0) {

    currency_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_id_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.digest().size() > 0) {

    digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.bank_secu_acc().size() > 0) {

    bank_secu_acc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_secu_acc_);
  }
  if (from.bank_pwd_flag().size() > 0) {

    bank_pwd_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bank_pwd_flag_);
  }
  if (from.secu_pwd_flag().size() > 0) {

    secu_pwd_flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secu_pwd_flag_);
  }
  if (from.oper_no().size() > 0) {

    oper_no_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oper_no_);
  }
  if (from.transfer_status().size() > 0) {

    transfer_status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transfer_status_);
  }
  if (from.long_customer_name().size() > 0) {

    long_customer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.long_customer_name_);
  }
  if (from.plate_serieal() != 0) {
    set_plate_serieal(from.plate_serieal());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.id_card_type() != 0) {
    set_id_card_type(from.id_card_type());
  }
  if (from.install_id() != 0) {
    set_install_id(from.install_id());
  }
  if (from.future_serial() != 0) {
    set_future_serial(from.future_serial());
  }
  if (from.fee_pay_flag() != 0) {
    set_fee_pay_flag(from.fee_pay_flag());
  }
  if (from.trade_amount() != 0) {
    set_trade_amount(from.trade_amount());
  }
  if (from.future_fetch_amount() != 0) {
    set_future_fetch_amount(from.future_fetch_amount());
  }
  if (from.cust_fee() != 0) {
    set_cust_fee(from.cust_fee());
  }
  if (from.broker_fee() != 0) {
    set_broker_fee(from.broker_fee());
  }
  if (from.bank_acc_type() != 0) {
    set_bank_acc_type(from.bank_acc_type());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
}

void CtpReqTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpReqTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpReqTransfer::CopyFrom(const CtpReqTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpReqTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpReqTransfer::IsInitialized() const {
  return true;
}

void CtpReqTransfer::Swap(CtpReqTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpReqTransfer::InternalSwap(CtpReqTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trade_code_.Swap(&other->trade_code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_id_.Swap(&other->bank_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_branch_id_.Swap(&other->bank_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_id_.Swap(&other->broker_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_branch_id_.Swap(&other->broker_branch_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_date_.Swap(&other->trade_date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_time_.Swap(&other->trade_time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_serial_.Swap(&other->bank_serial_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trading_day_.Swap(&other->trading_day_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_fragment_.Swap(&other->last_fragment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customer_name_.Swap(&other->customer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  identified_card_no_.Swap(&other->identified_card_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cust_type_.Swap(&other->cust_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_account_.Swap(&other->bank_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_password_.Swap(&other->bank_password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  verify_cert_no_flag_.Swap(&other->verify_cert_no_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_id_.Swap(&other->currency_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digest_.Swap(&other->digest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_id_.Swap(&other->device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_secu_acc_.Swap(&other->bank_secu_acc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bank_pwd_flag_.Swap(&other->bank_pwd_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  secu_pwd_flag_.Swap(&other->secu_pwd_flag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oper_no_.Swap(&other->oper_no_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transfer_status_.Swap(&other->transfer_status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  long_customer_name_.Swap(&other->long_customer_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plate_serieal_, other->plate_serieal_);
  swap(session_id_, other->session_id_);
  swap(id_card_type_, other->id_card_type_);
  swap(install_id_, other->install_id_);
  swap(future_serial_, other->future_serial_);
  swap(fee_pay_flag_, other->fee_pay_flag_);
  swap(trade_amount_, other->trade_amount_);
  swap(future_fetch_amount_, other->future_fetch_amount_);
  swap(cust_fee_, other->cust_fee_);
  swap(broker_fee_, other->broker_fee_);
  swap(bank_acc_type_, other->bank_acc_type_);
  swap(request_id_, other->request_id_);
  swap(tid_, other->tid_);
}

::google::protobuf::Metadata CtpReqTransfer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CtpRspTransfer::InitAsDefaultInstance() {
  ::pb::_CtpRspTransfer_default_instance_._instance.get_mutable()->req_ = const_cast< ::pb::CtpReqTransfer*>(
      ::pb::CtpReqTransfer::internal_default_instance());
}
class CtpRspTransfer::HasBitSetters {
 public:
  static const ::pb::CtpReqTransfer& req(const CtpRspTransfer* msg);
};

const ::pb::CtpReqTransfer&
CtpRspTransfer::HasBitSetters::req(const CtpRspTransfer* msg) {
  return *msg->req_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtpRspTransfer::kErrorIdFieldNumber;
const int CtpRspTransfer::kErrorMsgFieldNumber;
const int CtpRspTransfer::kRequestIdFieldNumber;
const int CtpRspTransfer::kIsLastFieldNumber;
const int CtpRspTransfer::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtpRspTransfer::CtpRspTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CtpRspTransfer)
}
CtpRspTransfer::CtpRspTransfer(const CtpRspTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.has_req()) {
    req_ = new ::pb::CtpReqTransfer(*from.req_);
  } else {
    req_ = nullptr;
  }
  ::memcpy(&error_id_, &from.error_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_) -
    reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  // @@protoc_insertion_point(copy_constructor:pb.CtpRspTransfer)
}

void CtpRspTransfer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CtpRspTransfer_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&req_)) + sizeof(is_last_));
}

CtpRspTransfer::~CtpRspTransfer() {
  // @@protoc_insertion_point(destructor:pb.CtpRspTransfer)
  SharedDtor();
}

void CtpRspTransfer::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
}

void CtpRspTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtpRspTransfer& CtpRspTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CtpRspTransfer_ctp_2eproto.base);
  return *internal_default_instance();
}


void CtpRspTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CtpRspTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  ::memset(&error_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_last_) -
      reinterpret_cast<char*>(&error_id_)) + sizeof(is_last_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CtpRspTransfer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CtpRspTransfer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CtpRspTransfer.error_msg");
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool is_last = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_is_last(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CtpReqTransfer req = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CtpReqTransfer::_InternalParse;
        object = msg->mutable_req();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CtpRspTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CtpRspTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CtpRspTransfer.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CtpReqTransfer req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CtpRspTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CtpRspTransfer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CtpRspTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CtpRspTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspTransfer.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_last(), output);
  }

  // .pb.CtpReqTransfer req = 5;
  if (this->has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::req(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CtpRspTransfer)
}

::google::protobuf::uint8* CtpRspTransfer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CtpRspTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CtpRspTransfer.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_last(), target);
  }

  // .pb.CtpReqTransfer req = 5;
  if (this->has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::req(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CtpRspTransfer)
  return target;
}

size_t CtpRspTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CtpRspTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // .pb.CtpReqTransfer req = 5;
  if (this->has_req()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  // int32 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // bool is_last = 4;
  if (this->is_last() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtpRspTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CtpRspTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const CtpRspTransfer* source =
      ::google::protobuf::DynamicCastToGenerated<CtpRspTransfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CtpRspTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CtpRspTransfer)
    MergeFrom(*source);
  }
}

void CtpRspTransfer::MergeFrom(const CtpRspTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CtpRspTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.has_req()) {
    mutable_req()->::pb::CtpReqTransfer::MergeFrom(from.req());
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.is_last() != 0) {
    set_is_last(from.is_last());
  }
}

void CtpRspTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CtpRspTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtpRspTransfer::CopyFrom(const CtpRspTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CtpRspTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtpRspTransfer::IsInitialized() const {
  return true;
}

void CtpRspTransfer::Swap(CtpRspTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtpRspTransfer::InternalSwap(CtpRspTransfer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(req_, other->req_);
  swap(error_id_, other->error_id_);
  swap(request_id_, other->request_id_);
  swap(is_last_, other->is_last_);
}

::google::protobuf::Metadata CtpRspTransfer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPReqSubscribeMarketData::InitAsDefaultInstance() {
}
class CTPReqSubscribeMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPReqSubscribeMarketData::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPReqSubscribeMarketData::CTPReqSubscribeMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPReqSubscribeMarketData)
}
CTPReqSubscribeMarketData::CTPReqSubscribeMarketData(const CTPReqSubscribeMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPReqSubscribeMarketData)
}

void CTPReqSubscribeMarketData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPReqSubscribeMarketData_ctp_2eproto.base);
}

CTPReqSubscribeMarketData::~CTPReqSubscribeMarketData() {
  // @@protoc_insertion_point(destructor:pb.CTPReqSubscribeMarketData)
  SharedDtor();
}

void CTPReqSubscribeMarketData::SharedDtor() {
}

void CTPReqSubscribeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPReqSubscribeMarketData& CTPReqSubscribeMarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPReqSubscribeMarketData_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPReqSubscribeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPReqSubscribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPReqSubscribeMarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPReqSubscribeMarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPReqSubscribeMarketData.list");
          object = msg->add_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPReqSubscribeMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPReqSubscribeMarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list(this->list_size() - 1).data(),
            static_cast<int>(this->list(this->list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPReqSubscribeMarketData.list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPReqSubscribeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPReqSubscribeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPReqSubscribeMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPReqSubscribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPReqSubscribeMarketData.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPReqSubscribeMarketData)
}

::google::protobuf::uint8* CTPReqSubscribeMarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPReqSubscribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPReqSubscribeMarketData.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPReqSubscribeMarketData)
  return target;
}

size_t CTPReqSubscribeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPReqSubscribeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->list_size());
  for (int i = 0, n = this->list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPReqSubscribeMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPReqSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPReqSubscribeMarketData* source =
      ::google::protobuf::DynamicCastToGenerated<CTPReqSubscribeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPReqSubscribeMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPReqSubscribeMarketData)
    MergeFrom(*source);
  }
}

void CTPReqSubscribeMarketData::MergeFrom(const CTPReqSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPReqSubscribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPReqSubscribeMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPReqSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPReqSubscribeMarketData::CopyFrom(const CTPReqSubscribeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPReqSubscribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPReqSubscribeMarketData::IsInitialized() const {
  return true;
}

void CTPReqSubscribeMarketData::Swap(CTPReqSubscribeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPReqSubscribeMarketData::InternalSwap(CTPReqSubscribeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPReqSubscribeMarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPRspSusbcribeMarketData::InitAsDefaultInstance() {
}
class CTPRspSusbcribeMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPRspSusbcribeMarketData::CTPRspSusbcribeMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPRspSusbcribeMarketData)
}
CTPRspSusbcribeMarketData::CTPRspSusbcribeMarketData(const CTPRspSusbcribeMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPRspSusbcribeMarketData)
}

void CTPRspSusbcribeMarketData::SharedCtor() {
}

CTPRspSusbcribeMarketData::~CTPRspSusbcribeMarketData() {
  // @@protoc_insertion_point(destructor:pb.CTPRspSusbcribeMarketData)
  SharedDtor();
}

void CTPRspSusbcribeMarketData::SharedDtor() {
}

void CTPRspSusbcribeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPRspSusbcribeMarketData& CTPRspSusbcribeMarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPRspSusbcribeMarketData_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPRspSusbcribeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPRspSusbcribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPRspSusbcribeMarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPRspSusbcribeMarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPRspSusbcribeMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPRspSusbcribeMarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPRspSusbcribeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPRspSusbcribeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPRspSusbcribeMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPRspSusbcribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPRspSusbcribeMarketData)
}

::google::protobuf::uint8* CTPRspSusbcribeMarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPRspSusbcribeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPRspSusbcribeMarketData)
  return target;
}

size_t CTPRspSusbcribeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPRspSusbcribeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPRspSusbcribeMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPRspSusbcribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPRspSusbcribeMarketData* source =
      ::google::protobuf::DynamicCastToGenerated<CTPRspSusbcribeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPRspSusbcribeMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPRspSusbcribeMarketData)
    MergeFrom(*source);
  }
}

void CTPRspSusbcribeMarketData::MergeFrom(const CTPRspSusbcribeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPRspSusbcribeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTPRspSusbcribeMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPRspSusbcribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPRspSusbcribeMarketData::CopyFrom(const CTPRspSusbcribeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPRspSusbcribeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPRspSusbcribeMarketData::IsInitialized() const {
  return true;
}

void CTPRspSusbcribeMarketData::Swap(CTPRspSusbcribeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPRspSusbcribeMarketData::InternalSwap(CTPRspSusbcribeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CTPRspSusbcribeMarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPReqUnSusbibeMarketData::InitAsDefaultInstance() {
}
class CTPReqUnSusbibeMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPReqUnSusbibeMarketData::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPReqUnSusbibeMarketData::CTPReqUnSusbibeMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPReqUnSusbibeMarketData)
}
CTPReqUnSusbibeMarketData::CTPReqUnSusbibeMarketData(const CTPReqUnSusbibeMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPReqUnSusbibeMarketData)
}

void CTPReqUnSusbibeMarketData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPReqUnSusbibeMarketData_ctp_2eproto.base);
}

CTPReqUnSusbibeMarketData::~CTPReqUnSusbibeMarketData() {
  // @@protoc_insertion_point(destructor:pb.CTPReqUnSusbibeMarketData)
  SharedDtor();
}

void CTPReqUnSusbibeMarketData::SharedDtor() {
}

void CTPReqUnSusbibeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPReqUnSusbibeMarketData& CTPReqUnSusbibeMarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPReqUnSusbibeMarketData_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPReqUnSusbibeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPReqUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPReqUnSusbibeMarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPReqUnSusbibeMarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPReqUnSusbibeMarketData.list");
          object = msg->add_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPReqUnSusbibeMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPReqUnSusbibeMarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list(this->list_size() - 1).data(),
            static_cast<int>(this->list(this->list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPReqUnSusbibeMarketData.list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPReqUnSusbibeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPReqUnSusbibeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPReqUnSusbibeMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPReqUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPReqUnSusbibeMarketData.list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPReqUnSusbibeMarketData)
}

::google::protobuf::uint8* CTPReqUnSusbibeMarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPReqUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string list = 1;
  for (int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list(i).data(), static_cast<int>(this->list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPReqUnSusbibeMarketData.list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPReqUnSusbibeMarketData)
  return target;
}

size_t CTPReqUnSusbibeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPReqUnSusbibeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->list_size());
  for (int i = 0, n = this->list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPReqUnSusbibeMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPReqUnSusbibeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPReqUnSusbibeMarketData* source =
      ::google::protobuf::DynamicCastToGenerated<CTPReqUnSusbibeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPReqUnSusbibeMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPReqUnSusbibeMarketData)
    MergeFrom(*source);
  }
}

void CTPReqUnSusbibeMarketData::MergeFrom(const CTPReqUnSusbibeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPReqUnSusbibeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPReqUnSusbibeMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPReqUnSusbibeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPReqUnSusbibeMarketData::CopyFrom(const CTPReqUnSusbibeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPReqUnSusbibeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPReqUnSusbibeMarketData::IsInitialized() const {
  return true;
}

void CTPReqUnSusbibeMarketData::Swap(CTPReqUnSusbibeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPReqUnSusbibeMarketData::InternalSwap(CTPReqUnSusbibeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPReqUnSusbibeMarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPRspUnSusbibeMarketData::InitAsDefaultInstance() {
}
class CTPRspUnSusbibeMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPRspUnSusbibeMarketData::CTPRspUnSusbibeMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPRspUnSusbibeMarketData)
}
CTPRspUnSusbibeMarketData::CTPRspUnSusbibeMarketData(const CTPRspUnSusbibeMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPRspUnSusbibeMarketData)
}

void CTPRspUnSusbibeMarketData::SharedCtor() {
}

CTPRspUnSusbibeMarketData::~CTPRspUnSusbibeMarketData() {
  // @@protoc_insertion_point(destructor:pb.CTPRspUnSusbibeMarketData)
  SharedDtor();
}

void CTPRspUnSusbibeMarketData::SharedDtor() {
}

void CTPRspUnSusbibeMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPRspUnSusbibeMarketData& CTPRspUnSusbibeMarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPRspUnSusbibeMarketData_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPRspUnSusbibeMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPRspUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPRspUnSusbibeMarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPRspUnSusbibeMarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPRspUnSusbibeMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPRspUnSusbibeMarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPRspUnSusbibeMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPRspUnSusbibeMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPRspUnSusbibeMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPRspUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPRspUnSusbibeMarketData)
}

::google::protobuf::uint8* CTPRspUnSusbibeMarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPRspUnSusbibeMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPRspUnSusbibeMarketData)
  return target;
}

size_t CTPRspUnSusbibeMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPRspUnSusbibeMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPRspUnSusbibeMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPRspUnSusbibeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPRspUnSusbibeMarketData* source =
      ::google::protobuf::DynamicCastToGenerated<CTPRspUnSusbibeMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPRspUnSusbibeMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPRspUnSusbibeMarketData)
    MergeFrom(*source);
  }
}

void CTPRspUnSusbibeMarketData::MergeFrom(const CTPRspUnSusbibeMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPRspUnSusbibeMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CTPRspUnSusbibeMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPRspUnSusbibeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPRspUnSusbibeMarketData::CopyFrom(const CTPRspUnSusbibeMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPRspUnSusbibeMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPRspUnSusbibeMarketData::IsInitialized() const {
  return true;
}

void CTPRspUnSusbibeMarketData::Swap(CTPRspUnSusbibeMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPRspUnSusbibeMarketData::InternalSwap(CTPRspUnSusbibeMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CTPRspUnSusbibeMarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOnRspOrderInsert::InitAsDefaultInstance() {
}
class CTPOnRspOrderInsert::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOnRspOrderInsert::kErrorIdFieldNumber;
const int CTPOnRspOrderInsert::kErrorMsgFieldNumber;
const int CTPOnRspOrderInsert::kOrderRefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOnRspOrderInsert::CTPOnRspOrderInsert()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOnRspOrderInsert)
}
CTPOnRspOrderInsert::CTPOnRspOrderInsert(const CTPOnRspOrderInsert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.order_ref().size() > 0) {
    order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_ref_);
  }
  error_id_ = from.error_id_;
  // @@protoc_insertion_point(copy_constructor:pb.CTPOnRspOrderInsert)
}

void CTPOnRspOrderInsert::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOnRspOrderInsert_ctp_2eproto.base);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ref_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_id_ = 0;
}

CTPOnRspOrderInsert::~CTPOnRspOrderInsert() {
  // @@protoc_insertion_point(destructor:pb.CTPOnRspOrderInsert)
  SharedDtor();
}

void CTPOnRspOrderInsert::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ref_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPOnRspOrderInsert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOnRspOrderInsert& CTPOnRspOrderInsert::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOnRspOrderInsert_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOnRspOrderInsert::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOnRspOrderInsert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ref_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOnRspOrderInsert::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOnRspOrderInsert*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_error_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes error_msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_error_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string order_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRspOrderInsert.order_ref");
        object = msg->mutable_order_ref();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOnRspOrderInsert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOnRspOrderInsert)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string order_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_ref()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->order_ref().data(), static_cast<int>(this->order_ref().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRspOrderInsert.order_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOnRspOrderInsert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOnRspOrderInsert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOnRspOrderInsert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOnRspOrderInsert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_id(), output);
  }

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error_msg(), output);
  }

  // string order_ref = 3;
  if (this->order_ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_ref().data(), static_cast<int>(this->order_ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRspOrderInsert.order_ref");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_ref(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOnRspOrderInsert)
}

::google::protobuf::uint8* CTPOnRspOrderInsert::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOnRspOrderInsert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_id(), target);
  }

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error_msg(), target);
  }

  // string order_ref = 3;
  if (this->order_ref().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->order_ref().data(), static_cast<int>(this->order_ref().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRspOrderInsert.order_ref");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_ref(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOnRspOrderInsert)
  return target;
}

size_t CTPOnRspOrderInsert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOnRspOrderInsert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error_msg());
  }

  // string order_ref = 3;
  if (this->order_ref().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->order_ref());
  }

  // int32 error_id = 1;
  if (this->error_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOnRspOrderInsert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOnRspOrderInsert)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOnRspOrderInsert* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOnRspOrderInsert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOnRspOrderInsert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOnRspOrderInsert)
    MergeFrom(*source);
  }
}

void CTPOnRspOrderInsert::MergeFrom(const CTPOnRspOrderInsert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOnRspOrderInsert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.order_ref().size() > 0) {

    order_ref_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.order_ref_);
  }
  if (from.error_id() != 0) {
    set_error_id(from.error_id());
  }
}

void CTPOnRspOrderInsert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOnRspOrderInsert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOnRspOrderInsert::CopyFrom(const CTPOnRspOrderInsert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOnRspOrderInsert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOnRspOrderInsert::IsInitialized() const {
  return true;
}

void CTPOnRspOrderInsert::Swap(CTPOnRspOrderInsert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOnRspOrderInsert::InternalSwap(CTPOnRspOrderInsert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  order_ref_.Swap(&other->order_ref_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_id_, other->error_id_);
}

::google::protobuf::Metadata CTPOnRspOrderInsert::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::CTPOrderID* Arena::CreateMaybeMessage< ::pb::CTPOrderID >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrder* Arena::CreateMaybeMessage< ::pb::CTPOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrderList* Arena::CreateMaybeMessage< ::pb::CTPOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrderLink* Arena::CreateMaybeMessage< ::pb::CTPOrderLink >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderLink >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCancelOrderRequest* Arena::CreateMaybeMessage< ::pb::CTPCancelOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOnRtnCancelOrder* Arena::CreateMaybeMessage< ::pb::CTPOnRtnCancelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOnRtnCancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradeReport* Arena::CreateMaybeMessage< ::pb::CTPTradeReport >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradeReport >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradeReportList* Arena::CreateMaybeMessage< ::pb::CTPTradeReportList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradeReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPositionSummation* Arena::CreateMaybeMessage< ::pb::CTPPositionSummation >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPositionSummation >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPosition* Arena::CreateMaybeMessage< ::pb::CTPPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPositionList* Arena::CreateMaybeMessage< ::pb::CTPPositionList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPositionList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCloseTradeRecord* Arena::CreateMaybeMessage< ::pb::CTPCloseTradeRecord >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCloseTradeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCloseTradeRecordList* Arena::CreateMaybeMessage< ::pb::CTPCloseTradeRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCloseTradeRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPMarginRate* Arena::CreateMaybeMessage< ::pb::CTPMarginRate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPMarginRate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPMarginItem* Arena::CreateMaybeMessage< ::pb::CTPMarginItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPMarginItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCommissionRateItem* Arena::CreateMaybeMessage< ::pb::CTPCommissionRateItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCommissionRateItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCommissionRate* Arena::CreateMaybeMessage< ::pb::CTPCommissionRate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCommissionRate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingUnit* Arena::CreateMaybeMessage< ::pb::CTPTradingUnit >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPForceCloseTimeRule* Arena::CreateMaybeMessage< ::pb::CTPForceCloseTimeRule >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPForceCloseTimeRule >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingUnitOption* Arena::CreateMaybeMessage< ::pb::CTPTradingUnitOption >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingUnitOption >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MarginCheckRule* Arena::CreateMaybeMessage< ::pb::MarginCheckRule >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MarginCheckRule >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SettlementUnitOption* Arena::CreateMaybeMessage< ::pb::SettlementUnitOption >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SettlementUnitOption >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingAccount* Arena::CreateMaybeMessage< ::pb::CTPTradingAccount >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingAccountSnapshot* Arena::CreateMaybeMessage< ::pb::CTPTradingAccountSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingAccountSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPRspInfo* Arena::CreateMaybeMessage< ::pb::CTPRspInfo >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPRspInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqQryAccountRegister* Arena::CreateMaybeMessage< ::pb::CtpReqQryAccountRegister >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqQryAccountRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspQryAccountRegister* Arena::CreateMaybeMessage< ::pb::CtpRspQryAccountRegister >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspQryAccountRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqAuthencate* Arena::CreateMaybeMessage< ::pb::CtpReqAuthencate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqAuthencate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspAuthencate* Arena::CreateMaybeMessage< ::pb::CtpRspAuthencate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspAuthencate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqUserLogin* Arena::CreateMaybeMessage< ::pb::CtpReqUserLogin >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqUserLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspUserLogin* Arena::CreateMaybeMessage< ::pb::CtpRspUserLogin >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspUserLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqConnect* Arena::CreateMaybeMessage< ::pb::CtpReqConnect >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpOnFrontConnected* Arena::CreateMaybeMessage< ::pb::CtpOnFrontConnected >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpOnFrontConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpOnFrontDisconnected* Arena::CreateMaybeMessage< ::pb::CtpOnFrontDisconnected >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpOnFrontDisconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqSettlementInfoConfirm* Arena::CreateMaybeMessage< ::pb::CtpReqSettlementInfoConfirm >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqSettlementInfoConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpOnRspSettlementInfoConfirm* Arena::CreateMaybeMessage< ::pb::CtpOnRspSettlementInfoConfirm >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpOnRspSettlementInfoConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqQryInvestor* Arena::CreateMaybeMessage< ::pb::CtpReqQryInvestor >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqQryInvestor >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspQryInvestor* Arena::CreateMaybeMessage< ::pb::CtpRspQryInvestor >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspQryInvestor >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqQryTransferBank* Arena::CreateMaybeMessage< ::pb::CtpReqQryTransferBank >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqQryTransferBank >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspQryTransferBank* Arena::CreateMaybeMessage< ::pb::CtpRspQryTransferBank >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspQryTransferBank >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpReqTransfer* Arena::CreateMaybeMessage< ::pb::CtpReqTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpReqTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CtpRspTransfer* Arena::CreateMaybeMessage< ::pb::CtpRspTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CtpRspTransfer >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPReqSubscribeMarketData* Arena::CreateMaybeMessage< ::pb::CTPReqSubscribeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPReqSubscribeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPRspSusbcribeMarketData* Arena::CreateMaybeMessage< ::pb::CTPRspSusbcribeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPRspSusbcribeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPReqUnSusbibeMarketData* Arena::CreateMaybeMessage< ::pb::CTPReqUnSusbibeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPReqUnSusbibeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPRspUnSusbibeMarketData* Arena::CreateMaybeMessage< ::pb::CTPRspUnSusbibeMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPRspUnSusbibeMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOnRspOrderInsert* Arena::CreateMaybeMessage< ::pb::CTPOnRspOrderInsert >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOnRspOrderInsert >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
