// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctp.proto

#include "ctp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AccountMoneySummary_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MoneyTransferRecord_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProductID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Symbol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPCommissionRateItem_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPForceCloseTimeRule_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginItem_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginRate_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPOrderID_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CTPPositionSummation_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarginCheckRule_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CTPCommissionRate_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderLink_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SettlementUnitOption_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CTPCloseTradeRecord_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CTPTradeReport_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CTPOrder_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CTPPosition_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CTPTradingAccount_ctp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ctp_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_CTPTradingUnit_ctp_2eproto;
namespace pb {
class CTPOrderIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderID> _instance;
} _CTPOrderID_default_instance_;
class CTPOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrder> _instance;
} _CTPOrder_default_instance_;
class CTPOrderListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderList> _instance;
} _CTPOrderList_default_instance_;
class CTPOrderLinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOrderLink> _instance;
} _CTPOrderLink_default_instance_;
class CTPCancelOrderRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCancelOrderRequest> _instance;
} _CTPCancelOrderRequest_default_instance_;
class CTPOnRtnCancelOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPOnRtnCancelOrder> _instance;
} _CTPOnRtnCancelOrder_default_instance_;
class CTPTradeReportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradeReport> _instance;
} _CTPTradeReport_default_instance_;
class CTPTradeReportListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradeReportList> _instance;
} _CTPTradeReportList_default_instance_;
class CTPPositionSummationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPositionSummation> _instance;
} _CTPPositionSummation_default_instance_;
class CTPPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPosition> _instance;
} _CTPPosition_default_instance_;
class CTPPositionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPPositionList> _instance;
} _CTPPositionList_default_instance_;
class CTPCloseTradeRecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCloseTradeRecord> _instance;
} _CTPCloseTradeRecord_default_instance_;
class CTPCloseTradeRecordListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCloseTradeRecordList> _instance;
} _CTPCloseTradeRecordList_default_instance_;
class CTPMarginRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPMarginRate> _instance;
} _CTPMarginRate_default_instance_;
class CTPMarginItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPMarginItem> _instance;
} _CTPMarginItem_default_instance_;
class CTPCommissionRateItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCommissionRateItem> _instance;
} _CTPCommissionRateItem_default_instance_;
class CTPCommissionRateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPCommissionRate> _instance;
} _CTPCommissionRate_default_instance_;
class CTPTradingUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingUnit> _instance;
} _CTPTradingUnit_default_instance_;
class CTPForceCloseTimeRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPForceCloseTimeRule> _instance;
} _CTPForceCloseTimeRule_default_instance_;
class CTPTradingUnitOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingUnitOption> _instance;
} _CTPTradingUnitOption_default_instance_;
class MarginCheckRuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarginCheckRule> _instance;
} _MarginCheckRule_default_instance_;
class SettlementUnitOptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettlementUnitOption> _instance;
} _SettlementUnitOption_default_instance_;
class CTPTradingAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingAccount> _instance;
} _CTPTradingAccount_default_instance_;
class CTPTradingAccountSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CTPTradingAccountSnapshot> _instance;
} _CTPTradingAccountSnapshot_default_instance_;
}  // namespace pb
static void InitDefaultsCTPOrderID_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderID_default_instance_;
    new (ptr) ::pb::CTPOrderID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderID::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPOrderID_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPOrderID_ctp_2eproto}, {}};

static void InitDefaultsCTPOrder_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrder_default_instance_;
    new (ptr) ::pb::CTPOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPOrder_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPOrder_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsCTPOrderList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderList_default_instance_;
    new (ptr) ::pb::CTPOrderList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPOrderList_ctp_2eproto}, {
      &scc_info_CTPOrder_ctp_2eproto.base,}};

static void InitDefaultsCTPOrderLink_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOrderLink_default_instance_;
    new (ptr) ::pb::CTPOrderLink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOrderLink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPOrderLink_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPOrderLink_ctp_2eproto}, {
      &scc_info_CTPOrder_ctp_2eproto.base,}};

static void InitDefaultsCTPCancelOrderRequest_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCancelOrderRequest_default_instance_;
    new (ptr) ::pb::CTPCancelOrderRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCancelOrderRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPCancelOrderRequest_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPCancelOrderRequest_ctp_2eproto}, {
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsCTPOnRtnCancelOrder_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPOnRtnCancelOrder_default_instance_;
    new (ptr) ::pb::CTPOnRtnCancelOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPOnRtnCancelOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPOnRtnCancelOrder_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPOnRtnCancelOrder_ctp_2eproto}, {
      &scc_info_CTPOrderID_ctp_2eproto.base,
      &scc_info_Symbol_common_2eproto.base,}};

static void InitDefaultsCTPTradeReport_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradeReport_default_instance_;
    new (ptr) ::pb::CTPTradeReport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradeReport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPTradeReport_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPTradeReport_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,}};

static void InitDefaultsCTPTradeReportList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradeReportList_default_instance_;
    new (ptr) ::pb::CTPTradeReportList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradeReportList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPTradeReportList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPTradeReportList_ctp_2eproto}, {
      &scc_info_CTPTradeReport_ctp_2eproto.base,}};

static void InitDefaultsCTPPositionSummation_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPositionSummation_default_instance_;
    new (ptr) ::pb::CTPPositionSummation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPositionSummation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPPositionSummation_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPPositionSummation_ctp_2eproto}, {}};

static void InitDefaultsCTPPosition_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPosition_default_instance_;
    new (ptr) ::pb::CTPPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPPosition_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPPosition_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPPositionSummation_ctp_2eproto.base,
      &scc_info_ProductID_common_2eproto.base,}};

static void InitDefaultsCTPPositionList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPPositionList_default_instance_;
    new (ptr) ::pb::CTPPositionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPPositionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPPositionList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPPositionList_ctp_2eproto}, {
      &scc_info_CTPPosition_ctp_2eproto.base,}};

static void InitDefaultsCTPCloseTradeRecord_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCloseTradeRecord_default_instance_;
    new (ptr) ::pb::CTPCloseTradeRecord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCloseTradeRecord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CTPCloseTradeRecord_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCTPCloseTradeRecord_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPOrderID_ctp_2eproto.base,}};

static void InitDefaultsCTPCloseTradeRecordList_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCloseTradeRecordList_default_instance_;
    new (ptr) ::pb::CTPCloseTradeRecordList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCloseTradeRecordList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPCloseTradeRecordList_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPCloseTradeRecordList_ctp_2eproto}, {
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base,}};

static void InitDefaultsCTPMarginRate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPMarginRate_default_instance_;
    new (ptr) ::pb::CTPMarginRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPMarginRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginRate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPMarginRate_ctp_2eproto}, {}};

static void InitDefaultsCTPMarginItem_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPMarginItem_default_instance_;
    new (ptr) ::pb::CTPMarginItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPMarginItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPMarginItem_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPMarginItem_ctp_2eproto}, {}};

static void InitDefaultsCTPCommissionRateItem_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCommissionRateItem_default_instance_;
    new (ptr) ::pb::CTPCommissionRateItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCommissionRateItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPCommissionRateItem_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPCommissionRateItem_ctp_2eproto}, {}};

static void InitDefaultsCTPCommissionRate_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPCommissionRate_default_instance_;
    new (ptr) ::pb::CTPCommissionRate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPCommissionRate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPCommissionRate_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPCommissionRate_ctp_2eproto}, {
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingUnit_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingUnit_default_instance_;
    new (ptr) ::pb::CTPTradingUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_CTPTradingUnit_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsCTPTradingUnit_ctp_2eproto}, {
      &scc_info_Symbol_common_2eproto.base,
      &scc_info_CTPPosition_ctp_2eproto.base,
      &scc_info_CTPOrderLink_ctp_2eproto.base,
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base,
      &scc_info_CTPOrder_ctp_2eproto.base,
      &scc_info_CTPTradeReport_ctp_2eproto.base,
      &scc_info_CTPCommissionRate_ctp_2eproto.base,
      &scc_info_CTPMarginRate_ctp_2eproto.base,}};

static void InitDefaultsCTPForceCloseTimeRule_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPForceCloseTimeRule_default_instance_;
    new (ptr) ::pb::CTPForceCloseTimeRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPForceCloseTimeRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CTPForceCloseTimeRule_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCTPForceCloseTimeRule_ctp_2eproto}, {}};

static void InitDefaultsCTPTradingUnitOption_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingUnitOption_default_instance_;
    new (ptr) ::pb::CTPTradingUnitOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingUnitOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CTPTradingUnitOption_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCTPTradingUnitOption_ctp_2eproto}, {
      &scc_info_CTPForceCloseTimeRule_ctp_2eproto.base,
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base,
      &scc_info_CTPMarginItem_ctp_2eproto.base,}};

static void InitDefaultsMarginCheckRule_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_MarginCheckRule_default_instance_;
    new (ptr) ::pb::MarginCheckRule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::MarginCheckRule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarginCheckRule_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarginCheckRule_ctp_2eproto}, {}};

static void InitDefaultsSettlementUnitOption_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SettlementUnitOption_default_instance_;
    new (ptr) ::pb::SettlementUnitOption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SettlementUnitOption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SettlementUnitOption_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettlementUnitOption_ctp_2eproto}, {
      &scc_info_MarginCheckRule_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingAccount_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingAccount_default_instance_;
    new (ptr) ::pb::CTPTradingAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingAccount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CTPTradingAccount_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCTPTradingAccount_ctp_2eproto}, {
      &scc_info_AccountMoneySummary_common_2eproto.base,
      &scc_info_MoneyTransferRecord_common_2eproto.base,
      &scc_info_CTPTradingUnit_ctp_2eproto.base,
      &scc_info_SettlementUnitOption_ctp_2eproto.base,}};

static void InitDefaultsCTPTradingAccountSnapshot_ctp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CTPTradingAccountSnapshot_default_instance_;
    new (ptr) ::pb::CTPTradingAccountSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CTPTradingAccountSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CTPTradingAccountSnapshot_ctp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCTPTradingAccountSnapshot_ctp_2eproto}, {
      &scc_info_CTPTradingAccount_ctp_2eproto.base,}};

void InitDefaults_ctp_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderID_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrder_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOrderLink_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradeReport_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradeReportList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPositionSummation_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPosition_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPPositionList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPMarginRate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPMarginItem_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPCommissionRate_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingUnit_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPForceCloseTimeRule_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarginCheckRule_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettlementUnitOption_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingAccount_ctp_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ctp_2eproto[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_ctp_2eproto[6];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ctp_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ctp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, order_ref_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderID, string_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, status_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, limit_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_traded_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_canceled_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, send_order_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, send_order_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, local_order_seq_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, force_close_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, order_source_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, order_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, user_product_info_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, time_condition_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, error_code_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, token_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, stoploss_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, take_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, traded_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrder, reason_comment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, parent_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOrderLink, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, ctporderid_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, front_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, session_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, token_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCancelOrderRequest, route_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, request_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, error_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, error_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPOnRtnCancelOrder, route_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, traded_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, traded_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, exchange_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, local_type_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, tax_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, total_other_fee_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, initial_traded_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, reserve_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReport, price_tick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReportList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradeReportList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, position_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, cost_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, available_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, position_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, closed_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, frozen_interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, mtm_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionSummation, cleared_closed_profit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, today_summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, yesterday_summation_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, last_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, product_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, product_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, symbol_name_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPPosition, account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPPositionList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, direction_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, closed_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, closed_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trading_day_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_order_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trade_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_trade_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_hedge_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_profit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, currency_type_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, open_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, close_commission_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, margin_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, initial_open_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, frozen_interest_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, route_account_id_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecord, position_profit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCloseTradeRecordList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, product_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, long_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, long_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, short_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, short_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginRate, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, long_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, long_by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, short_by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPMarginItem, short_by_amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, by_amount_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, by_volume_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, minimum_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, offset_flag_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRateItem, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, exchange_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, product_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, settings_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPCommissionRate, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, symbol_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, position_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, order_link_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, position_detail_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_ctr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_order_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, history_trade_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, last_price_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, last_mds_update_time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, price_tick_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, cr_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnit, mr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, start_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, end_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPForceCloseTimeRule, disable_open_start_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, limit_price_disable_open_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, limit_price_force_close_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_position_percentage_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_position_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_volume_percentage_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, pre_volume_threshold_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, single_product_margin_weight_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, fcr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, cr_settings_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, margin_rate_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, stoploss_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, take_profit_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, volume_candidates_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_symbol_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, disable_open_class_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingUnitOption, open_days_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, start_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, end_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_order_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, common_balance_multiple_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, disable_open_under_warning_level_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_by_prefer_ratio_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_by_prefer_ratio_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, warning_level_by_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, force_close_level_by_margin_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, margin_ceiling_),
  PROTOBUF_FIELD_OFFSET(::pb::MarginCheckRule, position_amount_ceiling_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, id_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, comment_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, settlement_group_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, available_check_level_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, force_close_on_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, mcr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::SettlementUnitOption, disable_open_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, summary_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, mtr_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, tu_list_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, last_settle_date_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccount, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, account_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, time_),
  PROTOBUF_FIELD_OFFSET(::pb::CTPTradingAccountSnapshot, comment_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::CTPOrderID)},
  { 9, -1, sizeof(::pb::CTPOrder)},
  { 52, -1, sizeof(::pb::CTPOrderList)},
  { 58, -1, sizeof(::pb::CTPOrderLink)},
  { 65, -1, sizeof(::pb::CTPCancelOrderRequest)},
  { 79, -1, sizeof(::pb::CTPOnRtnCancelOrder)},
  { 93, -1, sizeof(::pb::CTPTradeReport)},
  { 122, -1, sizeof(::pb::CTPTradeReportList)},
  { 128, -1, sizeof(::pb::CTPPositionSummation)},
  { 151, -1, sizeof(::pb::CTPPosition)},
  { 170, -1, sizeof(::pb::CTPPositionList)},
  { 176, -1, sizeof(::pb::CTPCloseTradeRecord)},
  { 211, -1, sizeof(::pb::CTPCloseTradeRecordList)},
  { 217, -1, sizeof(::pb::CTPMarginRate)},
  { 230, -1, sizeof(::pb::CTPMarginItem)},
  { 239, -1, sizeof(::pb::CTPCommissionRateItem)},
  { 249, -1, sizeof(::pb::CTPCommissionRate)},
  { 259, -1, sizeof(::pb::CTPTradingUnit)},
  { 277, -1, sizeof(::pb::CTPForceCloseTimeRule)},
  { 285, -1, sizeof(::pb::CTPTradingUnitOption)},
  { 307, -1, sizeof(::pb::MarginCheckRule)},
  { 325, -1, sizeof(::pb::SettlementUnitOption)},
  { 337, -1, sizeof(::pb::CTPTradingAccount)},
  { 347, -1, sizeof(::pb::CTPTradingAccountSnapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOrderLink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCancelOrderRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPOnRtnCancelOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradeReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradeReportList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPositionSummation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPPositionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCloseTradeRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCloseTradeRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPMarginRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPMarginItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCommissionRateItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPCommissionRate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPForceCloseTimeRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingUnitOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_MarginCheckRule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_SettlementUnitOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pb::_CTPTradingAccountSnapshot_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ctp_2eproto = {
  {}, AddDescriptors_ctp_2eproto, "ctp.proto", schemas,
  file_default_instances, TableStruct_ctp_2eproto::offsets,
  file_level_metadata_ctp_2eproto, 24, file_level_enum_descriptors_ctp_2eproto, file_level_service_descriptors_ctp_2eproto,
};

const char descriptor_table_protodef_ctp_2eproto[] =
  "\n\tctp.proto\022\002pb\032\014common.proto\"X\n\nCTPOrde"
  "rID\022\020\n\010front_id\030\001 \001(\003\022\022\n\nsession_id\030\002 \001("
  "\003\022\021\n\torder_ref\030\003 \001(\003\022\021\n\tstring_id\030\004 \001(\t\""
  "\353\007\n\010CTPOrder\022\032\n\006symbol\030\001 \001(\0132\n.pb.Symbol"
  "\022\032\n\002id\030\002 \001(\0132\016.pb.CTPOrderID\022\022\n\naccount_"
  "id\030\003 \001(\t\022#\n\tdirection\030\004 \001(\0162\020.pb.CTPDire"
  "ction\022\"\n\006status\030\005 \001(\0162\022.pb.CTPOrderStatu"
  "s\022$\n\nprice_type\030\006 \001(\0162\020.pb.CTPPriceType\022"
  "\023\n\013limit_price\030\007 \001(\001\022\016\n\006volume\030\010 \001(\005\022\025\n\r"
  "volume_traded\030\t \001(\005\022\027\n\017volume_canceled\030\n"
  " \001(\005\022\031\n\021frozen_commission\030\013 \001(\001\022\027\n\017send_"
  "order_time\030\014 \001(\003\022\036\n\026send_order_trading_d"
  "ay\030\r \001(\005\022\017\n\007comment\030\016 \001(\t\022\022\n\nrequest_id\030"
  "\017 \001(\005\022\027\n\017local_order_seq\030\020 \001(\005\022\030\n\020force_"
  "close_type\030\021 \001(\005\022\031\n\021order_source_type\030\022 "
  "\001(\005\022*\n\020order_hedge_type\030\023 \001(\0162\020.pb.CTPHe"
  "dgeType\022\031\n\021user_product_info\030\024 \001(\t\022\'\n\rcu"
  "rrency_type\030\025 \001(\0162\020.pb.CurrencyType\022\031\n\021e"
  "xchange_order_id\030\026 \001(\t\022\033\n\023time_condition"
  "_type\030\027 \001(\005\022\030\n\020route_account_id\030\030 \001(\t\022\025\n"
  "\rlocal_type_id\030\031 \001(\005\022\022\n\ncommission\030\032 \001(\001"
  "\022&\n\013offset_flag\030\033 \001(\0162\021.pb.CTPOffsetFlag"
  "\022\022\n\nerror_code\030\034 \001(\005\022\r\n\005token\030\035 \001(\t\022\020\n\010s"
  "toploss\030\036 \001(\001\022\023\n\013take_profit\030\037 \001(\001\022\025\n\rtr"
  "aded_amount\030  \001(\001\022\027\n\017volume_multiple\030! \001"
  "(\005\022!\n\nproduct_id\030\" \001(\0132\r.pb.ProductID\022\022\n"
  "\nprice_tick\030# \001(\001\022\025\n\rfrozen_margin\030$ \001(\001"
  "\022\023\n\013symbol_name\030% \001(\t\022\026\n\016reason_comment\030"
  "& \001(\t\"*\n\014CTPOrderList\022\032\n\004list\030\001 \003(\0132\014.pb"
  ".CTPOrder\"L\n\014CTPOrderLink\022\034\n\006parent\030\001 \001("
  "\0132\014.pb.CTPOrder\022\036\n\010children\030\002 \003(\0132\014.pb.C"
  "TPOrder\"\351\001\n\025CTPCancelOrderRequest\022\022\n\nacc"
  "ount_id\030\001 \001(\t\022\"\n\nCTPOrderID\030\002 \001(\0132\016.pb.C"
  "TPOrderID\022\032\n\006symbol\030\003 \001(\0132\n.pb.Symbol\022\022\n"
  "\nrequest_id\030\004 \001(\005\022\020\n\010front_id\030\005 \001(\005\022\022\n\ns"
  "ession_id\030\006 \001(\005\022\031\n\021exchange_order_id\030\007 \001"
  "(\t\022\r\n\005token\030\010 \001(\t\022\030\n\020route_account_id\030\t "
  "\001(\t\"\340\001\n\023CTPOnRtnCancelOrder\022\022\n\naccount_i"
  "d\030\001 \001(\t\022 \n\010order_id\030\002 \001(\0132\016.pb.CTPOrderI"
  "D\022\031\n\021exchange_order_id\030\003 \001(\t\022\032\n\006symbol\030\004"
  " \001(\0132\n.pb.Symbol\022\022\n\nrequest_id\030\005 \001(\005\022\022\n\n"
  "error_type\030\006 \001(\005\022\r\n\005error\030\007 \001(\005\022\013\n\003msg\030\010"
  " \001(\t\022\030\n\020route_account_id\030\t \001(\t\"\370\004\n\016CTPTr"
  "adeReport\022\022\n\naccount_id\030\001 \001(\t\022\020\n\010trade_i"
  "d\030\002 \001(\t\022\032\n\006symbol\030\003 \001(\0132\n.pb.Symbol\022#\n\td"
  "irection\030\004 \001(\0162\020.pb.CTPDirection\022\r\n\005pric"
  "e\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005\022\023\n\013traded_time\030\007"
  " \001(\003\022\032\n\022traded_trading_day\030\010 \001(\005\022 \n\010orde"
  "r_id\030\t \001(\0132\016.pb.CTPOrderID\022$\n\nprice_type"
  "\030\n \001(\0162\020.pb.CTPPriceType\022$\n\nhedge_type\030\013"
  " \001(\0162\020.pb.CTPHedgeType\022$\n\ntrade_type\030\014 \001"
  "(\0162\020.pb.CTPTradeType\022\025\n\rcurrency_type\030\r "
  "\001(\005\022\031\n\021exchange_order_id\030\016 \001(\t\022\025\n\rlocal_"
  "type_id\030\017 \001(\005\022\022\n\ncommission\030\020 \001(\001\022\013\n\003tax"
  "\030\021 \001(\001\022\027\n\017total_other_fee\030\022 \001(\001\022\034\n\024initi"
  "al_traded_price\030\023 \001(\001\022\017\n\007reserve\030\024 \001(\001\022&"
  "\n\013offset_flag\030\025 \001(\0162\021.pb.CTPOffsetFlag\022\030"
  "\n\020route_account_id\030\026 \001(\t\022\023\n\013symbol_name\030"
  "\027 \001(\t\022\022\n\nprice_tick\030\030 \001(\001\"6\n\022CTPTradeRep"
  "ortList\022 \n\004list\030\001 \003(\0132\022.pb.CTPTradeRepor"
  "t\"\232\003\n\024CTPPositionSummation\022#\n\tdirection\030"
  "\001 \001(\0162\020.pb.CTPDirection\022\014\n\004type\030\002 \001(\005\022\030\n"
  "\020route_account_id\030\003 \001(\t\022\020\n\010position\030\004 \001("
  "\005\022\016\n\006amount\030\005 \001(\001\022\014\n\004cost\030\006 \001(\001\022\016\n\006froze"
  "n\030\007 \001(\005\022\021\n\tavailable\030\010 \001(\005\022\027\n\017position_p"
  "rofit\030\t \001(\001\022\025\n\rclosed_profit\030\n \001(\001\022\016\n\006ma"
  "rgin\030\013 \001(\001\022\025\n\rfrozen_margin\030\014 \001(\001\022\022\n\ncom"
  "mission\030\r \001(\001\022\031\n\021frozen_commission\030\016 \001(\001"
  "\022\020\n\010interest\030\017 \001(\001\022\027\n\017frozen_interest\030\020 "
  "\001(\001\022\022\n\nmtm_profit\030\021 \001(\001\022\035\n\025cleared_close"
  "d_profit\030\022 \001(\001\"\260\003\n\013CTPPosition\022\032\n\006symbol"
  "\030\001 \001(\0132\n.pb.Symbol\022+\n\tsummation\030\002 \001(\0132\030."
  "pb.CTPPositionSummation\0221\n\017today_summati"
  "on\030\003 \001(\0132\030.pb.CTPPositionSummation\0225\n\023ye"
  "sterday_summation\030\004 \001(\0132\030.pb.CTPPosition"
  "Summation\022\034\n\024pre_settlement_price\030\005 \001(\001\022"
  "\030\n\020settlement_price\030\006 \001(\001\022\022\n\nlast_price\030"
  "\007 \001(\001\022\023\n\013trading_day\030\010 \001(\005\022\024\n\014product_ty"
  "pe\030\t \001(\005\022\027\n\017volume_multiple\030\013 \001(\005\022!\n\npro"
  "duct_id\030\014 \001(\0132\r.pb.ProductID\022\022\n\nprice_ti"
  "ck\030\r \001(\001\022\023\n\013symbol_name\030\016 \001(\t\022\022\n\naccount"
  "_id\030\017 \001(\t\"0\n\017CTPPositionList\022\035\n\004list\030\001 \003"
  "(\0132\017.pb.CTPPosition\"\244\006\n\023CTPCloseTradeRec"
  "ord\022\022\n\naccount_id\030\001 \001(\t\022\032\n\006symbol\030\002 \001(\0132"
  "\n.pb.Symbol\022#\n\tdirection\030\003 \001(\0162\020.pb.CTPD"
  "irection\022\023\n\013open_volume\030\004 \001(\005\022\023\n\013open_am"
  "ount\030\005 \001(\001\022\025\n\rclosed_volume\030\006 \001(\005\022\025\n\rclo"
  "sed_amount\030\007 \001(\001\022\021\n\topen_time\030\010 \001(\003\022\030\n\020o"
  "pen_trading_day\030\t \001(\005\022%\n\ropen_order_id\030\n"
  " \001(\0132\016.pb.CTPOrderID\022\025\n\ropen_trade_id\030\013 "
  "\001(\t\022\027\n\017open_trade_type\030\014 \001(\005\022\027\n\017open_hed"
  "ge_type\030\r \001(\005\022\022\n\nclose_time\030\016 \001(\003\022\031\n\021clo"
  "se_trading_day\030\017 \001(\005\022&\n\016close_order_id\030\020"
  " \001(\0132\016.pb.CTPOrderID\022\026\n\016close_trade_id\030\021"
  " \001(\t\022\030\n\020close_trade_type\030\022 \001(\005\022\030\n\020close_"
  "hedge_type\030\023 \001(\005\022\024\n\014close_profit\030\024 \001(\001\022\034"
  "\n\024pre_settlement_price\030\025 \001(\001\022\'\n\rcurrency"
  "_type\030\026 \001(\0162\020.pb.CurrencyType\022\027\n\017open_co"
  "mmission\030\027 \001(\001\022\030\n\020close_commission\030\030 \001(\001"
  "\022\016\n\006margin\030\031 \001(\001\022\033\n\023initial_open_amount\030"
  "\032 \001(\001\022\027\n\017volume_multiple\030\033 \001(\005\022\027\n\017frozen"
  "_interest\030\034 \001(\001\022\030\n\020route_account_id\030\035 \001("
  "\t\022\027\n\017position_profit\030\036 \001(\001\"@\n\027CTPCloseTr"
  "adeRecordList\022%\n\004list\030\001 \003(\0132\027.pb.CTPClos"
  "eTradeRecord\"\302\001\n\rCTPMarginRate\022\"\n\010exchan"
  "ge\030\001 \001(\0162\020.pb.ExchangeType\022\016\n\006symbol\030\002 \001"
  "(\t\022\017\n\007product\030\003 \001(\t\022\026\n\016long_by_volume\030\004 "
  "\001(\001\022\026\n\016long_by_amount\030\005 \001(\001\022\027\n\017short_by_"
  "volume\030\006 \001(\001\022\027\n\017short_by_amount\030\007 \001(\001\022\n\n"
  "\002id\030\n \001(\003\"q\n\rCTPMarginItem\022\026\n\016long_by_vo"
  "lume\030\001 \001(\001\022\026\n\016long_by_amount\030\002 \001(\001\022\027\n\017sh"
  "ort_by_volume\030\003 \001(\001\022\027\n\017short_by_amount\030\004"
  " \001(\001\"\203\001\n\025CTPCommissionRateItem\022\021\n\tby_amo"
  "unt\030\001 \001(\001\022\021\n\tby_volume\030\002 \001(\001\022\017\n\007minimum\030"
  "\003 \001(\001\022&\n\013offset_flag\030\004 \001(\0162\021.pb.CTPOffse"
  "tFlag\022\013\n\003tag\030\005 \001(\t\"\221\001\n\021CTPCommissionRate"
  "\022\"\n\010exchange\030\001 \001(\0162\020.pb.ExchangeType\022\016\n\006"
  "symbol\030\002 \001(\t\022\017\n\007product\030\003 \001(\t\022+\n\010setting"
  "s\030\004 \003(\0132\031.pb.CTPCommissionRateItem\022\n\n\002id"
  "\030\005 \001(\003\"\337\003\n\016CTPTradingUnit\022\032\n\006symbol\030\001 \001("
  "\0132\n.pb.Symbol\022!\n\010position\030\002 \003(\0132\017.pb.CTP"
  "Position\022)\n\017order_link_list\030\003 \003(\0132\020.pb.C"
  "TPOrderLink\0225\n\024position_detail_list\030\004 \003("
  "\0132\027.pb.CTPCloseTradeRecord\0221\n\020history_ct"
  "r_list\030\005 \003(\0132\027.pb.CTPCloseTradeRecord\022(\n"
  "\022history_order_list\030\006 \003(\0132\014.pb.CTPOrder\022"
  ".\n\022history_trade_list\030\007 \003(\0132\022.pb.CTPTrad"
  "eReport\022\022\n\nlast_price\030\n \001(\001\022\034\n\024last_mds_"
  "update_time\030\013 \001(\003\022\022\n\nprice_tick\030\014 \001(\001\022\027\n"
  "\017volume_multiple\030\r \001(\005\022!\n\002cr\030\016 \001(\0132\025.pb."
  "CTPCommissionRate\022\035\n\002mr\030\017 \001(\0132\021.pb.CTPMa"
  "rginRate\"O\n\025CTPForceCloseTimeRule\022\r\n\005sta"
  "rt\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\022\032\n\022disable_open_st"
  "art\030\003 \001(\003\"\346\004\n\024CTPTradingUnitOption\022 \n\030li"
  "mit_price_disable_open\030\001 \001(\005\022\037\n\027limit_pr"
  "ice_force_close\030\002 \001(\005\022)\n!pre_position_pe"
  "rcentage_threshold\030\003 \001(\001\022\036\n\026pre_position"
  "_threshold\030\004 \001(\001\022\'\n\037pre_volume_percentag"
  "e_threshold\030\005 \001(\001\022\034\n\024pre_volume_threshol"
  "d\030\006 \001(\001\022*\n\"single_product_margin_weight_"
  "limit\030\007 \001(\001\022+\n\010fcr_list\030\010 \003(\0132\031.pb.CTPFo"
  "rceCloseTimeRule\022\024\n\014disable_open\030\t \001(\010\022."
  "\n\013cr_settings\030\n \003(\0132\031.pb.CTPCommissionRa"
  "teItem\022&\n\013margin_rate\030\013 \001(\0132\021.pb.CTPMarg"
  "inItem\022\033\n\023stoploss_candidates\030\014 \003(\005\022\036\n\026t"
  "ake_profit_candidates\030\r \003(\005\022\031\n\021volume_ca"
  "ndidates\030\016 \003(\005\022 \n\030disable_open_symbol_li"
  "st\030\017 \003(\t\022\037\n\027disable_open_class_list\030\020 \003("
  "\t\022\027\n\017open_days_limit\030\021 \001(\005\"\226\003\n\017MarginChe"
  "ckRule\022\r\n\005start\030\001 \001(\003\022\013\n\003end\030\002 \001(\003\022\031\n\021fo"
  "rce_close_order\030\003 \001(\005\022\025\n\rwarning_level\030\004"
  " \001(\001\022\031\n\021force_close_level\030\005 \001(\001\022\037\n\027commo"
  "n_balance_multiple\030\006 \001(\001\022(\n disable_open"
  "_under_warning_level\030\007 \001(\010\022%\n\035warning_le"
  "vel_by_prefer_ratio\030\010 \001(\001\022)\n!force_close"
  "_level_by_prefer_ratio\030\t \001(\001\022\037\n\027warning_"
  "level_by_margin\030\n \001(\001\022#\n\033force_close_lev"
  "el_by_margin\030\013 \001(\001\022\026\n\016margin_ceiling\030\014 \001"
  "(\001\022\037\n\027position_amount_ceiling\030\r \001(\001\"\301\001\n\024"
  "SettlementUnitOption\022\n\n\002id\030\001 \001(\003\022\017\n\007comm"
  "ent\030\002 \001(\t\022\030\n\020settlement_group\030\003 \001(\005\022\035\n\025a"
  "vailable_check_level\030\004 \001(\005\022\026\n\016force_clos"
  "e_on\030\005 \001(\010\022%\n\010mcr_list\030\006 \003(\0132\023.pb.Margin"
  "CheckRule\022\024\n\014disable_open\030\007 \001(\010\"\322\001\n\021CTPT"
  "radingAccount\022(\n\007summary\030\001 \001(\0132\027.pb.Acco"
  "untMoneySummary\022)\n\010mtr_list\030\002 \003(\0132\027.pb.M"
  "oneyTransferRecord\022#\n\007tu_list\030\003 \003(\0132\022.pb"
  ".CTPTradingUnit\022\030\n\020last_settle_date\030\004 \001("
  "\005\022)\n\007options\030\005 \001(\0132\030.pb.SettlementUnitOp"
  "tion\"b\n\031CTPTradingAccountSnapshot\022&\n\007acc"
  "ount\030\001 \001(\0132\025.pb.CTPTradingAccount\022\014\n\004tim"
  "e\030\002 \001(\003\022\017\n\007comment\030\003 \001(\t*#\n\014CTPDirection"
  "\022\010\n\004LONG\020\000\022\t\n\005SHORT\020\001*\252\001\n\016CTPOrderStatus"
  "\022\017\n\013CTP_OS_DONE\020\000\022$\n CTP_OS_PENDING_WITH"
  "_PARTIAL_DONE\020\001\022%\n!CTP_OS_CANCELED_WITH_"
  "PARTIAL_DONE\020\002\022\022\n\016CTP_OS_PENDING\020\003\022\023\n\017CT"
  "P_OS_CANCELED\020\004\022\021\n\rCTP_OS_UNKOWN\020\005*Q\n\014CT"
  "PPriceType\022\017\n\013LIMIT_PRICE\020\000\022\020\n\014MARKET_PR"
  "ICE\020\001\022\016\n\nBEST_PRICE\020\002\022\016\n\nLAST_PRICE\020\003*e\n"
  "\rCTPOffsetFlag\022\010\n\004NONE\020\000\022\010\n\004OPEN\020\001\022\t\n\005CL"
  "OSE\020\002\022\017\n\013FORCE_CLOSE\020\003\022\017\n\013CLOSE_TODAY\020\004\022"
  "\023\n\017CLOSE_YESTERDAY\020\005*9\n\014CTPHedgeType\022\017\n\013"
  "SPECULATION\020\000\022\r\n\tARBITRAGE\020\001\022\t\n\005HEDGE\020\002*"
  "\247\001\n\014CTPTradeType\022\n\n\006NORMAL\020\000\022\025\n\021OPTIONS_"
  "EXECUTION\020\001\022\007\n\003OTC\020\002\022\017\n\013EFP_DERIVED\020\003\022\027\n"
  "\023COMBINATION_DERIVED\020\004\022\022\n\016DELIVERY_CLOSE"
  "\020\005\022\026\n\022SETTLEMENT_DERIVED\020\006\022\025\n\021PLACEMENT_"
  "DERIVED\020\007b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_ctp_2eproto = {
  false, InitDefaults_ctp_2eproto, 
  descriptor_table_protodef_ctp_2eproto,
  "ctp.proto", &assign_descriptors_table_ctp_2eproto, 7497,
};

void AddDescriptors_ctp_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_common_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ctp_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ctp_2eproto = []() { AddDescriptors_ctp_2eproto(); return true; }();
namespace pb {
const ::google::protobuf::EnumDescriptor* CTPDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[0];
}
bool CTPDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOrderStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[1];
}
bool CTPOrderStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPPriceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[2];
}
bool CTPPriceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPOffsetFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[3];
}
bool CTPOffsetFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPHedgeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[4];
}
bool CTPHedgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTPTradeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_ctp_2eproto);
  return file_level_enum_descriptors_ctp_2eproto[5];
}
bool CTPTradeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CTPOrderID::InitAsDefaultInstance() {
}
class CTPOrderID::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderID::kFrontIdFieldNumber;
const int CTPOrderID::kSessionIdFieldNumber;
const int CTPOrderID::kOrderRefFieldNumber;
const int CTPOrderID::kStringIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderID::CTPOrderID()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderID)
}
CTPOrderID::CTPOrderID(const CTPOrderID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.string_id().size() > 0) {
    string_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_id_);
  }
  ::memcpy(&front_id_, &from.front_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_ref_) -
    reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderID)
}

void CTPOrderID::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderID_ctp_2eproto.base);
  string_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
}

CTPOrderID::~CTPOrderID() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderID)
  SharedDtor();
}

void CTPOrderID::SharedDtor() {
  string_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPOrderID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderID& CTPOrderID::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderID_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderID::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&front_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&order_ref_) -
      reinterpret_cast<char*>(&front_id_)) + sizeof(order_ref_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderID::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderID*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 front_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 session_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 order_ref = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_order_ref(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string string_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrderID.string_id");
        object = msg->mutable_string_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderID)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 front_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 order_ref = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &order_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string string_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string_id().data(), static_cast<int>(this->string_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrderID.string_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderID)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->front_id(), output);
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->session_id(), output);
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->order_ref(), output);
  }

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_id().data(), static_cast<int>(this->string_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrderID.string_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->string_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderID)
}

::google::protobuf::uint8* CTPOrderID::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->front_id(), target);
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->session_id(), target);
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->order_ref(), target);
  }

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string_id().data(), static_cast<int>(this->string_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrderID.string_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->string_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderID)
  return target;
}

size_t CTPOrderID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string string_id = 4;
  if (this->string_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->string_id());
  }

  // int64 front_id = 1;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->front_id());
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // int64 order_ref = 3;
  if (this->order_ref() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->order_ref());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderID)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderID* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderID)
    MergeFrom(*source);
  }
}

void CTPOrderID::MergeFrom(const CTPOrderID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.string_id().size() > 0) {

    string_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_id_);
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.order_ref() != 0) {
    set_order_ref(from.order_ref());
  }
}

void CTPOrderID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderID::CopyFrom(const CTPOrderID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderID::IsInitialized() const {
  return true;
}

void CTPOrderID::Swap(CTPOrderID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderID::InternalSwap(CTPOrderID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_id_.Swap(&other->string_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
  swap(order_ref_, other->order_ref_);
}

::google::protobuf::Metadata CTPOrderID::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrder::InitAsDefaultInstance() {
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPOrder_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class CTPOrder::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPOrder* msg);
  static const ::pb::CTPOrderID& id(const CTPOrder* msg);
  static const ::pb::ProductID& product_id(const CTPOrder* msg);
};

const ::pb::Symbol&
CTPOrder::HasBitSetters::symbol(const CTPOrder* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPOrder::HasBitSetters::id(const CTPOrder* msg) {
  return *msg->id_;
}
const ::pb::ProductID&
CTPOrder::HasBitSetters::product_id(const CTPOrder* msg) {
  return *msg->product_id_;
}
void CTPOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void CTPOrder::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrder::kSymbolFieldNumber;
const int CTPOrder::kIdFieldNumber;
const int CTPOrder::kAccountIdFieldNumber;
const int CTPOrder::kDirectionFieldNumber;
const int CTPOrder::kStatusFieldNumber;
const int CTPOrder::kPriceTypeFieldNumber;
const int CTPOrder::kLimitPriceFieldNumber;
const int CTPOrder::kVolumeFieldNumber;
const int CTPOrder::kVolumeTradedFieldNumber;
const int CTPOrder::kVolumeCanceledFieldNumber;
const int CTPOrder::kFrozenCommissionFieldNumber;
const int CTPOrder::kSendOrderTimeFieldNumber;
const int CTPOrder::kSendOrderTradingDayFieldNumber;
const int CTPOrder::kCommentFieldNumber;
const int CTPOrder::kRequestIdFieldNumber;
const int CTPOrder::kLocalOrderSeqFieldNumber;
const int CTPOrder::kForceCloseTypeFieldNumber;
const int CTPOrder::kOrderSourceTypeFieldNumber;
const int CTPOrder::kOrderHedgeTypeFieldNumber;
const int CTPOrder::kUserProductInfoFieldNumber;
const int CTPOrder::kCurrencyTypeFieldNumber;
const int CTPOrder::kExchangeOrderIdFieldNumber;
const int CTPOrder::kTimeConditionTypeFieldNumber;
const int CTPOrder::kRouteAccountIdFieldNumber;
const int CTPOrder::kLocalTypeIdFieldNumber;
const int CTPOrder::kCommissionFieldNumber;
const int CTPOrder::kOffsetFlagFieldNumber;
const int CTPOrder::kErrorCodeFieldNumber;
const int CTPOrder::kTokenFieldNumber;
const int CTPOrder::kStoplossFieldNumber;
const int CTPOrder::kTakeProfitFieldNumber;
const int CTPOrder::kTradedAmountFieldNumber;
const int CTPOrder::kVolumeMultipleFieldNumber;
const int CTPOrder::kProductIdFieldNumber;
const int CTPOrder::kPriceTickFieldNumber;
const int CTPOrder::kFrozenMarginFieldNumber;
const int CTPOrder::kSymbolNameFieldNumber;
const int CTPOrder::kReasonCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrder::CTPOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrder)
}
CTPOrder::CTPOrder(const CTPOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_product_info().size() > 0) {
    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason_comment().size() > 0) {
    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_id()) {
    id_ = new ::pb::CTPOrderID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&frozen_margin_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(frozen_margin_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrder)
}

void CTPOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrder_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_margin_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(frozen_margin_));
}

CTPOrder::~CTPOrder() {
  // @@protoc_insertion_point(destructor:pb.CTPOrder)
  SharedDtor();
}

void CTPOrder::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete product_id_;
}

void CTPOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrder& CTPOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrder_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frozen_margin_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(frozen_margin_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPOrderID id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderStatus status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_status(static_cast<::pb::CTPOrderStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPPriceType price_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_price_type(static_cast<::pb::CTPPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double limit_price = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_limit_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_traded = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_volume_traded(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_volume_canceled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double frozen_commission = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_frozen_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 send_order_time = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_send_order_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 send_order_trading_day = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_send_order_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 request_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_local_order_seq(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 force_close_type = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_force_close_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 order_source_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_order_source_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPHedgeType order_hedge_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_order_hedge_type(static_cast<::pb::CTPHedgeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string user_product_info = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.user_product_info");
        object = msg->mutable_user_product_info();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CurrencyType currency_type = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_currency_type(static_cast<::pb::CurrencyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 time_condition_type = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_time_condition_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 194) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 local_type_id = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_local_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double commission = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_code = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_error_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double stoploss = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_stoploss(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double take_profit = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 249) goto handle_unusual;
        msg->set_take_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double traded_amount = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 1) goto handle_unusual;
        msg->set_traded_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_margin = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_frozen_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string symbol_name = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string reason_comment = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOrder.reason_comment");
        object = msg->mutable_reason_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderStatus status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::pb::CTPOrderStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPriceType price_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_price_type(static_cast< ::pb::CTPPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double limit_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_traded = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_traded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_canceled = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 send_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 send_order_trading_day = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_order_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_order_seq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_order_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force_close_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_close_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order_source_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_source_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPHedgeType order_hedge_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_order_hedge_type(static_cast< ::pb::CTPHedgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_product_info = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_product_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.user_product_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CurrencyType currency_type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::pb::CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_condition_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_condition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (194 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double stoploss = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stoploss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double take_profit = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (249 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &take_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double traded_amount = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (257 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traded_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (274 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (281 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (289 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (298 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason_comment = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (306 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOrder.reason_comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->account_id(), output);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->price_type(), output);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->limit_price(), output);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->volume_traded(), output);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volume_canceled(), output);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->frozen_commission(), output);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->send_order_time(), output);
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->send_order_trading_day(), output);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->comment(), output);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->request_id(), output);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->local_order_seq(), output);
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->force_close_type(), output);
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->order_source_type(), output);
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->order_hedge_type(), output);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.user_product_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->user_product_info(), output);
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->currency_type(), output);
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->exchange_order_id(), output);
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time_condition_type(), output);
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->route_account_id(), output);
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->local_type_id(), output);
  }

  // double commission = 26;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->commission(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->offset_flag(), output);
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->error_code(), output);
  }

  // string token = 29;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->token(), output);
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->stoploss(), output);
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->take_profit(), output);
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->traded_amount(), output);
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->price_tick(), output);
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->frozen_margin(), output);
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->symbol_name(), output);
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.reason_comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->reason_comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrder)
}

::google::protobuf::uint8* CTPOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account_id(), target);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->price_type(), target);
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->limit_price(), target);
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->volume_traded(), target);
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volume_canceled(), target);
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->frozen_commission(), target);
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->send_order_time(), target);
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->send_order_trading_day(), target);
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->comment(), target);
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->request_id(), target);
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->local_order_seq(), target);
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->force_close_type(), target);
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->order_source_type(), target);
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->order_hedge_type(), target);
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_product_info().data(), static_cast<int>(this->user_product_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.user_product_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->user_product_info(), target);
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->currency_type(), target);
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->exchange_order_id(), target);
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time_condition_type(), target);
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->route_account_id(), target);
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->local_type_id(), target);
  }

  // double commission = 26;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->commission(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->offset_flag(), target);
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->error_code(), target);
  }

  // string token = 29;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->token(), target);
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->stoploss(), target);
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->take_profit(), target);
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->traded_amount(), target);
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->price_tick(), target);
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->frozen_margin(), target);
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->symbol_name(), target);
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason_comment().data(), static_cast<int>(this->reason_comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOrder.reason_comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->reason_comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrder)
  return target;
}

size_t CTPOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 3;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string comment = 14;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // string user_product_info = 20;
  if (this->user_product_info().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_product_info());
  }

  // string exchange_order_id = 22;
  if (this->exchange_order_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account_id = 24;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // string token = 29;
  if (this->token().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string symbol_name = 37;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string reason_comment = 38;
  if (this->reason_comment().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason_comment());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .pb.ProductID product_id = 34;
  if (this->has_product_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .pb.CTPOrderStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // double limit_price = 7;
  if (this->limit_price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPPriceType price_type = 6;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
  }

  // int32 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int32 volume_traded = 9;
  if (this->volume_traded() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_traded());
  }

  // int32 volume_canceled = 10;
  if (this->volume_canceled() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_canceled());
  }

  // double frozen_commission = 11;
  if (this->frozen_commission() != 0) {
    total_size += 1 + 8;
  }

  // int64 send_order_time = 12;
  if (this->send_order_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->send_order_time());
  }

  // int32 send_order_trading_day = 13;
  if (this->send_order_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->send_order_trading_day());
  }

  // int32 request_id = 15;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 local_order_seq = 16;
  if (this->local_order_seq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_order_seq());
  }

  // int32 force_close_type = 17;
  if (this->force_close_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force_close_type());
  }

  // int32 order_source_type = 18;
  if (this->order_source_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_source_type());
  }

  // .pb.CTPHedgeType order_hedge_type = 19;
  if (this->order_hedge_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_hedge_type());
  }

  // .pb.CurrencyType currency_type = 21;
  if (this->currency_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // int32 time_condition_type = 23;
  if (this->time_condition_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_condition_type());
  }

  // double commission = 26;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // int32 local_type_id = 25;
  if (this->local_type_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // .pb.CTPOffsetFlag offset_flag = 27;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  // double stoploss = 30;
  if (this->stoploss() != 0) {
    total_size += 2 + 8;
  }

  // int32 error_code = 28;
  if (this->error_code() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // int32 volume_multiple = 33;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  // double take_profit = 31;
  if (this->take_profit() != 0) {
    total_size += 2 + 8;
  }

  // double traded_amount = 32;
  if (this->traded_amount() != 0) {
    total_size += 2 + 8;
  }

  // double price_tick = 35;
  if (this->price_tick() != 0) {
    total_size += 2 + 8;
  }

  // double frozen_margin = 36;
  if (this->frozen_margin() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrder* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrder)
    MergeFrom(*source);
  }
}

void CTPOrder::MergeFrom(const CTPOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.user_product_info().size() > 0) {

    user_product_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_product_info_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.reason_comment().size() > 0) {

    reason_comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_comment_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_id()) {
    mutable_id()->::pb::CTPOrderID::MergeFrom(from.id());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.limit_price() != 0) {
    set_limit_price(from.limit_price());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.volume_traded() != 0) {
    set_volume_traded(from.volume_traded());
  }
  if (from.volume_canceled() != 0) {
    set_volume_canceled(from.volume_canceled());
  }
  if (from.frozen_commission() != 0) {
    set_frozen_commission(from.frozen_commission());
  }
  if (from.send_order_time() != 0) {
    set_send_order_time(from.send_order_time());
  }
  if (from.send_order_trading_day() != 0) {
    set_send_order_trading_day(from.send_order_trading_day());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.local_order_seq() != 0) {
    set_local_order_seq(from.local_order_seq());
  }
  if (from.force_close_type() != 0) {
    set_force_close_type(from.force_close_type());
  }
  if (from.order_source_type() != 0) {
    set_order_source_type(from.order_source_type());
  }
  if (from.order_hedge_type() != 0) {
    set_order_hedge_type(from.order_hedge_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.time_condition_type() != 0) {
    set_time_condition_type(from.time_condition_type());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
  if (from.stoploss() != 0) {
    set_stoploss(from.stoploss());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
  if (from.take_profit() != 0) {
    set_take_profit(from.take_profit());
  }
  if (from.traded_amount() != 0) {
    set_traded_amount(from.traded_amount());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.frozen_margin() != 0) {
    set_frozen_margin(from.frozen_margin());
  }
}

void CTPOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrder::CopyFrom(const CTPOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrder::IsInitialized() const {
  return true;
}

void CTPOrder::Swap(CTPOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrder::InternalSwap(CTPOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_product_info_.Swap(&other->user_product_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_comment_.Swap(&other->reason_comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(id_, other->id_);
  swap(product_id_, other->product_id_);
  swap(direction_, other->direction_);
  swap(status_, other->status_);
  swap(limit_price_, other->limit_price_);
  swap(price_type_, other->price_type_);
  swap(volume_, other->volume_);
  swap(volume_traded_, other->volume_traded_);
  swap(volume_canceled_, other->volume_canceled_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(send_order_time_, other->send_order_time_);
  swap(send_order_trading_day_, other->send_order_trading_day_);
  swap(request_id_, other->request_id_);
  swap(local_order_seq_, other->local_order_seq_);
  swap(force_close_type_, other->force_close_type_);
  swap(order_source_type_, other->order_source_type_);
  swap(order_hedge_type_, other->order_hedge_type_);
  swap(currency_type_, other->currency_type_);
  swap(time_condition_type_, other->time_condition_type_);
  swap(commission_, other->commission_);
  swap(local_type_id_, other->local_type_id_);
  swap(offset_flag_, other->offset_flag_);
  swap(stoploss_, other->stoploss_);
  swap(error_code_, other->error_code_);
  swap(volume_multiple_, other->volume_multiple_);
  swap(take_profit_, other->take_profit_);
  swap(traded_amount_, other->traded_amount_);
  swap(price_tick_, other->price_tick_);
  swap(frozen_margin_, other->frozen_margin_);
}

::google::protobuf::Metadata CTPOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrderList::InitAsDefaultInstance() {
}
class CTPOrderList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderList::CTPOrderList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderList)
}
CTPOrderList::CTPOrderList(const CTPOrderList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderList)
}

void CTPOrderList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderList_ctp_2eproto.base);
}

CTPOrderList::~CTPOrderList() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderList)
  SharedDtor();
}

void CTPOrderList::SharedDtor() {
}

void CTPOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderList& CTPOrderList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPOrder list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPOrder list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderList)
}

::google::protobuf::uint8* CTPOrderList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderList)
  return target;
}

size_t CTPOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPOrder list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderList)
    MergeFrom(*source);
  }
}

void CTPOrderList::MergeFrom(const CTPOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPOrderList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderList::CopyFrom(const CTPOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderList::IsInitialized() const {
  return true;
}

void CTPOrderList::Swap(CTPOrderList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderList::InternalSwap(CTPOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPOrderList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOrderLink::InitAsDefaultInstance() {
  ::pb::_CTPOrderLink_default_instance_._instance.get_mutable()->parent_ = const_cast< ::pb::CTPOrder*>(
      ::pb::CTPOrder::internal_default_instance());
}
class CTPOrderLink::HasBitSetters {
 public:
  static const ::pb::CTPOrder& parent(const CTPOrderLink* msg);
};

const ::pb::CTPOrder&
CTPOrderLink::HasBitSetters::parent(const CTPOrderLink* msg) {
  return *msg->parent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOrderLink::kParentFieldNumber;
const int CTPOrderLink::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOrderLink::CTPOrderLink()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOrderLink)
}
CTPOrderLink::CTPOrderLink(const CTPOrderLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parent()) {
    parent_ = new ::pb::CTPOrder(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pb.CTPOrderLink)
}

void CTPOrderLink::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOrderLink_ctp_2eproto.base);
  parent_ = nullptr;
}

CTPOrderLink::~CTPOrderLink() {
  // @@protoc_insertion_point(destructor:pb.CTPOrderLink)
  SharedDtor();
}

void CTPOrderLink::SharedDtor() {
  if (this != internal_default_instance()) delete parent_;
}

void CTPOrderLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOrderLink& CTPOrderLink::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOrderLink_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOrderLink::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOrderLink::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOrderLink*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPOrder parent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrder::_InternalParse;
        object = msg->mutable_parent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.CTPOrder children = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_children();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOrderLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOrderLink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPOrder parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrder children = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOrderLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOrderLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOrderLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::parent(this), output);
  }

  // repeated .pb.CTPOrder children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->children(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOrderLink)
}

::google::protobuf::uint8* CTPOrderLink::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOrderLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::parent(this), target);
  }

  // repeated .pb.CTPOrder children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->children(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOrderLink)
  return target;
}

size_t CTPOrderLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOrderLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPOrder children = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // .pb.CTPOrder parent = 1;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOrderLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOrderLink* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOrderLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOrderLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOrderLink)
    MergeFrom(*source);
  }
}

void CTPOrderLink::MergeFrom(const CTPOrderLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOrderLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.has_parent()) {
    mutable_parent()->::pb::CTPOrder::MergeFrom(from.parent());
  }
}

void CTPOrderLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOrderLink::CopyFrom(const CTPOrderLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOrderLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOrderLink::IsInitialized() const {
  return true;
}

void CTPOrderLink::Swap(CTPOrderLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOrderLink::InternalSwap(CTPOrderLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  swap(parent_, other->parent_);
}

::google::protobuf::Metadata CTPOrderLink::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCancelOrderRequest::InitAsDefaultInstance() {
  ::pb::_CTPCancelOrderRequest_default_instance_._instance.get_mutable()->ctporderid_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPCancelOrderRequest_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class CTPCancelOrderRequest::HasBitSetters {
 public:
  static const ::pb::CTPOrderID& ctporderid(const CTPCancelOrderRequest* msg);
  static const ::pb::Symbol& symbol(const CTPCancelOrderRequest* msg);
};

const ::pb::CTPOrderID&
CTPCancelOrderRequest::HasBitSetters::ctporderid(const CTPCancelOrderRequest* msg) {
  return *msg->ctporderid_;
}
const ::pb::Symbol&
CTPCancelOrderRequest::HasBitSetters::symbol(const CTPCancelOrderRequest* msg) {
  return *msg->symbol_;
}
void CTPCancelOrderRequest::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCancelOrderRequest::kAccountIdFieldNumber;
const int CTPCancelOrderRequest::kCTPOrderIDFieldNumber;
const int CTPCancelOrderRequest::kSymbolFieldNumber;
const int CTPCancelOrderRequest::kRequestIdFieldNumber;
const int CTPCancelOrderRequest::kFrontIdFieldNumber;
const int CTPCancelOrderRequest::kSessionIdFieldNumber;
const int CTPCancelOrderRequest::kExchangeOrderIdFieldNumber;
const int CTPCancelOrderRequest::kTokenFieldNumber;
const int CTPCancelOrderRequest::kRouteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCancelOrderRequest::CTPCancelOrderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCancelOrderRequest)
}
CTPCancelOrderRequest::CTPCancelOrderRequest(const CTPCancelOrderRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_ctporderid()) {
    ctporderid_ = new ::pb::CTPOrderID(*from.ctporderid_);
  } else {
    ctporderid_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCancelOrderRequest)
}

void CTPCancelOrderRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctporderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&ctporderid_)) + sizeof(session_id_));
}

CTPCancelOrderRequest::~CTPCancelOrderRequest() {
  // @@protoc_insertion_point(destructor:pb.CTPCancelOrderRequest)
  SharedDtor();
}

void CTPCancelOrderRequest::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctporderid_;
  if (this != internal_default_instance()) delete symbol_;
}

void CTPCancelOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCancelOrderRequest& CTPCancelOrderRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCancelOrderRequest_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCancelOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ctporderid_ != nullptr) {
    delete ctporderid_;
  }
  ctporderid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCancelOrderRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCancelOrderRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPOrderID CTPOrderID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_ctporderid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 front_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_front_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 session_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_session_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string token = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCancelOrderRequest.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCancelOrderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCancelOrderRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID CTPOrderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctporderid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCancelOrderRequest.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCancelOrderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCancelOrderRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCancelOrderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ctporderid(this), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->request_id(), output);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->front_id(), output);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->session_id(), output);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exchange_order_id(), output);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->token(), output);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCancelOrderRequest)
}

::google::protobuf::uint8* CTPCancelOrderRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCancelOrderRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ctporderid(this), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->request_id(), target);
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->front_id(), target);
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->session_id(), target);
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchange_order_id(), target);
  }

  // string token = 8;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCancelOrderRequest.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCancelOrderRequest)
  return target;
}

size_t CTPCancelOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCancelOrderRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string exchange_order_id = 7;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string token = 8;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPOrderID CTPOrderID = 2;
  if (this->has_ctporderid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctporderid_);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 front_id = 5;
  if (this->front_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_id());
  }

  // int32 session_id = 6;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCancelOrderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCancelOrderRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCancelOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCancelOrderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCancelOrderRequest)
    MergeFrom(*source);
  }
}

void CTPCancelOrderRequest::MergeFrom(const CTPCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCancelOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_ctporderid()) {
    mutable_ctporderid()->::pb::CTPOrderID::MergeFrom(from.ctporderid());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.front_id() != 0) {
    set_front_id(from.front_id());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
}

void CTPCancelOrderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCancelOrderRequest::CopyFrom(const CTPCancelOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCancelOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCancelOrderRequest::IsInitialized() const {
  return true;
}

void CTPCancelOrderRequest::Swap(CTPCancelOrderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCancelOrderRequest::InternalSwap(CTPCancelOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctporderid_, other->ctporderid_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(front_id_, other->front_id_);
  swap(session_id_, other->session_id_);
}

::google::protobuf::Metadata CTPCancelOrderRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPOnRtnCancelOrder::InitAsDefaultInstance() {
  ::pb::_CTPOnRtnCancelOrder_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPOnRtnCancelOrder_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
}
class CTPOnRtnCancelOrder::HasBitSetters {
 public:
  static const ::pb::CTPOrderID& order_id(const CTPOnRtnCancelOrder* msg);
  static const ::pb::Symbol& symbol(const CTPOnRtnCancelOrder* msg);
};

const ::pb::CTPOrderID&
CTPOnRtnCancelOrder::HasBitSetters::order_id(const CTPOnRtnCancelOrder* msg) {
  return *msg->order_id_;
}
const ::pb::Symbol&
CTPOnRtnCancelOrder::HasBitSetters::symbol(const CTPOnRtnCancelOrder* msg) {
  return *msg->symbol_;
}
void CTPOnRtnCancelOrder::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPOnRtnCancelOrder::kAccountIdFieldNumber;
const int CTPOnRtnCancelOrder::kOrderIdFieldNumber;
const int CTPOnRtnCancelOrder::kExchangeOrderIdFieldNumber;
const int CTPOnRtnCancelOrder::kSymbolFieldNumber;
const int CTPOnRtnCancelOrder::kRequestIdFieldNumber;
const int CTPOnRtnCancelOrder::kErrorTypeFieldNumber;
const int CTPOnRtnCancelOrder::kErrorFieldNumber;
const int CTPOnRtnCancelOrder::kMsgFieldNumber;
const int CTPOnRtnCancelOrder::kRouteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPOnRtnCancelOrder::CTPOnRtnCancelOrder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPOnRtnCancelOrder)
}
CTPOnRtnCancelOrder::CTPOnRtnCancelOrder(const CTPOnRtnCancelOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::CTPOrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPOnRtnCancelOrder)
}

void CTPOnRtnCancelOrder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(error_));
}

CTPOnRtnCancelOrder::~CTPOnRtnCancelOrder() {
  // @@protoc_insertion_point(destructor:pb.CTPOnRtnCancelOrder)
  SharedDtor();
}

void CTPOnRtnCancelOrder::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_id_;
  if (this != internal_default_instance()) delete symbol_;
}

void CTPOnRtnCancelOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPOnRtnCancelOrder& CTPOnRtnCancelOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPOnRtnCancelOrder_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPOnRtnCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(error_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPOnRtnCancelOrder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPOnRtnCancelOrder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.CTPOrderID order_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string exchange_order_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 request_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_request_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_error_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 error = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_error(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string msg = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string route_account_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPOnRtnCancelOrder.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPOnRtnCancelOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPOnRtnCancelOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID order_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 request_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPOnRtnCancelOrder.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPOnRtnCancelOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPOnRtnCancelOrder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPOnRtnCancelOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::order_id(this), output);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange_order_id(), output);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::symbol(this), output);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_id(), output);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->error_type(), output);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->error(), output);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->route_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPOnRtnCancelOrder)
}

::google::protobuf::uint8* CTPOnRtnCancelOrder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPOnRtnCancelOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::order_id(this), target);
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange_order_id(), target);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::symbol(this), target);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->request_id(), target);
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->error_type(), target);
  }

  // int32 error = 7;
  if (this->error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->error(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPOnRtnCancelOrder.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->route_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPOnRtnCancelOrder)
  return target;
}

size_t CTPOnRtnCancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPOnRtnCancelOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string exchange_order_id = 3;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string route_account_id = 9;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPOrderID order_id = 2;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // .pb.Symbol symbol = 4;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // int32 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }

  // int32 error_type = 6;
  if (this->error_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_type());
  }

  // int32 error = 7;
  if (this->error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPOnRtnCancelOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPOnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPOnRtnCancelOrder* source =
      ::google::protobuf::DynamicCastToGenerated<CTPOnRtnCancelOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPOnRtnCancelOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPOnRtnCancelOrder)
    MergeFrom(*source);
  }
}

void CTPOnRtnCancelOrder::MergeFrom(const CTPOnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPOnRtnCancelOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::CTPOrderID::MergeFrom(from.order_id());
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
  if (from.error_type() != 0) {
    set_error_type(from.error_type());
  }
  if (from.error() != 0) {
    set_error(from.error());
  }
}

void CTPOnRtnCancelOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPOnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPOnRtnCancelOrder::CopyFrom(const CTPOnRtnCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPOnRtnCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPOnRtnCancelOrder::IsInitialized() const {
  return true;
}

void CTPOnRtnCancelOrder::Swap(CTPOnRtnCancelOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPOnRtnCancelOrder::InternalSwap(CTPOnRtnCancelOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_id_, other->order_id_);
  swap(symbol_, other->symbol_);
  swap(request_id_, other->request_id_);
  swap(error_type_, other->error_type_);
  swap(error_, other->error_);
}

::google::protobuf::Metadata CTPOnRtnCancelOrder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradeReport::InitAsDefaultInstance() {
  ::pb::_CTPTradeReport_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPTradeReport_default_instance_._instance.get_mutable()->order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
}
class CTPTradeReport::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPTradeReport* msg);
  static const ::pb::CTPOrderID& order_id(const CTPTradeReport* msg);
};

const ::pb::Symbol&
CTPTradeReport::HasBitSetters::symbol(const CTPTradeReport* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPTradeReport::HasBitSetters::order_id(const CTPTradeReport* msg) {
  return *msg->order_id_;
}
void CTPTradeReport::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradeReport::kAccountIdFieldNumber;
const int CTPTradeReport::kTradeIdFieldNumber;
const int CTPTradeReport::kSymbolFieldNumber;
const int CTPTradeReport::kDirectionFieldNumber;
const int CTPTradeReport::kPriceFieldNumber;
const int CTPTradeReport::kVolumeFieldNumber;
const int CTPTradeReport::kTradedTimeFieldNumber;
const int CTPTradeReport::kTradedTradingDayFieldNumber;
const int CTPTradeReport::kOrderIdFieldNumber;
const int CTPTradeReport::kPriceTypeFieldNumber;
const int CTPTradeReport::kHedgeTypeFieldNumber;
const int CTPTradeReport::kTradeTypeFieldNumber;
const int CTPTradeReport::kCurrencyTypeFieldNumber;
const int CTPTradeReport::kExchangeOrderIdFieldNumber;
const int CTPTradeReport::kLocalTypeIdFieldNumber;
const int CTPTradeReport::kCommissionFieldNumber;
const int CTPTradeReport::kTaxFieldNumber;
const int CTPTradeReport::kTotalOtherFeeFieldNumber;
const int CTPTradeReport::kInitialTradedPriceFieldNumber;
const int CTPTradeReport::kReserveFieldNumber;
const int CTPTradeReport::kOffsetFlagFieldNumber;
const int CTPTradeReport::kRouteAccountIdFieldNumber;
const int CTPTradeReport::kSymbolNameFieldNumber;
const int CTPTradeReport::kPriceTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradeReport::CTPTradeReport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradeReport)
}
CTPTradeReport::CTPTradeReport(const CTPTradeReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trade_id().size() > 0) {
    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange_order_id().size() > 0) {
    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_order_id()) {
    order_id_ = new ::pb::CTPOrderID(*from.order_id_);
  } else {
    order_id_ = nullptr;
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_flag_) -
    reinterpret_cast<char*>(&price_)) + sizeof(offset_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradeReport)
}

void CTPTradeReport::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradeReport_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(offset_flag_));
}

CTPTradeReport::~CTPTradeReport() {
  // @@protoc_insertion_point(destructor:pb.CTPTradeReport)
  SharedDtor();
}

void CTPTradeReport::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete order_id_;
}

void CTPTradeReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradeReport& CTPTradeReport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradeReport_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&price_)) + sizeof(offset_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradeReport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradeReport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string trade_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.trade_id");
        object = msg->mutable_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double price = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 traded_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_traded_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 traded_trading_day = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_traded_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID order_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPriceType price_type = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_price_type(static_cast<::pb::CTPPriceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPHedgeType hedge_type = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_hedge_type(static_cast<::pb::CTPHedgeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPTradeType trade_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_trade_type(static_cast<::pb::CTPTradeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 currency_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_currency_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string exchange_order_id = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.exchange_order_id");
        object = msg->mutable_exchange_order_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 local_type_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_local_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double commission = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double tax = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_tax(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double total_other_fee = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_total_other_fee(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double initial_traded_price = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 153) goto handle_unusual;
        msg->set_initial_traded_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double reserve = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_reserve(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string symbol_name = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 186) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradeReport.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double price_tick = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradeReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradeReport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string trade_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trade_id().data(), static_cast<int>(this->trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 traded_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &traded_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traded_trading_day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traded_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID order_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPriceType price_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_price_type(static_cast< ::pb::CTPPriceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPHedgeType hedge_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hedge_type(static_cast< ::pb::CTPHedgeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPTradeType trade_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trade_type(static_cast< ::pb::CTPTradeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currency_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exchange_order_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange_order_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 local_type_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double tax = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_other_fee = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_other_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double initial_traded_price = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (153 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_traded_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reserve = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (186 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradeReport.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradeReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradeReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradeReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->trade_id(), output);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // double price = 5;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->traded_time(), output);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->traded_trading_day(), output);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::order_id(this), output);
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->price_type(), output);
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->hedge_type(), output);
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->trade_type(), output);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->currency_type(), output);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.exchange_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->exchange_order_id(), output);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->local_type_id(), output);
  }

  // double commission = 16;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->commission(), output);
  }

  // double tax = 17;
  if (this->tax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->tax(), output);
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->total_other_fee(), output);
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->initial_traded_price(), output);
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->reserve(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->offset_flag(), output);
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->route_account_id(), output);
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->symbol_name(), output);
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->price_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradeReport)
}

::google::protobuf::uint8* CTPTradeReport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradeReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trade_id().data(), static_cast<int>(this->trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trade_id(), target);
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // double price = 5;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->traded_time(), target);
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->traded_trading_day(), target);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::order_id(this), target);
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->price_type(), target);
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->hedge_type(), target);
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->trade_type(), target);
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->currency_type(), target);
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange_order_id().data(), static_cast<int>(this->exchange_order_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.exchange_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exchange_order_id(), target);
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->local_type_id(), target);
  }

  // double commission = 16;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->commission(), target);
  }

  // double tax = 17;
  if (this->tax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->tax(), target);
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->total_other_fee(), target);
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->initial_traded_price(), target);
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->reserve(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->offset_flag(), target);
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->route_account_id(), target);
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradeReport.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->symbol_name(), target);
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->price_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradeReport)
  return target;
}

size_t CTPTradeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradeReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string trade_id = 2;
  if (this->trade_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trade_id());
  }

  // string exchange_order_id = 14;
  if (this->exchange_order_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange_order_id());
  }

  // string route_account_id = 22;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // string symbol_name = 23;
  if (this->symbol_name().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // .pb.Symbol symbol = 3;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID order_id = 9;
  if (this->has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *order_id_);
  }

  // double price = 5;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // int64 traded_time = 7;
  if (this->traded_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->traded_time());
  }

  // int32 traded_trading_day = 8;
  if (this->traded_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->traded_trading_day());
  }

  // .pb.CTPPriceType price_type = 10;
  if (this->price_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
  }

  // .pb.CTPHedgeType hedge_type = 11;
  if (this->hedge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->hedge_type());
  }

  // .pb.CTPTradeType trade_type = 12;
  if (this->trade_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trade_type());
  }

  // int32 currency_type = 13;
  if (this->currency_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  // int32 local_type_id = 15;
  if (this->local_type_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->local_type_id());
  }

  // double commission = 16;
  if (this->commission() != 0) {
    total_size += 2 + 8;
  }

  // double tax = 17;
  if (this->tax() != 0) {
    total_size += 2 + 8;
  }

  // double total_other_fee = 18;
  if (this->total_other_fee() != 0) {
    total_size += 2 + 8;
  }

  // double initial_traded_price = 19;
  if (this->initial_traded_price() != 0) {
    total_size += 2 + 8;
  }

  // double reserve = 20;
  if (this->reserve() != 0) {
    total_size += 2 + 8;
  }

  // double price_tick = 24;
  if (this->price_tick() != 0) {
    total_size += 2 + 8;
  }

  // .pb.CTPOffsetFlag offset_flag = 21;
  if (this->offset_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradeReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradeReport* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradeReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradeReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradeReport)
    MergeFrom(*source);
  }
}

void CTPTradeReport::MergeFrom(const CTPTradeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradeReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.trade_id().size() > 0) {

    trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trade_id_);
  }
  if (from.exchange_order_id().size() > 0) {

    exchange_order_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_order_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_order_id()) {
    mutable_order_id()->::pb::CTPOrderID::MergeFrom(from.order_id());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.traded_time() != 0) {
    set_traded_time(from.traded_time());
  }
  if (from.traded_trading_day() != 0) {
    set_traded_trading_day(from.traded_trading_day());
  }
  if (from.price_type() != 0) {
    set_price_type(from.price_type());
  }
  if (from.hedge_type() != 0) {
    set_hedge_type(from.hedge_type());
  }
  if (from.trade_type() != 0) {
    set_trade_type(from.trade_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.local_type_id() != 0) {
    set_local_type_id(from.local_type_id());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.tax() != 0) {
    set_tax(from.tax());
  }
  if (from.total_other_fee() != 0) {
    set_total_other_fee(from.total_other_fee());
  }
  if (from.initial_traded_price() != 0) {
    set_initial_traded_price(from.initial_traded_price());
  }
  if (from.reserve() != 0) {
    set_reserve(from.reserve());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
}

void CTPTradeReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradeReport::CopyFrom(const CTPTradeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradeReport::IsInitialized() const {
  return true;
}

void CTPTradeReport::Swap(CTPTradeReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradeReport::InternalSwap(CTPTradeReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trade_id_.Swap(&other->trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_order_id_.Swap(&other->exchange_order_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(order_id_, other->order_id_);
  swap(price_, other->price_);
  swap(direction_, other->direction_);
  swap(volume_, other->volume_);
  swap(traded_time_, other->traded_time_);
  swap(traded_trading_day_, other->traded_trading_day_);
  swap(price_type_, other->price_type_);
  swap(hedge_type_, other->hedge_type_);
  swap(trade_type_, other->trade_type_);
  swap(currency_type_, other->currency_type_);
  swap(local_type_id_, other->local_type_id_);
  swap(commission_, other->commission_);
  swap(tax_, other->tax_);
  swap(total_other_fee_, other->total_other_fee_);
  swap(initial_traded_price_, other->initial_traded_price_);
  swap(reserve_, other->reserve_);
  swap(price_tick_, other->price_tick_);
  swap(offset_flag_, other->offset_flag_);
}

::google::protobuf::Metadata CTPTradeReport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradeReportList::InitAsDefaultInstance() {
}
class CTPTradeReportList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradeReportList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradeReportList::CTPTradeReportList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradeReportList)
}
CTPTradeReportList::CTPTradeReportList(const CTPTradeReportList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradeReportList)
}

void CTPTradeReportList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradeReportList_ctp_2eproto.base);
}

CTPTradeReportList::~CTPTradeReportList() {
  // @@protoc_insertion_point(destructor:pb.CTPTradeReportList)
  SharedDtor();
}

void CTPTradeReportList::SharedDtor() {
}

void CTPTradeReportList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradeReportList& CTPTradeReportList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradeReportList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradeReportList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradeReportList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradeReportList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPTradeReport list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradeReport::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradeReportList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradeReportList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPTradeReport list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradeReportList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradeReportList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradeReportList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradeReportList)
}

::google::protobuf::uint8* CTPTradeReportList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradeReportList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradeReportList)
  return target;
}

size_t CTPTradeReportList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradeReportList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPTradeReport list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradeReportList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradeReportList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradeReportList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradeReportList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradeReportList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradeReportList)
    MergeFrom(*source);
  }
}

void CTPTradeReportList::MergeFrom(const CTPTradeReportList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradeReportList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPTradeReportList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradeReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradeReportList::CopyFrom(const CTPTradeReportList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradeReportList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradeReportList::IsInitialized() const {
  return true;
}

void CTPTradeReportList::Swap(CTPTradeReportList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradeReportList::InternalSwap(CTPTradeReportList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPTradeReportList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPositionSummation::InitAsDefaultInstance() {
}
class CTPPositionSummation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPositionSummation::kDirectionFieldNumber;
const int CTPPositionSummation::kTypeFieldNumber;
const int CTPPositionSummation::kRouteAccountIdFieldNumber;
const int CTPPositionSummation::kPositionFieldNumber;
const int CTPPositionSummation::kAmountFieldNumber;
const int CTPPositionSummation::kCostFieldNumber;
const int CTPPositionSummation::kFrozenFieldNumber;
const int CTPPositionSummation::kAvailableFieldNumber;
const int CTPPositionSummation::kPositionProfitFieldNumber;
const int CTPPositionSummation::kClosedProfitFieldNumber;
const int CTPPositionSummation::kMarginFieldNumber;
const int CTPPositionSummation::kFrozenMarginFieldNumber;
const int CTPPositionSummation::kCommissionFieldNumber;
const int CTPPositionSummation::kFrozenCommissionFieldNumber;
const int CTPPositionSummation::kInterestFieldNumber;
const int CTPPositionSummation::kFrozenInterestFieldNumber;
const int CTPPositionSummation::kMtmProfitFieldNumber;
const int CTPPositionSummation::kClearedClosedProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPositionSummation::CTPPositionSummation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPositionSummation)
}
CTPPositionSummation::CTPPositionSummation(const CTPPositionSummation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(available_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPPositionSummation)
}

void CTPPositionSummation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPositionSummation_ctp_2eproto.base);
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(available_));
}

CTPPositionSummation::~CTPPositionSummation() {
  // @@protoc_insertion_point(destructor:pb.CTPPositionSummation)
  SharedDtor();
}

void CTPPositionSummation::SharedDtor() {
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPPositionSummation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPositionSummation& CTPPositionSummation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPositionSummation_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPositionSummation::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(available_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPositionSummation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPositionSummation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPDirection direction = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string route_account_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPositionSummation.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 position = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cost = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_cost(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 frozen = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_frozen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 available = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_available(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double position_profit = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_position_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double closed_profit = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_closed_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_margin = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_frozen_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double commission = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_commission = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_frozen_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double interest = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double frozen_interest = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_frozen_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double mtm_profit = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_mtm_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double cleared_closed_profit = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 145) goto handle_unusual;
        msg->set_cleared_closed_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPositionSummation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPositionSummation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPDirection direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPositionSummation.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frozen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 available = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_profit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double closed_profit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closed_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_margin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double commission = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_commission = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interest = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_interest = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mtm_profit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mtm_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cleared_closed_profit = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (145 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleared_closed_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPositionSummation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPositionSummation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPositionSummation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPositionSummation.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->route_account_id(), output);
  }

  // int32 position = 4;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // double amount = 5;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->amount(), output);
  }

  // double cost = 6;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cost(), output);
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frozen(), output);
  }

  // int32 available = 8;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->available(), output);
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->position_profit(), output);
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->closed_profit(), output);
  }

  // double margin = 11;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->margin(), output);
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frozen_margin(), output);
  }

  // double commission = 13;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->commission(), output);
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozen_commission(), output);
  }

  // double interest = 15;
  if (this->interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->interest(), output);
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->frozen_interest(), output);
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->mtm_profit(), output);
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->cleared_closed_profit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPositionSummation)
}

::google::protobuf::uint8* CTPPositionSummation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPositionSummation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPositionSummation.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->route_account_id(), target);
  }

  // int32 position = 4;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // double amount = 5;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->amount(), target);
  }

  // double cost = 6;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cost(), target);
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frozen(), target);
  }

  // int32 available = 8;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->available(), target);
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->position_profit(), target);
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->closed_profit(), target);
  }

  // double margin = 11;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->margin(), target);
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frozen_margin(), target);
  }

  // double commission = 13;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->commission(), target);
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozen_commission(), target);
  }

  // double interest = 15;
  if (this->interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->interest(), target);
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->frozen_interest(), target);
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->mtm_profit(), target);
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->cleared_closed_profit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPositionSummation)
  return target;
}

size_t CTPPositionSummation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPositionSummation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string route_account_id = 3;
  if (this->route_account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.CTPDirection direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double amount = 5;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // int32 position = 4;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // int32 frozen = 7;
  if (this->frozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frozen());
  }

  // double cost = 6;
  if (this->cost() != 0) {
    total_size += 1 + 8;
  }

  // double position_profit = 9;
  if (this->position_profit() != 0) {
    total_size += 1 + 8;
  }

  // double closed_profit = 10;
  if (this->closed_profit() != 0) {
    total_size += 1 + 8;
  }

  // double margin = 11;
  if (this->margin() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_margin = 12;
  if (this->frozen_margin() != 0) {
    total_size += 1 + 8;
  }

  // double commission = 13;
  if (this->commission() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_commission = 14;
  if (this->frozen_commission() != 0) {
    total_size += 1 + 8;
  }

  // double interest = 15;
  if (this->interest() != 0) {
    total_size += 1 + 8;
  }

  // double frozen_interest = 16;
  if (this->frozen_interest() != 0) {
    total_size += 2 + 8;
  }

  // double mtm_profit = 17;
  if (this->mtm_profit() != 0) {
    total_size += 2 + 8;
  }

  // double cleared_closed_profit = 18;
  if (this->cleared_closed_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 available = 8;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPositionSummation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPositionSummation)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPositionSummation* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPositionSummation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPositionSummation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPositionSummation)
    MergeFrom(*source);
  }
}

void CTPPositionSummation::MergeFrom(const CTPPositionSummation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPositionSummation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.frozen() != 0) {
    set_frozen(from.frozen());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.position_profit() != 0) {
    set_position_profit(from.position_profit());
  }
  if (from.closed_profit() != 0) {
    set_closed_profit(from.closed_profit());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.frozen_margin() != 0) {
    set_frozen_margin(from.frozen_margin());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.frozen_commission() != 0) {
    set_frozen_commission(from.frozen_commission());
  }
  if (from.interest() != 0) {
    set_interest(from.interest());
  }
  if (from.frozen_interest() != 0) {
    set_frozen_interest(from.frozen_interest());
  }
  if (from.mtm_profit() != 0) {
    set_mtm_profit(from.mtm_profit());
  }
  if (from.cleared_closed_profit() != 0) {
    set_cleared_closed_profit(from.cleared_closed_profit());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
}

void CTPPositionSummation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPositionSummation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPositionSummation::CopyFrom(const CTPPositionSummation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPositionSummation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPositionSummation::IsInitialized() const {
  return true;
}

void CTPPositionSummation::Swap(CTPPositionSummation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPositionSummation::InternalSwap(CTPPositionSummation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(amount_, other->amount_);
  swap(position_, other->position_);
  swap(frozen_, other->frozen_);
  swap(cost_, other->cost_);
  swap(position_profit_, other->position_profit_);
  swap(closed_profit_, other->closed_profit_);
  swap(margin_, other->margin_);
  swap(frozen_margin_, other->frozen_margin_);
  swap(commission_, other->commission_);
  swap(frozen_commission_, other->frozen_commission_);
  swap(interest_, other->interest_);
  swap(frozen_interest_, other->frozen_interest_);
  swap(mtm_profit_, other->mtm_profit_);
  swap(cleared_closed_profit_, other->cleared_closed_profit_);
  swap(available_, other->available_);
}

::google::protobuf::Metadata CTPPositionSummation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPosition::InitAsDefaultInstance() {
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->today_summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->yesterday_summation_ = const_cast< ::pb::CTPPositionSummation*>(
      ::pb::CTPPositionSummation::internal_default_instance());
  ::pb::_CTPPosition_default_instance_._instance.get_mutable()->product_id_ = const_cast< ::pb::ProductID*>(
      ::pb::ProductID::internal_default_instance());
}
class CTPPosition::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& summation(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& today_summation(const CTPPosition* msg);
  static const ::pb::CTPPositionSummation& yesterday_summation(const CTPPosition* msg);
  static const ::pb::ProductID& product_id(const CTPPosition* msg);
};

const ::pb::Symbol&
CTPPosition::HasBitSetters::symbol(const CTPPosition* msg) {
  return *msg->symbol_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::summation(const CTPPosition* msg) {
  return *msg->summation_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::today_summation(const CTPPosition* msg) {
  return *msg->today_summation_;
}
const ::pb::CTPPositionSummation&
CTPPosition::HasBitSetters::yesterday_summation(const CTPPosition* msg) {
  return *msg->yesterday_summation_;
}
const ::pb::ProductID&
CTPPosition::HasBitSetters::product_id(const CTPPosition* msg) {
  return *msg->product_id_;
}
void CTPPosition::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
void CTPPosition::clear_product_id() {
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPosition::kSymbolFieldNumber;
const int CTPPosition::kSummationFieldNumber;
const int CTPPosition::kTodaySummationFieldNumber;
const int CTPPosition::kYesterdaySummationFieldNumber;
const int CTPPosition::kPreSettlementPriceFieldNumber;
const int CTPPosition::kSettlementPriceFieldNumber;
const int CTPPosition::kLastPriceFieldNumber;
const int CTPPosition::kTradingDayFieldNumber;
const int CTPPosition::kProductTypeFieldNumber;
const int CTPPosition::kVolumeMultipleFieldNumber;
const int CTPPosition::kProductIdFieldNumber;
const int CTPPosition::kPriceTickFieldNumber;
const int CTPPosition::kSymbolNameFieldNumber;
const int CTPPosition::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPosition::CTPPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPosition)
}
CTPPosition::CTPPosition(const CTPPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol_name().size() > 0) {
    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_summation()) {
    summation_ = new ::pb::CTPPositionSummation(*from.summation_);
  } else {
    summation_ = nullptr;
  }
  if (from.has_today_summation()) {
    today_summation_ = new ::pb::CTPPositionSummation(*from.today_summation_);
  } else {
    today_summation_ = nullptr;
  }
  if (from.has_yesterday_summation()) {
    yesterday_summation_ = new ::pb::CTPPositionSummation(*from.yesterday_summation_);
  } else {
    yesterday_summation_ = nullptr;
  }
  if (from.has_product_id()) {
    product_id_ = new ::pb::ProductID(*from.product_id_);
  } else {
    product_id_ = nullptr;
  }
  ::memcpy(&pre_settlement_price_, &from.pre_settlement_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&pre_settlement_price_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPPosition)
}

void CTPPosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPosition_ctp_2eproto.base);
  symbol_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPPosition::~CTPPosition() {
  // @@protoc_insertion_point(destructor:pb.CTPPosition)
  SharedDtor();
}

void CTPPosition::SharedDtor() {
  symbol_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete summation_;
  if (this != internal_default_instance()) delete today_summation_;
  if (this != internal_default_instance()) delete yesterday_summation_;
  if (this != internal_default_instance()) delete product_id_;
}

void CTPPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPosition& CTPPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPosition_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && summation_ != nullptr) {
    delete summation_;
  }
  summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && today_summation_ != nullptr) {
    delete today_summation_;
  }
  today_summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && yesterday_summation_ != nullptr) {
    delete yesterday_summation_;
  }
  yesterday_summation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && product_id_ != nullptr) {
    delete product_id_;
  }
  product_id_ = nullptr;
  ::memset(&pre_settlement_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&pre_settlement_price_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation summation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation today_summation = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_today_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPPositionSummation yesterday_summation = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPPositionSummation::_InternalParse;
        object = msg->mutable_yesterday_summation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double pre_settlement_price = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_pre_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double settlement_price = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double last_price = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_last_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 trading_day = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 product_type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_product_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 volume_multiple = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.ProductID product_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::ProductID::_InternalParse;
        object = msg->mutable_product_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double price_tick = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string symbol_name = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPosition.symbol_name");
        object = msg->mutable_symbol_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string account_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPPosition.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation summation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation today_summation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_today_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPPositionSummation yesterday_summation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yesterday_summation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double settlement_price = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_price = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trading_day = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 product_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.ProductID product_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_product_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPosition.symbol_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPPosition.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::summation(this), output);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::today_summation(this), output);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::yesterday_summation(this), output);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pre_settlement_price(), output);
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->settlement_price(), output);
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->last_price(), output);
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trading_day(), output);
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->product_type(), output);
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volume_multiple(), output);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::product_id(this), output);
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->price_tick(), output);
  }

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.symbol_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->symbol_name(), output);
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPosition)
}

::google::protobuf::uint8* CTPPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::summation(this), target);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::today_summation(this), target);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::yesterday_summation(this), target);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pre_settlement_price(), target);
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->settlement_price(), target);
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->last_price(), target);
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trading_day(), target);
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->product_type(), target);
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volume_multiple(), target);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::product_id(this), target);
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->price_tick(), target);
  }

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol_name().data(), static_cast<int>(this->symbol_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.symbol_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->symbol_name(), target);
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPPosition.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPosition)
  return target;
}

size_t CTPPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol_name = 14;
  if (this->symbol_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol_name());
  }

  // string account_id = 15;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPPositionSummation summation = 2;
  if (this->has_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *summation_);
  }

  // .pb.CTPPositionSummation today_summation = 3;
  if (this->has_today_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *today_summation_);
  }

  // .pb.CTPPositionSummation yesterday_summation = 4;
  if (this->has_yesterday_summation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *yesterday_summation_);
  }

  // .pb.ProductID product_id = 12;
  if (this->has_product_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *product_id_);
  }

  // double pre_settlement_price = 5;
  if (this->pre_settlement_price() != 0) {
    total_size += 1 + 8;
  }

  // double settlement_price = 6;
  if (this->settlement_price() != 0) {
    total_size += 1 + 8;
  }

  // double last_price = 7;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // int32 trading_day = 8;
  if (this->trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trading_day());
  }

  // int32 product_type = 9;
  if (this->product_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->product_type());
  }

  // double price_tick = 13;
  if (this->price_tick() != 0) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 11;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPosition)
    MergeFrom(*source);
  }
}

void CTPPosition::MergeFrom(const CTPPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol_name().size() > 0) {

    symbol_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_name_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_summation()) {
    mutable_summation()->::pb::CTPPositionSummation::MergeFrom(from.summation());
  }
  if (from.has_today_summation()) {
    mutable_today_summation()->::pb::CTPPositionSummation::MergeFrom(from.today_summation());
  }
  if (from.has_yesterday_summation()) {
    mutable_yesterday_summation()->::pb::CTPPositionSummation::MergeFrom(from.yesterday_summation());
  }
  if (from.has_product_id()) {
    mutable_product_id()->::pb::ProductID::MergeFrom(from.product_id());
  }
  if (from.pre_settlement_price() != 0) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (from.settlement_price() != 0) {
    set_settlement_price(from.settlement_price());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.trading_day() != 0) {
    set_trading_day(from.trading_day());
  }
  if (from.product_type() != 0) {
    set_product_type(from.product_type());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPosition::CopyFrom(const CTPPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPosition::IsInitialized() const {
  return true;
}

void CTPPosition::Swap(CTPPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPosition::InternalSwap(CTPPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_name_.Swap(&other->symbol_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(summation_, other->summation_);
  swap(today_summation_, other->today_summation_);
  swap(yesterday_summation_, other->yesterday_summation_);
  swap(product_id_, other->product_id_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(settlement_price_, other->settlement_price_);
  swap(last_price_, other->last_price_);
  swap(trading_day_, other->trading_day_);
  swap(product_type_, other->product_type_);
  swap(price_tick_, other->price_tick_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPPositionList::InitAsDefaultInstance() {
}
class CTPPositionList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPPositionList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPPositionList::CTPPositionList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPPositionList)
}
CTPPositionList::CTPPositionList(const CTPPositionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPPositionList)
}

void CTPPositionList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPPositionList_ctp_2eproto.base);
}

CTPPositionList::~CTPPositionList() {
  // @@protoc_insertion_point(destructor:pb.CTPPositionList)
  SharedDtor();
}

void CTPPositionList::SharedDtor() {
}

void CTPPositionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPPositionList& CTPPositionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPPositionList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPPositionList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPPositionList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPPositionList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPPosition list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPPosition::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPPositionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPPositionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPPosition list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPPositionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPPositionList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPPositionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPPositionList)
}

::google::protobuf::uint8* CTPPositionList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPPositionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPPositionList)
  return target;
}

size_t CTPPositionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPPositionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPPosition list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPPositionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPPositionList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPPositionList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPPositionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPPositionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPPositionList)
    MergeFrom(*source);
  }
}

void CTPPositionList::MergeFrom(const CTPPositionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPPositionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPPositionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPPositionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPPositionList::CopyFrom(const CTPPositionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPPositionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPPositionList::IsInitialized() const {
  return true;
}

void CTPPositionList::Swap(CTPPositionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPPositionList::InternalSwap(CTPPositionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPPositionList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCloseTradeRecord::InitAsDefaultInstance() {
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->open_order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
  ::pb::_CTPCloseTradeRecord_default_instance_._instance.get_mutable()->close_order_id_ = const_cast< ::pb::CTPOrderID*>(
      ::pb::CTPOrderID::internal_default_instance());
}
class CTPCloseTradeRecord::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPCloseTradeRecord* msg);
  static const ::pb::CTPOrderID& open_order_id(const CTPCloseTradeRecord* msg);
  static const ::pb::CTPOrderID& close_order_id(const CTPCloseTradeRecord* msg);
};

const ::pb::Symbol&
CTPCloseTradeRecord::HasBitSetters::symbol(const CTPCloseTradeRecord* msg) {
  return *msg->symbol_;
}
const ::pb::CTPOrderID&
CTPCloseTradeRecord::HasBitSetters::open_order_id(const CTPCloseTradeRecord* msg) {
  return *msg->open_order_id_;
}
const ::pb::CTPOrderID&
CTPCloseTradeRecord::HasBitSetters::close_order_id(const CTPCloseTradeRecord* msg) {
  return *msg->close_order_id_;
}
void CTPCloseTradeRecord::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCloseTradeRecord::kAccountIdFieldNumber;
const int CTPCloseTradeRecord::kSymbolFieldNumber;
const int CTPCloseTradeRecord::kDirectionFieldNumber;
const int CTPCloseTradeRecord::kOpenVolumeFieldNumber;
const int CTPCloseTradeRecord::kOpenAmountFieldNumber;
const int CTPCloseTradeRecord::kClosedVolumeFieldNumber;
const int CTPCloseTradeRecord::kClosedAmountFieldNumber;
const int CTPCloseTradeRecord::kOpenTimeFieldNumber;
const int CTPCloseTradeRecord::kOpenTradingDayFieldNumber;
const int CTPCloseTradeRecord::kOpenOrderIdFieldNumber;
const int CTPCloseTradeRecord::kOpenTradeIdFieldNumber;
const int CTPCloseTradeRecord::kOpenTradeTypeFieldNumber;
const int CTPCloseTradeRecord::kOpenHedgeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseTimeFieldNumber;
const int CTPCloseTradeRecord::kCloseTradingDayFieldNumber;
const int CTPCloseTradeRecord::kCloseOrderIdFieldNumber;
const int CTPCloseTradeRecord::kCloseTradeIdFieldNumber;
const int CTPCloseTradeRecord::kCloseTradeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseHedgeTypeFieldNumber;
const int CTPCloseTradeRecord::kCloseProfitFieldNumber;
const int CTPCloseTradeRecord::kPreSettlementPriceFieldNumber;
const int CTPCloseTradeRecord::kCurrencyTypeFieldNumber;
const int CTPCloseTradeRecord::kOpenCommissionFieldNumber;
const int CTPCloseTradeRecord::kCloseCommissionFieldNumber;
const int CTPCloseTradeRecord::kMarginFieldNumber;
const int CTPCloseTradeRecord::kInitialOpenAmountFieldNumber;
const int CTPCloseTradeRecord::kVolumeMultipleFieldNumber;
const int CTPCloseTradeRecord::kFrozenInterestFieldNumber;
const int CTPCloseTradeRecord::kRouteAccountIdFieldNumber;
const int CTPCloseTradeRecord::kPositionProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCloseTradeRecord::CTPCloseTradeRecord()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCloseTradeRecord)
}
CTPCloseTradeRecord::CTPCloseTradeRecord(const CTPCloseTradeRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  open_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.open_trade_id().size() > 0) {
    open_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_trade_id_);
  }
  close_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.close_trade_id().size() > 0) {
    close_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_trade_id_);
  }
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.route_account_id().size() > 0) {
    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_open_order_id()) {
    open_order_id_ = new ::pb::CTPOrderID(*from.open_order_id_);
  } else {
    open_order_id_ = nullptr;
  }
  if (from.has_close_order_id()) {
    close_order_id_ = new ::pb::CTPOrderID(*from.close_order_id_);
  } else {
    close_order_id_ = nullptr;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCloseTradeRecord)
}

void CTPCloseTradeRecord::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPCloseTradeRecord::~CTPCloseTradeRecord() {
  // @@protoc_insertion_point(destructor:pb.CTPCloseTradeRecord)
  SharedDtor();
}

void CTPCloseTradeRecord::SharedDtor() {
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete open_order_id_;
  if (this != internal_default_instance()) delete close_order_id_;
}

void CTPCloseTradeRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCloseTradeRecord& CTPCloseTradeRecord::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCloseTradeRecord_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCloseTradeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  open_trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_trade_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && open_order_id_ != nullptr) {
    delete open_order_id_;
  }
  open_order_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && close_order_id_ != nullptr) {
    delete close_order_id_;
  }
  close_order_id_ = nullptr;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCloseTradeRecord::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCloseTradeRecord*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.account_id");
        object = msg->mutable_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .pb.Symbol symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPDirection direction = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::pb::CTPDirection>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_volume = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_open_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double open_amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_open_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 closed_volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_closed_volume(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double closed_amount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_closed_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 open_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_open_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_trading_day = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_open_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID open_order_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_open_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string open_trade_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.open_trade_id");
        object = msg->mutable_open_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 open_trade_type = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_open_trade_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 open_hedge_type = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_open_hedge_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 close_time = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_close_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 close_trading_day = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_close_trading_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPOrderID close_order_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPOrderID::_InternalParse;
        object = msg->mutable_close_order_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string close_trade_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.close_trade_id");
        object = msg->mutable_close_trade_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 close_trade_type = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_close_trade_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 close_hedge_type = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_close_hedge_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double close_profit = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 161) goto handle_unusual;
        msg->set_close_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_settlement_price = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 169) goto handle_unusual;
        msg->set_pre_settlement_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CurrencyType currency_type = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_currency_type(static_cast<::pb::CurrencyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double open_commission = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 185) goto handle_unusual;
        msg->set_open_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double close_commission = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_close_commission(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double initial_open_amount = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 209) goto handle_unusual;
        msg->set_initial_open_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double frozen_interest = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 225) goto handle_unusual;
        msg->set_frozen_interest(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string route_account_id = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 234) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCloseTradeRecord.route_account_id");
        object = msg->mutable_route_account_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double position_profit = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 241) goto handle_unusual;
        msg->set_position_profit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCloseTradeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCloseTradeRecord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.Symbol symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPDirection direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::pb::CTPDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 closed_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closed_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double closed_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closed_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 open_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_trading_day = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID open_order_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string open_trade_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_open_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.open_trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_trade_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_trade_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_hedge_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_hedge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 close_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_trading_day = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_trading_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOrderID close_order_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close_order_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string close_trade_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_close_trade_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.close_trade_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_trade_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_trade_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 close_hedge_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_hedge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close_profit = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (161 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_settlement_price = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (169 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_settlement_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CurrencyType currency_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_currency_type(static_cast< ::pb::CurrencyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double open_commission = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (185 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double close_commission = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_commission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double initial_open_amount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (209 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initial_open_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double frozen_interest = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (225 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozen_interest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_account_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (234 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCloseTradeRecord.route_account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_profit = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (241 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_profit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCloseTradeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCloseTradeRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCloseTradeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account_id(), output);
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::symbol(this), output);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open_volume(), output);
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->open_amount(), output);
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->closed_volume(), output);
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->closed_amount(), output);
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->open_time(), output);
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->open_trading_day(), output);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::open_order_id(this), output);
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.open_trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->open_trade_id(), output);
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->open_trade_type(), output);
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->open_hedge_type(), output);
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->close_time(), output);
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->close_trading_day(), output);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::close_order_id(this), output);
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.close_trade_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->close_trade_id(), output);
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->close_trade_type(), output);
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->close_hedge_type(), output);
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->close_profit(), output);
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->pre_settlement_price(), output);
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->currency_type(), output);
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->open_commission(), output);
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->close_commission(), output);
  }

  // double margin = 25;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->margin(), output);
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->initial_open_amount(), output);
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->volume_multiple(), output);
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->frozen_interest(), output);
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.route_account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->route_account_id(), output);
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->position_profit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCloseTradeRecord)
}

::google::protobuf::uint8* CTPCloseTradeRecord::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCloseTradeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_id(), target);
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::symbol(this), target);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open_volume(), target);
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->open_amount(), target);
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->closed_volume(), target);
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->closed_amount(), target);
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->open_time(), target);
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->open_trading_day(), target);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::open_order_id(this), target);
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->open_trade_id().data(), static_cast<int>(this->open_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.open_trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->open_trade_id(), target);
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->open_trade_type(), target);
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->open_hedge_type(), target);
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->close_time(), target);
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->close_trading_day(), target);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::close_order_id(this), target);
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->close_trade_id().data(), static_cast<int>(this->close_trade_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.close_trade_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->close_trade_id(), target);
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->close_trade_type(), target);
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->close_hedge_type(), target);
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->close_profit(), target);
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->pre_settlement_price(), target);
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->currency_type(), target);
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->open_commission(), target);
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->close_commission(), target);
  }

  // double margin = 25;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->margin(), target);
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->initial_open_amount(), target);
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->volume_multiple(), target);
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->frozen_interest(), target);
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route_account_id().data(), static_cast<int>(this->route_account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCloseTradeRecord.route_account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->route_account_id(), target);
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->position_profit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCloseTradeRecord)
  return target;
}

size_t CTPCloseTradeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCloseTradeRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // string open_trade_id = 11;
  if (this->open_trade_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->open_trade_id());
  }

  // string close_trade_id = 17;
  if (this->close_trade_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->close_trade_id());
  }

  // string route_account_id = 29;
  if (this->route_account_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route_account_id());
  }

  // .pb.Symbol symbol = 2;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPOrderID open_order_id = 10;
  if (this->has_open_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_order_id_);
  }

  // .pb.CTPOrderID close_order_id = 16;
  if (this->has_close_order_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *close_order_id_);
  }

  // .pb.CTPDirection direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // int32 open_volume = 4;
  if (this->open_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_volume());
  }

  // double open_amount = 5;
  if (this->open_amount() != 0) {
    total_size += 1 + 8;
  }

  // double closed_amount = 7;
  if (this->closed_amount() != 0) {
    total_size += 1 + 8;
  }

  // int32 closed_volume = 6;
  if (this->closed_volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->closed_volume());
  }

  // int32 open_trading_day = 9;
  if (this->open_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_trading_day());
  }

  // int64 open_time = 8;
  if (this->open_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open_time());
  }

  // int32 open_trade_type = 12;
  if (this->open_trade_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_trade_type());
  }

  // int32 open_hedge_type = 13;
  if (this->open_hedge_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_hedge_type());
  }

  // int64 close_time = 14;
  if (this->close_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close_time());
  }

  // int32 close_trading_day = 15;
  if (this->close_trading_day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_trading_day());
  }

  // int32 close_trade_type = 18;
  if (this->close_trade_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_trade_type());
  }

  // double close_profit = 20;
  if (this->close_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 close_hedge_type = 19;
  if (this->close_hedge_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_hedge_type());
  }

  // .pb.CurrencyType currency_type = 22;
  if (this->currency_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->currency_type());
  }

  // double pre_settlement_price = 21;
  if (this->pre_settlement_price() != 0) {
    total_size += 2 + 8;
  }

  // double open_commission = 23;
  if (this->open_commission() != 0) {
    total_size += 2 + 8;
  }

  // double close_commission = 24;
  if (this->close_commission() != 0) {
    total_size += 2 + 8;
  }

  // double margin = 25;
  if (this->margin() != 0) {
    total_size += 2 + 8;
  }

  // double initial_open_amount = 26;
  if (this->initial_open_amount() != 0) {
    total_size += 2 + 8;
  }

  // double frozen_interest = 28;
  if (this->frozen_interest() != 0) {
    total_size += 2 + 8;
  }

  // double position_profit = 30;
  if (this->position_profit() != 0) {
    total_size += 2 + 8;
  }

  // int32 volume_multiple = 27;
  if (this->volume_multiple() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCloseTradeRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCloseTradeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCloseTradeRecord* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCloseTradeRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCloseTradeRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCloseTradeRecord)
    MergeFrom(*source);
  }
}

void CTPCloseTradeRecord::MergeFrom(const CTPCloseTradeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCloseTradeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.open_trade_id().size() > 0) {

    open_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.open_trade_id_);
  }
  if (from.close_trade_id().size() > 0) {

    close_trade_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.close_trade_id_);
  }
  if (from.route_account_id().size() > 0) {

    route_account_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_account_id_);
  }
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_open_order_id()) {
    mutable_open_order_id()->::pb::CTPOrderID::MergeFrom(from.open_order_id());
  }
  if (from.has_close_order_id()) {
    mutable_close_order_id()->::pb::CTPOrderID::MergeFrom(from.close_order_id());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.open_volume() != 0) {
    set_open_volume(from.open_volume());
  }
  if (from.open_amount() != 0) {
    set_open_amount(from.open_amount());
  }
  if (from.closed_amount() != 0) {
    set_closed_amount(from.closed_amount());
  }
  if (from.closed_volume() != 0) {
    set_closed_volume(from.closed_volume());
  }
  if (from.open_trading_day() != 0) {
    set_open_trading_day(from.open_trading_day());
  }
  if (from.open_time() != 0) {
    set_open_time(from.open_time());
  }
  if (from.open_trade_type() != 0) {
    set_open_trade_type(from.open_trade_type());
  }
  if (from.open_hedge_type() != 0) {
    set_open_hedge_type(from.open_hedge_type());
  }
  if (from.close_time() != 0) {
    set_close_time(from.close_time());
  }
  if (from.close_trading_day() != 0) {
    set_close_trading_day(from.close_trading_day());
  }
  if (from.close_trade_type() != 0) {
    set_close_trade_type(from.close_trade_type());
  }
  if (from.close_profit() != 0) {
    set_close_profit(from.close_profit());
  }
  if (from.close_hedge_type() != 0) {
    set_close_hedge_type(from.close_hedge_type());
  }
  if (from.currency_type() != 0) {
    set_currency_type(from.currency_type());
  }
  if (from.pre_settlement_price() != 0) {
    set_pre_settlement_price(from.pre_settlement_price());
  }
  if (from.open_commission() != 0) {
    set_open_commission(from.open_commission());
  }
  if (from.close_commission() != 0) {
    set_close_commission(from.close_commission());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.initial_open_amount() != 0) {
    set_initial_open_amount(from.initial_open_amount());
  }
  if (from.frozen_interest() != 0) {
    set_frozen_interest(from.frozen_interest());
  }
  if (from.position_profit() != 0) {
    set_position_profit(from.position_profit());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPCloseTradeRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCloseTradeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCloseTradeRecord::CopyFrom(const CTPCloseTradeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCloseTradeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCloseTradeRecord::IsInitialized() const {
  return true;
}

void CTPCloseTradeRecord::Swap(CTPCloseTradeRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCloseTradeRecord::InternalSwap(CTPCloseTradeRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  open_trade_id_.Swap(&other->open_trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  close_trade_id_.Swap(&other->close_trade_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_account_id_.Swap(&other->route_account_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(symbol_, other->symbol_);
  swap(open_order_id_, other->open_order_id_);
  swap(close_order_id_, other->close_order_id_);
  swap(direction_, other->direction_);
  swap(open_volume_, other->open_volume_);
  swap(open_amount_, other->open_amount_);
  swap(closed_amount_, other->closed_amount_);
  swap(closed_volume_, other->closed_volume_);
  swap(open_trading_day_, other->open_trading_day_);
  swap(open_time_, other->open_time_);
  swap(open_trade_type_, other->open_trade_type_);
  swap(open_hedge_type_, other->open_hedge_type_);
  swap(close_time_, other->close_time_);
  swap(close_trading_day_, other->close_trading_day_);
  swap(close_trade_type_, other->close_trade_type_);
  swap(close_profit_, other->close_profit_);
  swap(close_hedge_type_, other->close_hedge_type_);
  swap(currency_type_, other->currency_type_);
  swap(pre_settlement_price_, other->pre_settlement_price_);
  swap(open_commission_, other->open_commission_);
  swap(close_commission_, other->close_commission_);
  swap(margin_, other->margin_);
  swap(initial_open_amount_, other->initial_open_amount_);
  swap(frozen_interest_, other->frozen_interest_);
  swap(position_profit_, other->position_profit_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPCloseTradeRecord::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCloseTradeRecordList::InitAsDefaultInstance() {
}
class CTPCloseTradeRecordList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCloseTradeRecordList::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCloseTradeRecordList::CTPCloseTradeRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCloseTradeRecordList)
}
CTPCloseTradeRecordList::CTPCloseTradeRecordList(const CTPCloseTradeRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CTPCloseTradeRecordList)
}

void CTPCloseTradeRecordList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
}

CTPCloseTradeRecordList::~CTPCloseTradeRecordList() {
  // @@protoc_insertion_point(destructor:pb.CTPCloseTradeRecordList)
  SharedDtor();
}

void CTPCloseTradeRecordList::SharedDtor() {
}

void CTPCloseTradeRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCloseTradeRecordList& CTPCloseTradeRecordList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCloseTradeRecordList_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCloseTradeRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCloseTradeRecordList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCloseTradeRecordList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pb.CTPCloseTradeRecord list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCloseTradeRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCloseTradeRecordList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.CTPCloseTradeRecord list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCloseTradeRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCloseTradeRecordList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCloseTradeRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCloseTradeRecordList)
}

::google::protobuf::uint8* CTPCloseTradeRecordList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCloseTradeRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCloseTradeRecordList)
  return target;
}

size_t CTPCloseTradeRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCloseTradeRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPCloseTradeRecord list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCloseTradeRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCloseTradeRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCloseTradeRecordList* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCloseTradeRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCloseTradeRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCloseTradeRecordList)
    MergeFrom(*source);
  }
}

void CTPCloseTradeRecordList::MergeFrom(const CTPCloseTradeRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCloseTradeRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void CTPCloseTradeRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCloseTradeRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCloseTradeRecordList::CopyFrom(const CTPCloseTradeRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCloseTradeRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCloseTradeRecordList::IsInitialized() const {
  return true;
}

void CTPCloseTradeRecordList::Swap(CTPCloseTradeRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCloseTradeRecordList::InternalSwap(CTPCloseTradeRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata CTPCloseTradeRecordList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPMarginRate::InitAsDefaultInstance() {
}
class CTPMarginRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPMarginRate::kExchangeFieldNumber;
const int CTPMarginRate::kSymbolFieldNumber;
const int CTPMarginRate::kProductFieldNumber;
const int CTPMarginRate::kLongByVolumeFieldNumber;
const int CTPMarginRate::kLongByAmountFieldNumber;
const int CTPMarginRate::kShortByVolumeFieldNumber;
const int CTPMarginRate::kShortByAmountFieldNumber;
const int CTPMarginRate::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPMarginRate::CTPMarginRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPMarginRate)
}
CTPMarginRate::CTPMarginRate(const CTPMarginRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  ::memcpy(&long_by_volume_, &from.long_by_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPMarginRate)
}

void CTPMarginRate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPMarginRate_ctp_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
}

CTPMarginRate::~CTPMarginRate() {
  // @@protoc_insertion_point(destructor:pb.CTPMarginRate)
  SharedDtor();
}

void CTPMarginRate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPMarginRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPMarginRate& CTPMarginRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPMarginRate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPMarginRate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPMarginRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPMarginRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exchange(static_cast<::pb::ExchangeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPMarginRate.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string product = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPMarginRate.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // double long_by_volume = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_long_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double long_by_amount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_long_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_volume = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_short_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_amount = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_short_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPMarginRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPMarginRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPMarginRate.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPMarginRate.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_amount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_volume = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_amount = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPMarginRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPMarginRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPMarginRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product(), output);
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->long_by_volume(), output);
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->long_by_amount(), output);
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->short_by_volume(), output);
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->short_by_amount(), output);
  }

  // int64 id = 10;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPMarginRate)
}

::google::protobuf::uint8* CTPMarginRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPMarginRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPMarginRate.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->long_by_volume(), target);
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->long_by_amount(), target);
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->short_by_volume(), target);
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->short_by_amount(), target);
  }

  // int64 id = 10;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPMarginRate)
  return target;
}

size_t CTPMarginRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPMarginRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string product = 3;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product());
  }

  // double long_by_volume = 4;
  if (this->long_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double long_by_amount = 5;
  if (this->long_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_volume = 6;
  if (this->short_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_amount = 7;
  if (this->short_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  // int64 id = 10;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPMarginRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPMarginRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPMarginRate* source =
      ::google::protobuf::DynamicCastToGenerated<CTPMarginRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPMarginRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPMarginRate)
    MergeFrom(*source);
  }
}

void CTPMarginRate::MergeFrom(const CTPMarginRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPMarginRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  if (from.long_by_volume() != 0) {
    set_long_by_volume(from.long_by_volume());
  }
  if (from.long_by_amount() != 0) {
    set_long_by_amount(from.long_by_amount());
  }
  if (from.short_by_volume() != 0) {
    set_short_by_volume(from.short_by_volume());
  }
  if (from.short_by_amount() != 0) {
    set_short_by_amount(from.short_by_amount());
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CTPMarginRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPMarginRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPMarginRate::CopyFrom(const CTPMarginRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPMarginRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPMarginRate::IsInitialized() const {
  return true;
}

void CTPMarginRate::Swap(CTPMarginRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPMarginRate::InternalSwap(CTPMarginRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(long_by_volume_, other->long_by_volume_);
  swap(long_by_amount_, other->long_by_amount_);
  swap(short_by_volume_, other->short_by_volume_);
  swap(short_by_amount_, other->short_by_amount_);
  swap(exchange_, other->exchange_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CTPMarginRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPMarginItem::InitAsDefaultInstance() {
}
class CTPMarginItem::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPMarginItem::kLongByVolumeFieldNumber;
const int CTPMarginItem::kLongByAmountFieldNumber;
const int CTPMarginItem::kShortByVolumeFieldNumber;
const int CTPMarginItem::kShortByAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPMarginItem::CTPMarginItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPMarginItem)
}
CTPMarginItem::CTPMarginItem(const CTPMarginItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&long_by_volume_, &from.long_by_volume_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_by_amount_) -
    reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPMarginItem)
}

void CTPMarginItem::SharedCtor() {
  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_by_amount_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
}

CTPMarginItem::~CTPMarginItem() {
  // @@protoc_insertion_point(destructor:pb.CTPMarginItem)
  SharedDtor();
}

void CTPMarginItem::SharedDtor() {
}

void CTPMarginItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPMarginItem& CTPMarginItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPMarginItem_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPMarginItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&long_by_volume_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&short_by_amount_) -
      reinterpret_cast<char*>(&long_by_volume_)) + sizeof(short_by_amount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPMarginItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPMarginItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double long_by_volume = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_long_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double long_by_amount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_long_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_volume = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_short_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double short_by_amount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_short_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPMarginItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPMarginItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double long_by_volume = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double long_by_amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_volume = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double short_by_amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &short_by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPMarginItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPMarginItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPMarginItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->long_by_volume(), output);
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->long_by_amount(), output);
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->short_by_volume(), output);
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->short_by_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPMarginItem)
}

::google::protobuf::uint8* CTPMarginItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPMarginItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->long_by_volume(), target);
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->long_by_amount(), target);
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->short_by_volume(), target);
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->short_by_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPMarginItem)
  return target;
}

size_t CTPMarginItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPMarginItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double long_by_volume = 1;
  if (this->long_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double long_by_amount = 2;
  if (this->long_by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_volume = 3;
  if (this->short_by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double short_by_amount = 4;
  if (this->short_by_amount() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPMarginItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPMarginItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPMarginItem* source =
      ::google::protobuf::DynamicCastToGenerated<CTPMarginItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPMarginItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPMarginItem)
    MergeFrom(*source);
  }
}

void CTPMarginItem::MergeFrom(const CTPMarginItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPMarginItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.long_by_volume() != 0) {
    set_long_by_volume(from.long_by_volume());
  }
  if (from.long_by_amount() != 0) {
    set_long_by_amount(from.long_by_amount());
  }
  if (from.short_by_volume() != 0) {
    set_short_by_volume(from.short_by_volume());
  }
  if (from.short_by_amount() != 0) {
    set_short_by_amount(from.short_by_amount());
  }
}

void CTPMarginItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPMarginItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPMarginItem::CopyFrom(const CTPMarginItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPMarginItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPMarginItem::IsInitialized() const {
  return true;
}

void CTPMarginItem::Swap(CTPMarginItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPMarginItem::InternalSwap(CTPMarginItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(long_by_volume_, other->long_by_volume_);
  swap(long_by_amount_, other->long_by_amount_);
  swap(short_by_volume_, other->short_by_volume_);
  swap(short_by_amount_, other->short_by_amount_);
}

::google::protobuf::Metadata CTPMarginItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCommissionRateItem::InitAsDefaultInstance() {
}
class CTPCommissionRateItem::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCommissionRateItem::kByAmountFieldNumber;
const int CTPCommissionRateItem::kByVolumeFieldNumber;
const int CTPCommissionRateItem::kMinimumFieldNumber;
const int CTPCommissionRateItem::kOffsetFlagFieldNumber;
const int CTPCommissionRateItem::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCommissionRateItem::CTPCommissionRateItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCommissionRateItem)
}
CTPCommissionRateItem::CTPCommissionRateItem(const CTPCommissionRateItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tag().size() > 0) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&by_amount_, &from.by_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_flag_) -
    reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCommissionRateItem)
}

void CTPCommissionRateItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&by_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
}

CTPCommissionRateItem::~CTPCommissionRateItem() {
  // @@protoc_insertion_point(destructor:pb.CTPCommissionRateItem)
  SharedDtor();
}

void CTPCommissionRateItem::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPCommissionRateItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCommissionRateItem& CTPCommissionRateItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCommissionRateItem_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCommissionRateItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&by_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_flag_) -
      reinterpret_cast<char*>(&by_amount_)) + sizeof(offset_flag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCommissionRateItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCommissionRateItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double by_amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_by_amount(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double by_volume = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_by_volume(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double minimum = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_minimum(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .pb.CTPOffsetFlag offset_flag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_offset_flag(static_cast<::pb::CTPOffsetFlag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string tag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRateItem.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCommissionRateItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCommissionRateItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double by_amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &by_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double by_volume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &by_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double minimum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPOffsetFlag offset_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset_flag(static_cast< ::pb::CTPOffsetFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRateItem.tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCommissionRateItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCommissionRateItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCommissionRateItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->by_amount(), output);
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->by_volume(), output);
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minimum(), output);
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->offset_flag(), output);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRateItem.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCommissionRateItem)
}

::google::protobuf::uint8* CTPCommissionRateItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCommissionRateItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->by_amount(), target);
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->by_volume(), target);
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minimum(), target);
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->offset_flag(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRateItem.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCommissionRateItem)
  return target;
}

size_t CTPCommissionRateItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCommissionRateItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag());
  }

  // double by_amount = 1;
  if (this->by_amount() != 0) {
    total_size += 1 + 8;
  }

  // double by_volume = 2;
  if (this->by_volume() != 0) {
    total_size += 1 + 8;
  }

  // double minimum = 3;
  if (this->minimum() != 0) {
    total_size += 1 + 8;
  }

  // .pb.CTPOffsetFlag offset_flag = 4;
  if (this->offset_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCommissionRateItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCommissionRateItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCommissionRateItem* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCommissionRateItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCommissionRateItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCommissionRateItem)
    MergeFrom(*source);
  }
}

void CTPCommissionRateItem::MergeFrom(const CTPCommissionRateItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCommissionRateItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {

    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  if (from.by_amount() != 0) {
    set_by_amount(from.by_amount());
  }
  if (from.by_volume() != 0) {
    set_by_volume(from.by_volume());
  }
  if (from.minimum() != 0) {
    set_minimum(from.minimum());
  }
  if (from.offset_flag() != 0) {
    set_offset_flag(from.offset_flag());
  }
}

void CTPCommissionRateItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCommissionRateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCommissionRateItem::CopyFrom(const CTPCommissionRateItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCommissionRateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCommissionRateItem::IsInitialized() const {
  return true;
}

void CTPCommissionRateItem::Swap(CTPCommissionRateItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCommissionRateItem::InternalSwap(CTPCommissionRateItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(by_amount_, other->by_amount_);
  swap(by_volume_, other->by_volume_);
  swap(minimum_, other->minimum_);
  swap(offset_flag_, other->offset_flag_);
}

::google::protobuf::Metadata CTPCommissionRateItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPCommissionRate::InitAsDefaultInstance() {
}
class CTPCommissionRate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPCommissionRate::kExchangeFieldNumber;
const int CTPCommissionRate::kSymbolFieldNumber;
const int CTPCommissionRate::kProductFieldNumber;
const int CTPCommissionRate::kSettingsFieldNumber;
const int CTPCommissionRate::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPCommissionRate::CTPCommissionRate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPCommissionRate)
}
CTPCommissionRate::CTPCommissionRate(const CTPCommissionRate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product().size() > 0) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchange_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPCommissionRate)
}

void CTPCommissionRate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPCommissionRate_ctp_2eproto.base);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
}

CTPCommissionRate::~CTPCommissionRate() {
  // @@protoc_insertion_point(destructor:pb.CTPCommissionRate)
  SharedDtor();
}

void CTPCommissionRate::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CTPCommissionRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPCommissionRate& CTPCommissionRate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPCommissionRate_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPCommissionRate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchange_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exchange_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPCommissionRate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPCommissionRate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_exchange(static_cast<::pb::ExchangeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string symbol = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRate.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string product = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPCommissionRate.product");
        object = msg->mutable_product();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .pb.CTPCommissionRateItem settings = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCommissionRateItem::_InternalParse;
          object = msg->add_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // int64 id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPCommissionRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPCommissionRate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.ExchangeType exchange = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_exchange(static_cast< ::pb::ExchangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string symbol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRate.symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string product = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product().data(), static_cast<int>(this->product().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPCommissionRate.product"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCommissionRateItem settings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPCommissionRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPCommissionRate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPCommissionRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchange(), output);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->symbol(), output);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product(), output);
  }

  // repeated .pb.CTPCommissionRateItem settings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->settings(static_cast<int>(i)),
      output);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPCommissionRate)
}

::google::protobuf::uint8* CTPCommissionRate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPCommissionRate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchange(), target);
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // string product = 3;
  if (this->product().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product().data(), static_cast<int>(this->product().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPCommissionRate.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }

  // repeated .pb.CTPCommissionRateItem settings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->settings(static_cast<int>(i)), target);
  }

  // int64 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPCommissionRate)
  return target;
}

size_t CTPCommissionRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPCommissionRate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPCommissionRateItem settings = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  // string symbol = 2;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string product = 3;
  if (this->product().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product());
  }

  // int64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .pb.ExchangeType exchange = 1;
  if (this->exchange() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPCommissionRate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPCommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPCommissionRate* source =
      ::google::protobuf::DynamicCastToGenerated<CTPCommissionRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPCommissionRate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPCommissionRate)
    MergeFrom(*source);
  }
}

void CTPCommissionRate::MergeFrom(const CTPCommissionRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPCommissionRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.product().size() > 0) {

    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.exchange() != 0) {
    set_exchange(from.exchange());
  }
}

void CTPCommissionRate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPCommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPCommissionRate::CopyFrom(const CTPCommissionRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPCommissionRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPCommissionRate::IsInitialized() const {
  return true;
}

void CTPCommissionRate::Swap(CTPCommissionRate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPCommissionRate::InternalSwap(CTPCommissionRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_.Swap(&other->product_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(exchange_, other->exchange_);
}

::google::protobuf::Metadata CTPCommissionRate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingUnit::InitAsDefaultInstance() {
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->symbol_ = const_cast< ::pb::Symbol*>(
      ::pb::Symbol::internal_default_instance());
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->cr_ = const_cast< ::pb::CTPCommissionRate*>(
      ::pb::CTPCommissionRate::internal_default_instance());
  ::pb::_CTPTradingUnit_default_instance_._instance.get_mutable()->mr_ = const_cast< ::pb::CTPMarginRate*>(
      ::pb::CTPMarginRate::internal_default_instance());
}
class CTPTradingUnit::HasBitSetters {
 public:
  static const ::pb::Symbol& symbol(const CTPTradingUnit* msg);
  static const ::pb::CTPCommissionRate& cr(const CTPTradingUnit* msg);
  static const ::pb::CTPMarginRate& mr(const CTPTradingUnit* msg);
};

const ::pb::Symbol&
CTPTradingUnit::HasBitSetters::symbol(const CTPTradingUnit* msg) {
  return *msg->symbol_;
}
const ::pb::CTPCommissionRate&
CTPTradingUnit::HasBitSetters::cr(const CTPTradingUnit* msg) {
  return *msg->cr_;
}
const ::pb::CTPMarginRate&
CTPTradingUnit::HasBitSetters::mr(const CTPTradingUnit* msg) {
  return *msg->mr_;
}
void CTPTradingUnit::clear_symbol() {
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingUnit::kSymbolFieldNumber;
const int CTPTradingUnit::kPositionFieldNumber;
const int CTPTradingUnit::kOrderLinkListFieldNumber;
const int CTPTradingUnit::kPositionDetailListFieldNumber;
const int CTPTradingUnit::kHistoryCtrListFieldNumber;
const int CTPTradingUnit::kHistoryOrderListFieldNumber;
const int CTPTradingUnit::kHistoryTradeListFieldNumber;
const int CTPTradingUnit::kLastPriceFieldNumber;
const int CTPTradingUnit::kLastMdsUpdateTimeFieldNumber;
const int CTPTradingUnit::kPriceTickFieldNumber;
const int CTPTradingUnit::kVolumeMultipleFieldNumber;
const int CTPTradingUnit::kCrFieldNumber;
const int CTPTradingUnit::kMrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingUnit::CTPTradingUnit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingUnit)
}
CTPTradingUnit::CTPTradingUnit(const CTPTradingUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      position_(from.position_),
      order_link_list_(from.order_link_list_),
      position_detail_list_(from.position_detail_list_),
      history_ctr_list_(from.history_ctr_list_),
      history_order_list_(from.history_order_list_),
      history_trade_list_(from.history_trade_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbol()) {
    symbol_ = new ::pb::Symbol(*from.symbol_);
  } else {
    symbol_ = nullptr;
  }
  if (from.has_cr()) {
    cr_ = new ::pb::CTPCommissionRate(*from.cr_);
  } else {
    cr_ = nullptr;
  }
  if (from.has_mr()) {
    mr_ = new ::pb::CTPMarginRate(*from.mr_);
  } else {
    mr_ = nullptr;
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_multiple_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(volume_multiple_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingUnit)
}

void CTPTradingUnit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingUnit_ctp_2eproto.base);
  ::memset(&symbol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&symbol_)) + sizeof(volume_multiple_));
}

CTPTradingUnit::~CTPTradingUnit() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingUnit)
  SharedDtor();
}

void CTPTradingUnit::SharedDtor() {
  if (this != internal_default_instance()) delete symbol_;
  if (this != internal_default_instance()) delete cr_;
  if (this != internal_default_instance()) delete mr_;
}

void CTPTradingUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingUnit& CTPTradingUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingUnit_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  order_link_list_.Clear();
  position_detail_list_.Clear();
  history_ctr_list_.Clear();
  history_order_list_.Clear();
  history_trade_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && symbol_ != nullptr) {
    delete symbol_;
  }
  symbol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cr_ != nullptr) {
    delete cr_;
  }
  cr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mr_ != nullptr) {
    delete mr_;
  }
  mr_ = nullptr;
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_multiple_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(volume_multiple_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingUnit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingUnit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::Symbol::_InternalParse;
        object = msg->mutable_symbol();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.CTPPosition position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPPosition::_InternalParse;
          object = msg->add_position();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPOrderLink order_link_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrderLink::_InternalParse;
          object = msg->add_order_link_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_position_detail_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCloseTradeRecord::_InternalParse;
          object = msg->add_history_ctr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPOrder history_order_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPOrder::_InternalParse;
          object = msg->add_history_order_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPTradeReport history_trade_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradeReport::_InternalParse;
          object = msg->add_history_trade_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // double last_price = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_last_price(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int64 last_mds_update_time = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_last_mds_update_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double price_tick = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_price_tick(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 volume_multiple = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_volume_multiple(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.CTPCommissionRate cr = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPCommissionRate::_InternalParse;
        object = msg->mutable_cr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .pb.CTPMarginRate mr = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPMarginRate::_InternalParse;
        object = msg->mutable_mr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.Symbol symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPPosition position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrderLink order_link_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_order_link_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_ctr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPOrder history_order_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_order_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPTradeReport history_trade_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_trade_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double last_price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_mds_update_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_mds_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double price_tick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 volume_multiple = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPCommissionRate cr = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPMarginRate mr = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingUnit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::symbol(this), output);
  }

  // repeated .pb.CTPPosition position = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->position(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_link_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->order_link_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->position_detail_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_ctr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->history_ctr_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_order_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->history_order_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_trade_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->history_trade_list(static_cast<int>(i)),
      output);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->last_price(), output);
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_mds_update_time(), output);
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price_tick(), output);
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volume_multiple(), output);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::cr(this), output);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::mr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingUnit)
}

::google::protobuf::uint8* CTPTradingUnit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::symbol(this), target);
  }

  // repeated .pb.CTPPosition position = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->position(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->order_link_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->order_link_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->position_detail_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_ctr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->history_ctr_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_order_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->history_order_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_trade_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->history_trade_list(static_cast<int>(i)), target);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->last_price(), target);
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_mds_update_time(), target);
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price_tick(), target);
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volume_multiple(), target);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::cr(this), target);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::mr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingUnit)
  return target;
}

size_t CTPTradingUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPPosition position = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPOrderLink order_link_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->order_link_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->order_link_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCloseTradeRecord position_detail_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->position_detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position_detail_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCloseTradeRecord history_ctr_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->history_ctr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_ctr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPOrder history_order_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->history_order_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_order_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPTradeReport history_trade_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->history_trade_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_trade_list(static_cast<int>(i)));
    }
  }

  // .pb.Symbol symbol = 1;
  if (this->has_symbol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbol_);
  }

  // .pb.CTPCommissionRate cr = 14;
  if (this->has_cr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cr_);
  }

  // .pb.CTPMarginRate mr = 15;
  if (this->has_mr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mr_);
  }

  // double last_price = 10;
  if (this->last_price() != 0) {
    total_size += 1 + 8;
  }

  // int64 last_mds_update_time = 11;
  if (this->last_mds_update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_mds_update_time());
  }

  // double price_tick = 12;
  if (this->price_tick() != 0) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume_multiple());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingUnit* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingUnit)
    MergeFrom(*source);
  }
}

void CTPTradingUnit::MergeFrom(const CTPTradingUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  order_link_list_.MergeFrom(from.order_link_list_);
  position_detail_list_.MergeFrom(from.position_detail_list_);
  history_ctr_list_.MergeFrom(from.history_ctr_list_);
  history_order_list_.MergeFrom(from.history_order_list_);
  history_trade_list_.MergeFrom(from.history_trade_list_);
  if (from.has_symbol()) {
    mutable_symbol()->::pb::Symbol::MergeFrom(from.symbol());
  }
  if (from.has_cr()) {
    mutable_cr()->::pb::CTPCommissionRate::MergeFrom(from.cr());
  }
  if (from.has_mr()) {
    mutable_mr()->::pb::CTPMarginRate::MergeFrom(from.mr());
  }
  if (from.last_price() != 0) {
    set_last_price(from.last_price());
  }
  if (from.last_mds_update_time() != 0) {
    set_last_mds_update_time(from.last_mds_update_time());
  }
  if (from.price_tick() != 0) {
    set_price_tick(from.price_tick());
  }
  if (from.volume_multiple() != 0) {
    set_volume_multiple(from.volume_multiple());
  }
}

void CTPTradingUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingUnit::CopyFrom(const CTPTradingUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingUnit::IsInitialized() const {
  return true;
}

void CTPTradingUnit::Swap(CTPTradingUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingUnit::InternalSwap(CTPTradingUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&position_)->InternalSwap(CastToBase(&other->position_));
  CastToBase(&order_link_list_)->InternalSwap(CastToBase(&other->order_link_list_));
  CastToBase(&position_detail_list_)->InternalSwap(CastToBase(&other->position_detail_list_));
  CastToBase(&history_ctr_list_)->InternalSwap(CastToBase(&other->history_ctr_list_));
  CastToBase(&history_order_list_)->InternalSwap(CastToBase(&other->history_order_list_));
  CastToBase(&history_trade_list_)->InternalSwap(CastToBase(&other->history_trade_list_));
  swap(symbol_, other->symbol_);
  swap(cr_, other->cr_);
  swap(mr_, other->mr_);
  swap(last_price_, other->last_price_);
  swap(last_mds_update_time_, other->last_mds_update_time_);
  swap(price_tick_, other->price_tick_);
  swap(volume_multiple_, other->volume_multiple_);
}

::google::protobuf::Metadata CTPTradingUnit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPForceCloseTimeRule::InitAsDefaultInstance() {
}
class CTPForceCloseTimeRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPForceCloseTimeRule::kStartFieldNumber;
const int CTPForceCloseTimeRule::kEndFieldNumber;
const int CTPForceCloseTimeRule::kDisableOpenStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPForceCloseTimeRule::CTPForceCloseTimeRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPForceCloseTimeRule)
}
CTPForceCloseTimeRule::CTPForceCloseTimeRule(const CTPForceCloseTimeRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_open_start_) -
    reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPForceCloseTimeRule)
}

void CTPForceCloseTimeRule::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_start_) -
      reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
}

CTPForceCloseTimeRule::~CTPForceCloseTimeRule() {
  // @@protoc_insertion_point(destructor:pb.CTPForceCloseTimeRule)
  SharedDtor();
}

void CTPForceCloseTimeRule::SharedDtor() {
}

void CTPForceCloseTimeRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPForceCloseTimeRule& CTPForceCloseTimeRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPForceCloseTimeRule_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPForceCloseTimeRule::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_start_) -
      reinterpret_cast<char*>(&start_)) + sizeof(disable_open_start_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPForceCloseTimeRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPForceCloseTimeRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 disable_open_start = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_disable_open_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPForceCloseTimeRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPForceCloseTimeRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 disable_open_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disable_open_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPForceCloseTimeRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPForceCloseTimeRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPForceCloseTimeRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->disable_open_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPForceCloseTimeRule)
}

::google::protobuf::uint8* CTPForceCloseTimeRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPForceCloseTimeRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->disable_open_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPForceCloseTimeRule)
  return target;
}

size_t CTPForceCloseTimeRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPForceCloseTimeRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // int64 disable_open_start = 3;
  if (this->disable_open_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->disable_open_start());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPForceCloseTimeRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPForceCloseTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPForceCloseTimeRule* source =
      ::google::protobuf::DynamicCastToGenerated<CTPForceCloseTimeRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPForceCloseTimeRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPForceCloseTimeRule)
    MergeFrom(*source);
  }
}

void CTPForceCloseTimeRule::MergeFrom(const CTPForceCloseTimeRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPForceCloseTimeRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.disable_open_start() != 0) {
    set_disable_open_start(from.disable_open_start());
  }
}

void CTPForceCloseTimeRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPForceCloseTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPForceCloseTimeRule::CopyFrom(const CTPForceCloseTimeRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPForceCloseTimeRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPForceCloseTimeRule::IsInitialized() const {
  return true;
}

void CTPForceCloseTimeRule::Swap(CTPForceCloseTimeRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPForceCloseTimeRule::InternalSwap(CTPForceCloseTimeRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(disable_open_start_, other->disable_open_start_);
}

::google::protobuf::Metadata CTPForceCloseTimeRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingUnitOption::InitAsDefaultInstance() {
  ::pb::_CTPTradingUnitOption_default_instance_._instance.get_mutable()->margin_rate_ = const_cast< ::pb::CTPMarginItem*>(
      ::pb::CTPMarginItem::internal_default_instance());
}
class CTPTradingUnitOption::HasBitSetters {
 public:
  static const ::pb::CTPMarginItem& margin_rate(const CTPTradingUnitOption* msg);
};

const ::pb::CTPMarginItem&
CTPTradingUnitOption::HasBitSetters::margin_rate(const CTPTradingUnitOption* msg) {
  return *msg->margin_rate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingUnitOption::kLimitPriceDisableOpenFieldNumber;
const int CTPTradingUnitOption::kLimitPriceForceCloseFieldNumber;
const int CTPTradingUnitOption::kPrePositionPercentageThresholdFieldNumber;
const int CTPTradingUnitOption::kPrePositionThresholdFieldNumber;
const int CTPTradingUnitOption::kPreVolumePercentageThresholdFieldNumber;
const int CTPTradingUnitOption::kPreVolumeThresholdFieldNumber;
const int CTPTradingUnitOption::kSingleProductMarginWeightLimitFieldNumber;
const int CTPTradingUnitOption::kFcrListFieldNumber;
const int CTPTradingUnitOption::kDisableOpenFieldNumber;
const int CTPTradingUnitOption::kCrSettingsFieldNumber;
const int CTPTradingUnitOption::kMarginRateFieldNumber;
const int CTPTradingUnitOption::kStoplossCandidatesFieldNumber;
const int CTPTradingUnitOption::kTakeProfitCandidatesFieldNumber;
const int CTPTradingUnitOption::kVolumeCandidatesFieldNumber;
const int CTPTradingUnitOption::kDisableOpenSymbolListFieldNumber;
const int CTPTradingUnitOption::kDisableOpenClassListFieldNumber;
const int CTPTradingUnitOption::kOpenDaysLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingUnitOption::CTPTradingUnitOption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingUnitOption)
}
CTPTradingUnitOption::CTPTradingUnitOption(const CTPTradingUnitOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      fcr_list_(from.fcr_list_),
      cr_settings_(from.cr_settings_),
      stoploss_candidates_(from.stoploss_candidates_),
      take_profit_candidates_(from.take_profit_candidates_),
      volume_candidates_(from.volume_candidates_),
      disable_open_symbol_list_(from.disable_open_symbol_list_),
      disable_open_class_list_(from.disable_open_class_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_margin_rate()) {
    margin_rate_ = new ::pb::CTPMarginItem(*from.margin_rate_);
  } else {
    margin_rate_ = nullptr;
  }
  ::memcpy(&limit_price_disable_open_, &from.limit_price_disable_open_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_days_limit_) -
    reinterpret_cast<char*>(&limit_price_disable_open_)) + sizeof(open_days_limit_));
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingUnitOption)
}

void CTPTradingUnitOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  ::memset(&margin_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_days_limit_) -
      reinterpret_cast<char*>(&margin_rate_)) + sizeof(open_days_limit_));
}

CTPTradingUnitOption::~CTPTradingUnitOption() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingUnitOption)
  SharedDtor();
}

void CTPTradingUnitOption::SharedDtor() {
  if (this != internal_default_instance()) delete margin_rate_;
}

void CTPTradingUnitOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingUnitOption& CTPTradingUnitOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingUnitOption_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingUnitOption::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fcr_list_.Clear();
  cr_settings_.Clear();
  stoploss_candidates_.Clear();
  take_profit_candidates_.Clear();
  volume_candidates_.Clear();
  disable_open_symbol_list_.Clear();
  disable_open_class_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && margin_rate_ != nullptr) {
    delete margin_rate_;
  }
  margin_rate_ = nullptr;
  ::memset(&limit_price_disable_open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&open_days_limit_) -
      reinterpret_cast<char*>(&limit_price_disable_open_)) + sizeof(open_days_limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingUnitOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingUnitOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 limit_price_disable_open = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_limit_price_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 limit_price_force_close = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit_price_force_close(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double pre_position_percentage_threshold = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_pre_position_percentage_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_position_threshold = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_pre_position_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_volume_percentage_threshold = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_pre_volume_percentage_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double pre_volume_threshold = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_pre_volume_threshold(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double single_product_margin_weight_limit = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_single_product_margin_weight_limit(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPForceCloseTimeRule::_InternalParse;
          object = msg->add_fcr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // bool disable_open = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.CTPCommissionRateItem cr_settings = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPCommissionRateItem::_InternalParse;
          object = msg->add_cr_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // .pb.CTPMarginItem margin_rate = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPMarginItem::_InternalParse;
        object = msg->mutable_margin_rate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated int32 stoploss_candidates = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) == 98) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_stoploss_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        do {
          msg->add_stoploss_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 96 && (ptr += 1));
        break;
      }
      // repeated int32 take_profit_candidates = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) == 106) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_take_profit_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        do {
          msg->add_take_profit_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 104 && (ptr += 1));
        break;
      }
      // repeated int32 volume_candidates = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) == 114) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_volume_candidates();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        do {
          msg->add_volume_candidates(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 112 && (ptr += 1));
        break;
      }
      // repeated string disable_open_symbol_list = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPTradingUnitOption.disable_open_symbol_list");
          object = msg->add_disable_open_symbol_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // repeated string disable_open_class_list = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("pb.CTPTradingUnitOption.disable_open_class_list");
          object = msg->add_disable_open_class_list();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // int32 open_days_limit = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_open_days_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingUnitOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingUnitOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 limit_price_disable_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_price_disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit_price_force_close = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_price_force_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_position_percentage_threshold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_position_percentage_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_position_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_position_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_volume_percentage_threshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_volume_percentage_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pre_volume_threshold = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_volume_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double single_product_margin_weight_limit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &single_product_margin_weight_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fcr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPCommissionRateItem cr_settings = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cr_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.CTPMarginItem margin_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_margin_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stoploss_candidates = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoploss_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 98u, input, this->mutable_stoploss_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 take_profit_candidates = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_take_profit_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_take_profit_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 volume_candidates = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_volume_candidates())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 114u, input, this->mutable_volume_candidates())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string disable_open_symbol_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_open_symbol_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_open_symbol_list(this->disable_open_symbol_list_size() - 1).data(),
            static_cast<int>(this->disable_open_symbol_list(this->disable_open_symbol_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingUnitOption.disable_open_symbol_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string disable_open_class_list = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_disable_open_class_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disable_open_class_list(this->disable_open_class_list_size() - 1).data(),
            static_cast<int>(this->disable_open_class_list(this->disable_open_class_list_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingUnitOption.disable_open_class_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 open_days_limit = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_days_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingUnitOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingUnitOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingUnitOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit_price_disable_open(), output);
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit_price_force_close(), output);
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pre_position_percentage_threshold(), output);
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pre_position_threshold(), output);
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pre_volume_percentage_threshold(), output);
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pre_volume_threshold(), output);
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->single_product_margin_weight_limit(), output);
  }

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fcr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->fcr_list(static_cast<int>(i)),
      output);
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->disable_open(), output);
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->cr_settings(static_cast<int>(i)),
      output);
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::margin_rate(this), output);
  }

  // repeated int32 stoploss_candidates = 12;
  if (this->stoploss_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stoploss_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->stoploss_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stoploss_candidates(i), output);
  }

  // repeated int32 take_profit_candidates = 13;
  if (this->take_profit_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_take_profit_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->take_profit_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->take_profit_candidates(i), output);
  }

  // repeated int32 volume_candidates = 14;
  if (this->volume_candidates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_volume_candidates_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->volume_candidates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->volume_candidates(i), output);
  }

  // repeated string disable_open_symbol_list = 15;
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_symbol_list(i).data(), static_cast<int>(this->disable_open_symbol_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_symbol_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->disable_open_symbol_list(i), output);
  }

  // repeated string disable_open_class_list = 16;
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_class_list(i).data(), static_cast<int>(this->disable_open_class_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_class_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->disable_open_class_list(i), output);
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->open_days_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingUnitOption)
}

::google::protobuf::uint8* CTPTradingUnitOption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit_price_disable_open(), target);
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit_price_force_close(), target);
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pre_position_percentage_threshold(), target);
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pre_position_threshold(), target);
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pre_volume_percentage_threshold(), target);
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pre_volume_threshold(), target);
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->single_product_margin_weight_limit(), target);
  }

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fcr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->fcr_list(static_cast<int>(i)), target);
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->disable_open(), target);
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cr_settings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->cr_settings(static_cast<int>(i)), target);
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::margin_rate(this), target);
  }

  // repeated int32 stoploss_candidates = 12;
  if (this->stoploss_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _stoploss_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stoploss_candidates_, target);
  }

  // repeated int32 take_profit_candidates = 13;
  if (this->take_profit_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _take_profit_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->take_profit_candidates_, target);
  }

  // repeated int32 volume_candidates = 14;
  if (this->volume_candidates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _volume_candidates_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->volume_candidates_, target);
  }

  // repeated string disable_open_symbol_list = 15;
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_symbol_list(i).data(), static_cast<int>(this->disable_open_symbol_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_symbol_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->disable_open_symbol_list(i), target);
  }

  // repeated string disable_open_class_list = 16;
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disable_open_class_list(i).data(), static_cast<int>(this->disable_open_class_list(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingUnitOption.disable_open_class_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(16, this->disable_open_class_list(i), target);
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->open_days_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingUnitOption)
  return target;
}

size_t CTPTradingUnitOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingUnitOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.CTPForceCloseTimeRule fcr_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->fcr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fcr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPCommissionRateItem cr_settings = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->cr_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cr_settings(static_cast<int>(i)));
    }
  }

  // repeated int32 stoploss_candidates = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stoploss_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _stoploss_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 take_profit_candidates = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->take_profit_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _take_profit_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 volume_candidates = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->volume_candidates_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _volume_candidates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string disable_open_symbol_list = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->disable_open_symbol_list_size());
  for (int i = 0, n = this->disable_open_symbol_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_open_symbol_list(i));
  }

  // repeated string disable_open_class_list = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->disable_open_class_list_size());
  for (int i = 0, n = this->disable_open_class_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->disable_open_class_list(i));
  }

  // .pb.CTPMarginItem margin_rate = 11;
  if (this->has_margin_rate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *margin_rate_);
  }

  // int32 limit_price_disable_open = 1;
  if (this->limit_price_disable_open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_price_disable_open());
  }

  // int32 limit_price_force_close = 2;
  if (this->limit_price_force_close() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit_price_force_close());
  }

  // double pre_position_percentage_threshold = 3;
  if (this->pre_position_percentage_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_position_threshold = 4;
  if (this->pre_position_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_volume_percentage_threshold = 5;
  if (this->pre_volume_percentage_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double pre_volume_threshold = 6;
  if (this->pre_volume_threshold() != 0) {
    total_size += 1 + 8;
  }

  // double single_product_margin_weight_limit = 7;
  if (this->single_product_margin_weight_limit() != 0) {
    total_size += 1 + 8;
  }

  // bool disable_open = 9;
  if (this->disable_open() != 0) {
    total_size += 1 + 1;
  }

  // int32 open_days_limit = 17;
  if (this->open_days_limit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->open_days_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingUnitOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingUnitOption* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingUnitOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingUnitOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingUnitOption)
    MergeFrom(*source);
  }
}

void CTPTradingUnitOption::MergeFrom(const CTPTradingUnitOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fcr_list_.MergeFrom(from.fcr_list_);
  cr_settings_.MergeFrom(from.cr_settings_);
  stoploss_candidates_.MergeFrom(from.stoploss_candidates_);
  take_profit_candidates_.MergeFrom(from.take_profit_candidates_);
  volume_candidates_.MergeFrom(from.volume_candidates_);
  disable_open_symbol_list_.MergeFrom(from.disable_open_symbol_list_);
  disable_open_class_list_.MergeFrom(from.disable_open_class_list_);
  if (from.has_margin_rate()) {
    mutable_margin_rate()->::pb::CTPMarginItem::MergeFrom(from.margin_rate());
  }
  if (from.limit_price_disable_open() != 0) {
    set_limit_price_disable_open(from.limit_price_disable_open());
  }
  if (from.limit_price_force_close() != 0) {
    set_limit_price_force_close(from.limit_price_force_close());
  }
  if (from.pre_position_percentage_threshold() != 0) {
    set_pre_position_percentage_threshold(from.pre_position_percentage_threshold());
  }
  if (from.pre_position_threshold() != 0) {
    set_pre_position_threshold(from.pre_position_threshold());
  }
  if (from.pre_volume_percentage_threshold() != 0) {
    set_pre_volume_percentage_threshold(from.pre_volume_percentage_threshold());
  }
  if (from.pre_volume_threshold() != 0) {
    set_pre_volume_threshold(from.pre_volume_threshold());
  }
  if (from.single_product_margin_weight_limit() != 0) {
    set_single_product_margin_weight_limit(from.single_product_margin_weight_limit());
  }
  if (from.disable_open() != 0) {
    set_disable_open(from.disable_open());
  }
  if (from.open_days_limit() != 0) {
    set_open_days_limit(from.open_days_limit());
  }
}

void CTPTradingUnitOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingUnitOption::CopyFrom(const CTPTradingUnitOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingUnitOption::IsInitialized() const {
  return true;
}

void CTPTradingUnitOption::Swap(CTPTradingUnitOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingUnitOption::InternalSwap(CTPTradingUnitOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fcr_list_)->InternalSwap(CastToBase(&other->fcr_list_));
  CastToBase(&cr_settings_)->InternalSwap(CastToBase(&other->cr_settings_));
  stoploss_candidates_.InternalSwap(&other->stoploss_candidates_);
  take_profit_candidates_.InternalSwap(&other->take_profit_candidates_);
  volume_candidates_.InternalSwap(&other->volume_candidates_);
  disable_open_symbol_list_.InternalSwap(CastToBase(&other->disable_open_symbol_list_));
  disable_open_class_list_.InternalSwap(CastToBase(&other->disable_open_class_list_));
  swap(margin_rate_, other->margin_rate_);
  swap(limit_price_disable_open_, other->limit_price_disable_open_);
  swap(limit_price_force_close_, other->limit_price_force_close_);
  swap(pre_position_percentage_threshold_, other->pre_position_percentage_threshold_);
  swap(pre_position_threshold_, other->pre_position_threshold_);
  swap(pre_volume_percentage_threshold_, other->pre_volume_percentage_threshold_);
  swap(pre_volume_threshold_, other->pre_volume_threshold_);
  swap(single_product_margin_weight_limit_, other->single_product_margin_weight_limit_);
  swap(disable_open_, other->disable_open_);
  swap(open_days_limit_, other->open_days_limit_);
}

::google::protobuf::Metadata CTPTradingUnitOption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MarginCheckRule::InitAsDefaultInstance() {
}
class MarginCheckRule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarginCheckRule::kStartFieldNumber;
const int MarginCheckRule::kEndFieldNumber;
const int MarginCheckRule::kForceCloseOrderFieldNumber;
const int MarginCheckRule::kWarningLevelFieldNumber;
const int MarginCheckRule::kForceCloseLevelFieldNumber;
const int MarginCheckRule::kCommonBalanceMultipleFieldNumber;
const int MarginCheckRule::kDisableOpenUnderWarningLevelFieldNumber;
const int MarginCheckRule::kWarningLevelByPreferRatioFieldNumber;
const int MarginCheckRule::kForceCloseLevelByPreferRatioFieldNumber;
const int MarginCheckRule::kWarningLevelByMarginFieldNumber;
const int MarginCheckRule::kForceCloseLevelByMarginFieldNumber;
const int MarginCheckRule::kMarginCeilingFieldNumber;
const int MarginCheckRule::kPositionAmountCeilingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarginCheckRule::MarginCheckRule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MarginCheckRule)
}
MarginCheckRule::MarginCheckRule(const MarginCheckRule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_amount_ceiling_) -
    reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
  // @@protoc_insertion_point(copy_constructor:pb.MarginCheckRule)
}

void MarginCheckRule::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_amount_ceiling_) -
      reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
}

MarginCheckRule::~MarginCheckRule() {
  // @@protoc_insertion_point(destructor:pb.MarginCheckRule)
  SharedDtor();
}

void MarginCheckRule::SharedDtor() {
}

void MarginCheckRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarginCheckRule& MarginCheckRule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MarginCheckRule_ctp_2eproto.base);
  return *internal_default_instance();
}


void MarginCheckRule::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_amount_ceiling_) -
      reinterpret_cast<char*>(&start_)) + sizeof(position_amount_ceiling_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarginCheckRule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MarginCheckRule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 end = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_end(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 force_close_order = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_force_close_order(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double warning_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_warning_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_force_close_level(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double common_balance_multiple = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_common_balance_multiple(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool disable_open_under_warning_level = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_disable_open_under_warning_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double warning_level_by_prefer_ratio = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_warning_level_by_prefer_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level_by_prefer_ratio = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_force_close_level_by_prefer_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double warning_level_by_margin = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_warning_level_by_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double force_close_level_by_margin = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_force_close_level_by_margin(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double margin_ceiling = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_margin_ceiling(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double position_amount_ceiling = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 105) goto handle_unusual;
        msg->set_position_amount_ceiling(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarginCheckRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MarginCheckRule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force_close_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_close_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double common_balance_multiple = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &common_balance_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open_under_warning_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_under_warning_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level_by_prefer_ratio = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_by_prefer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level_by_prefer_ratio = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_by_prefer_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double warning_level_by_margin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &warning_level_by_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double force_close_level_by_margin = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_close_level_by_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double margin_ceiling = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_ceiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double position_amount_ceiling = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (105 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_amount_ceiling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MarginCheckRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MarginCheckRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarginCheckRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->force_close_order(), output);
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->warning_level(), output);
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->force_close_level(), output);
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->common_balance_multiple(), output);
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_open_under_warning_level(), output);
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->warning_level_by_prefer_ratio(), output);
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->force_close_level_by_prefer_ratio(), output);
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->warning_level_by_margin(), output);
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->force_close_level_by_margin(), output);
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->margin_ceiling(), output);
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->position_amount_ceiling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MarginCheckRule)
}

::google::protobuf::uint8* MarginCheckRule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MarginCheckRule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start(), target);
  }

  // int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->force_close_order(), target);
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->warning_level(), target);
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->force_close_level(), target);
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->common_balance_multiple(), target);
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_open_under_warning_level(), target);
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->warning_level_by_prefer_ratio(), target);
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->force_close_level_by_prefer_ratio(), target);
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->warning_level_by_margin(), target);
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->force_close_level_by_margin(), target);
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->margin_ceiling(), target);
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->position_amount_ceiling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MarginCheckRule)
  return target;
}

size_t MarginCheckRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.MarginCheckRule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->start());
  }

  // int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // double warning_level = 4;
  if (this->warning_level() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level = 5;
  if (this->force_close_level() != 0) {
    total_size += 1 + 8;
  }

  // int32 force_close_order = 3;
  if (this->force_close_order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force_close_order());
  }

  // bool disable_open_under_warning_level = 7;
  if (this->disable_open_under_warning_level() != 0) {
    total_size += 1 + 1;
  }

  // double common_balance_multiple = 6;
  if (this->common_balance_multiple() != 0) {
    total_size += 1 + 8;
  }

  // double warning_level_by_prefer_ratio = 8;
  if (this->warning_level_by_prefer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level_by_prefer_ratio = 9;
  if (this->force_close_level_by_prefer_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double warning_level_by_margin = 10;
  if (this->warning_level_by_margin() != 0) {
    total_size += 1 + 8;
  }

  // double force_close_level_by_margin = 11;
  if (this->force_close_level_by_margin() != 0) {
    total_size += 1 + 8;
  }

  // double margin_ceiling = 12;
  if (this->margin_ceiling() != 0) {
    total_size += 1 + 8;
  }

  // double position_amount_ceiling = 13;
  if (this->position_amount_ceiling() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarginCheckRule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.MarginCheckRule)
  GOOGLE_DCHECK_NE(&from, this);
  const MarginCheckRule* source =
      ::google::protobuf::DynamicCastToGenerated<MarginCheckRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.MarginCheckRule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.MarginCheckRule)
    MergeFrom(*source);
  }
}

void MarginCheckRule::MergeFrom(const MarginCheckRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.MarginCheckRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.warning_level() != 0) {
    set_warning_level(from.warning_level());
  }
  if (from.force_close_level() != 0) {
    set_force_close_level(from.force_close_level());
  }
  if (from.force_close_order() != 0) {
    set_force_close_order(from.force_close_order());
  }
  if (from.disable_open_under_warning_level() != 0) {
    set_disable_open_under_warning_level(from.disable_open_under_warning_level());
  }
  if (from.common_balance_multiple() != 0) {
    set_common_balance_multiple(from.common_balance_multiple());
  }
  if (from.warning_level_by_prefer_ratio() != 0) {
    set_warning_level_by_prefer_ratio(from.warning_level_by_prefer_ratio());
  }
  if (from.force_close_level_by_prefer_ratio() != 0) {
    set_force_close_level_by_prefer_ratio(from.force_close_level_by_prefer_ratio());
  }
  if (from.warning_level_by_margin() != 0) {
    set_warning_level_by_margin(from.warning_level_by_margin());
  }
  if (from.force_close_level_by_margin() != 0) {
    set_force_close_level_by_margin(from.force_close_level_by_margin());
  }
  if (from.margin_ceiling() != 0) {
    set_margin_ceiling(from.margin_ceiling());
  }
  if (from.position_amount_ceiling() != 0) {
    set_position_amount_ceiling(from.position_amount_ceiling());
  }
}

void MarginCheckRule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.MarginCheckRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarginCheckRule::CopyFrom(const MarginCheckRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.MarginCheckRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarginCheckRule::IsInitialized() const {
  return true;
}

void MarginCheckRule::Swap(MarginCheckRule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarginCheckRule::InternalSwap(MarginCheckRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(warning_level_, other->warning_level_);
  swap(force_close_level_, other->force_close_level_);
  swap(force_close_order_, other->force_close_order_);
  swap(disable_open_under_warning_level_, other->disable_open_under_warning_level_);
  swap(common_balance_multiple_, other->common_balance_multiple_);
  swap(warning_level_by_prefer_ratio_, other->warning_level_by_prefer_ratio_);
  swap(force_close_level_by_prefer_ratio_, other->force_close_level_by_prefer_ratio_);
  swap(warning_level_by_margin_, other->warning_level_by_margin_);
  swap(force_close_level_by_margin_, other->force_close_level_by_margin_);
  swap(margin_ceiling_, other->margin_ceiling_);
  swap(position_amount_ceiling_, other->position_amount_ceiling_);
}

::google::protobuf::Metadata MarginCheckRule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettlementUnitOption::InitAsDefaultInstance() {
}
class SettlementUnitOption::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettlementUnitOption::kIdFieldNumber;
const int SettlementUnitOption::kCommentFieldNumber;
const int SettlementUnitOption::kSettlementGroupFieldNumber;
const int SettlementUnitOption::kAvailableCheckLevelFieldNumber;
const int SettlementUnitOption::kForceCloseOnFieldNumber;
const int SettlementUnitOption::kMcrListFieldNumber;
const int SettlementUnitOption::kDisableOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettlementUnitOption::SettlementUnitOption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SettlementUnitOption)
}
SettlementUnitOption::SettlementUnitOption(const SettlementUnitOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      mcr_list_(from.mcr_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_open_) -
    reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
  // @@protoc_insertion_point(copy_constructor:pb.SettlementUnitOption)
}

void SettlementUnitOption::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettlementUnitOption_ctp_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
}

SettlementUnitOption::~SettlementUnitOption() {
  // @@protoc_insertion_point(destructor:pb.SettlementUnitOption)
  SharedDtor();
}

void SettlementUnitOption::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SettlementUnitOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettlementUnitOption& SettlementUnitOption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettlementUnitOption_ctp_2eproto.base);
  return *internal_default_instance();
}


void SettlementUnitOption::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcr_list_.Clear();
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_open_) -
      reinterpret_cast<char*>(&id_)) + sizeof(disable_open_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettlementUnitOption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettlementUnitOption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.SettlementUnitOption.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 settlement_group = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_settlement_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 available_check_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_available_check_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool force_close_on = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_force_close_on(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .pb.MarginCheckRule mcr_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::MarginCheckRule::_InternalParse;
          object = msg->add_mcr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // bool disable_open = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_disable_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettlementUnitOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SettlementUnitOption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.SettlementUnitOption.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 settlement_group = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlement_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 available_check_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &available_check_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force_close_on = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_close_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MarginCheckRule mcr_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mcr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_open = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SettlementUnitOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SettlementUnitOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettlementUnitOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SettlementUnitOption.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->settlement_group(), output);
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->available_check_level(), output);
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->force_close_on(), output);
  }

  // repeated .pb.MarginCheckRule mcr_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mcr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->mcr_list(static_cast<int>(i)),
      output);
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->disable_open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SettlementUnitOption)
}

::google::protobuf::uint8* SettlementUnitOption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SettlementUnitOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.SettlementUnitOption.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->settlement_group(), target);
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->available_check_level(), target);
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->force_close_on(), target);
  }

  // repeated .pb.MarginCheckRule mcr_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mcr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->mcr_list(static_cast<int>(i)), target);
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->disable_open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SettlementUnitOption)
  return target;
}

size_t SettlementUnitOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SettlementUnitOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MarginCheckRule mcr_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mcr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mcr_list(static_cast<int>(i)));
    }
  }

  // string comment = 2;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int32 settlement_group = 3;
  if (this->settlement_group() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->settlement_group());
  }

  // int32 available_check_level = 4;
  if (this->available_check_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->available_check_level());
  }

  // bool force_close_on = 5;
  if (this->force_close_on() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_open = 7;
  if (this->disable_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettlementUnitOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SettlementUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  const SettlementUnitOption* source =
      ::google::protobuf::DynamicCastToGenerated<SettlementUnitOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SettlementUnitOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SettlementUnitOption)
    MergeFrom(*source);
  }
}

void SettlementUnitOption::MergeFrom(const SettlementUnitOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SettlementUnitOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mcr_list_.MergeFrom(from.mcr_list_);
  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.settlement_group() != 0) {
    set_settlement_group(from.settlement_group());
  }
  if (from.available_check_level() != 0) {
    set_available_check_level(from.available_check_level());
  }
  if (from.force_close_on() != 0) {
    set_force_close_on(from.force_close_on());
  }
  if (from.disable_open() != 0) {
    set_disable_open(from.disable_open());
  }
}

void SettlementUnitOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SettlementUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlementUnitOption::CopyFrom(const SettlementUnitOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SettlementUnitOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlementUnitOption::IsInitialized() const {
  return true;
}

void SettlementUnitOption::Swap(SettlementUnitOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettlementUnitOption::InternalSwap(SettlementUnitOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mcr_list_)->InternalSwap(CastToBase(&other->mcr_list_));
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(settlement_group_, other->settlement_group_);
  swap(available_check_level_, other->available_check_level_);
  swap(force_close_on_, other->force_close_on_);
  swap(disable_open_, other->disable_open_);
}

::google::protobuf::Metadata SettlementUnitOption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingAccount::InitAsDefaultInstance() {
  ::pb::_CTPTradingAccount_default_instance_._instance.get_mutable()->summary_ = const_cast< ::pb::AccountMoneySummary*>(
      ::pb::AccountMoneySummary::internal_default_instance());
  ::pb::_CTPTradingAccount_default_instance_._instance.get_mutable()->options_ = const_cast< ::pb::SettlementUnitOption*>(
      ::pb::SettlementUnitOption::internal_default_instance());
}
class CTPTradingAccount::HasBitSetters {
 public:
  static const ::pb::AccountMoneySummary& summary(const CTPTradingAccount* msg);
  static const ::pb::SettlementUnitOption& options(const CTPTradingAccount* msg);
};

const ::pb::AccountMoneySummary&
CTPTradingAccount::HasBitSetters::summary(const CTPTradingAccount* msg) {
  return *msg->summary_;
}
const ::pb::SettlementUnitOption&
CTPTradingAccount::HasBitSetters::options(const CTPTradingAccount* msg) {
  return *msg->options_;
}
void CTPTradingAccount::clear_summary() {
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
}
void CTPTradingAccount::clear_mtr_list() {
  mtr_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingAccount::kSummaryFieldNumber;
const int CTPTradingAccount::kMtrListFieldNumber;
const int CTPTradingAccount::kTuListFieldNumber;
const int CTPTradingAccount::kLastSettleDateFieldNumber;
const int CTPTradingAccount::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingAccount::CTPTradingAccount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingAccount)
}
CTPTradingAccount::CTPTradingAccount(const CTPTradingAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      mtr_list_(from.mtr_list_),
      tu_list_(from.tu_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_summary()) {
    summary_ = new ::pb::AccountMoneySummary(*from.summary_);
  } else {
    summary_ = nullptr;
  }
  if (from.has_options()) {
    options_ = new ::pb::SettlementUnitOption(*from.options_);
  } else {
    options_ = nullptr;
  }
  last_settle_date_ = from.last_settle_date_;
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingAccount)
}

void CTPTradingAccount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingAccount_ctp_2eproto.base);
  ::memset(&summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_settle_date_) -
      reinterpret_cast<char*>(&summary_)) + sizeof(last_settle_date_));
}

CTPTradingAccount::~CTPTradingAccount() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingAccount)
  SharedDtor();
}

void CTPTradingAccount::SharedDtor() {
  if (this != internal_default_instance()) delete summary_;
  if (this != internal_default_instance()) delete options_;
}

void CTPTradingAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingAccount& CTPTradingAccount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingAccount_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mtr_list_.Clear();
  tu_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && summary_ != nullptr) {
    delete summary_;
  }
  summary_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  last_settle_date_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingAccount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingAccount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.AccountMoneySummary summary = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::AccountMoneySummary::_InternalParse;
        object = msg->mutable_summary();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .pb.MoneyTransferRecord mtr_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::MoneyTransferRecord::_InternalParse;
          object = msg->add_mtr_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .pb.CTPTradingUnit tu_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pb::CTPTradingUnit::_InternalParse;
          object = msg->add_tu_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int32 last_settle_date = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_last_settle_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .pb.SettlementUnitOption options = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::SettlementUnitOption::_InternalParse;
        object = msg->mutable_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingAccount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.AccountMoneySummary summary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.MoneyTransferRecord mtr_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mtr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pb.CTPTradingUnit tu_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tu_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_settle_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_settle_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pb.SettlementUnitOption options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingAccount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::summary(this), output);
  }

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mtr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->mtr_list(static_cast<int>(i)),
      output);
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tu_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tu_list(static_cast<int>(i)),
      output);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_settle_date(), output);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingAccount)
}

::google::protobuf::uint8* CTPTradingAccount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::summary(this), target);
  }

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mtr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->mtr_list(static_cast<int>(i)), target);
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tu_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tu_list(static_cast<int>(i)), target);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_settle_date(), target);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingAccount)
  return target;
}

size_t CTPTradingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingAccount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.MoneyTransferRecord mtr_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mtr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mtr_list(static_cast<int>(i)));
    }
  }

  // repeated .pb.CTPTradingUnit tu_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tu_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tu_list(static_cast<int>(i)));
    }
  }

  // .pb.AccountMoneySummary summary = 1;
  if (this->has_summary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *summary_);
  }

  // .pb.SettlementUnitOption options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // int32 last_settle_date = 4;
  if (this->last_settle_date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_settle_date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingAccount* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingAccount)
    MergeFrom(*source);
  }
}

void CTPTradingAccount::MergeFrom(const CTPTradingAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mtr_list_.MergeFrom(from.mtr_list_);
  tu_list_.MergeFrom(from.tu_list_);
  if (from.has_summary()) {
    mutable_summary()->::pb::AccountMoneySummary::MergeFrom(from.summary());
  }
  if (from.has_options()) {
    mutable_options()->::pb::SettlementUnitOption::MergeFrom(from.options());
  }
  if (from.last_settle_date() != 0) {
    set_last_settle_date(from.last_settle_date());
  }
}

void CTPTradingAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingAccount::CopyFrom(const CTPTradingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingAccount::IsInitialized() const {
  return true;
}

void CTPTradingAccount::Swap(CTPTradingAccount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingAccount::InternalSwap(CTPTradingAccount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mtr_list_)->InternalSwap(CastToBase(&other->mtr_list_));
  CastToBase(&tu_list_)->InternalSwap(CastToBase(&other->tu_list_));
  swap(summary_, other->summary_);
  swap(options_, other->options_);
  swap(last_settle_date_, other->last_settle_date_);
}

::google::protobuf::Metadata CTPTradingAccount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CTPTradingAccountSnapshot::InitAsDefaultInstance() {
  ::pb::_CTPTradingAccountSnapshot_default_instance_._instance.get_mutable()->account_ = const_cast< ::pb::CTPTradingAccount*>(
      ::pb::CTPTradingAccount::internal_default_instance());
}
class CTPTradingAccountSnapshot::HasBitSetters {
 public:
  static const ::pb::CTPTradingAccount& account(const CTPTradingAccountSnapshot* msg);
};

const ::pb::CTPTradingAccount&
CTPTradingAccountSnapshot::HasBitSetters::account(const CTPTradingAccountSnapshot* msg) {
  return *msg->account_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CTPTradingAccountSnapshot::kAccountFieldNumber;
const int CTPTradingAccountSnapshot::kTimeFieldNumber;
const int CTPTradingAccountSnapshot::kCommentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CTPTradingAccountSnapshot::CTPTradingAccountSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CTPTradingAccountSnapshot)
}
CTPTradingAccountSnapshot::CTPTradingAccountSnapshot(const CTPTradingAccountSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comment().size() > 0) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_account()) {
    account_ = new ::pb::CTPTradingAccount(*from.account_);
  } else {
    account_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:pb.CTPTradingAccountSnapshot)
}

void CTPTradingAccountSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&account_)) + sizeof(time_));
}

CTPTradingAccountSnapshot::~CTPTradingAccountSnapshot() {
  // @@protoc_insertion_point(destructor:pb.CTPTradingAccountSnapshot)
  SharedDtor();
}

void CTPTradingAccountSnapshot::SharedDtor() {
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
}

void CTPTradingAccountSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTPTradingAccountSnapshot& CTPTradingAccountSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CTPTradingAccountSnapshot_ctp_2eproto.base);
  return *internal_default_instance();
}


void CTPTradingAccountSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  time_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CTPTradingAccountSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CTPTradingAccountSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pb.CTPTradingAccount account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pb::CTPTradingAccount::_InternalParse;
        object = msg->mutable_account();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string comment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pb.CTPTradingAccountSnapshot.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CTPTradingAccountSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CTPTradingAccountSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pb.CTPTradingAccount account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pb.CTPTradingAccountSnapshot.comment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CTPTradingAccountSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CTPTradingAccountSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CTPTradingAccountSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::account(this), output);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingAccountSnapshot.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CTPTradingAccountSnapshot)
}

::google::protobuf::uint8* CTPTradingAccountSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CTPTradingAccountSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::account(this), target);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // string comment = 3;
  if (this->comment().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pb.CTPTradingAccountSnapshot.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CTPTradingAccountSnapshot)
  return target;
}

size_t CTPTradingAccountSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CTPTradingAccountSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string comment = 3;
  if (this->comment().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comment());
  }

  // .pb.CTPTradingAccount account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *account_);
  }

  // int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTPTradingAccountSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CTPTradingAccountSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CTPTradingAccountSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<CTPTradingAccountSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CTPTradingAccountSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CTPTradingAccountSnapshot)
    MergeFrom(*source);
  }
}

void CTPTradingAccountSnapshot::MergeFrom(const CTPTradingAccountSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CTPTradingAccountSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.comment().size() > 0) {

    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  if (from.has_account()) {
    mutable_account()->::pb::CTPTradingAccount::MergeFrom(from.account());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void CTPTradingAccountSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CTPTradingAccountSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTradingAccountSnapshot::CopyFrom(const CTPTradingAccountSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CTPTradingAccountSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTradingAccountSnapshot::IsInitialized() const {
  return true;
}

void CTPTradingAccountSnapshot::Swap(CTPTradingAccountSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CTPTradingAccountSnapshot::InternalSwap(CTPTradingAccountSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata CTPTradingAccountSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ctp_2eproto);
  return ::file_level_metadata_ctp_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pb::CTPOrderID* Arena::CreateMaybeMessage< ::pb::CTPOrderID >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderID >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrder* Arena::CreateMaybeMessage< ::pb::CTPOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrderList* Arena::CreateMaybeMessage< ::pb::CTPOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOrderLink* Arena::CreateMaybeMessage< ::pb::CTPOrderLink >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOrderLink >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCancelOrderRequest* Arena::CreateMaybeMessage< ::pb::CTPCancelOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCancelOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPOnRtnCancelOrder* Arena::CreateMaybeMessage< ::pb::CTPOnRtnCancelOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPOnRtnCancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradeReport* Arena::CreateMaybeMessage< ::pb::CTPTradeReport >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradeReport >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradeReportList* Arena::CreateMaybeMessage< ::pb::CTPTradeReportList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradeReportList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPositionSummation* Arena::CreateMaybeMessage< ::pb::CTPPositionSummation >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPositionSummation >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPosition* Arena::CreateMaybeMessage< ::pb::CTPPosition >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPPositionList* Arena::CreateMaybeMessage< ::pb::CTPPositionList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPPositionList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCloseTradeRecord* Arena::CreateMaybeMessage< ::pb::CTPCloseTradeRecord >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCloseTradeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCloseTradeRecordList* Arena::CreateMaybeMessage< ::pb::CTPCloseTradeRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCloseTradeRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPMarginRate* Arena::CreateMaybeMessage< ::pb::CTPMarginRate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPMarginRate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPMarginItem* Arena::CreateMaybeMessage< ::pb::CTPMarginItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPMarginItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCommissionRateItem* Arena::CreateMaybeMessage< ::pb::CTPCommissionRateItem >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCommissionRateItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPCommissionRate* Arena::CreateMaybeMessage< ::pb::CTPCommissionRate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPCommissionRate >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingUnit* Arena::CreateMaybeMessage< ::pb::CTPTradingUnit >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPForceCloseTimeRule* Arena::CreateMaybeMessage< ::pb::CTPForceCloseTimeRule >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPForceCloseTimeRule >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingUnitOption* Arena::CreateMaybeMessage< ::pb::CTPTradingUnitOption >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingUnitOption >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::MarginCheckRule* Arena::CreateMaybeMessage< ::pb::MarginCheckRule >(Arena* arena) {
  return Arena::CreateInternal< ::pb::MarginCheckRule >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SettlementUnitOption* Arena::CreateMaybeMessage< ::pb::SettlementUnitOption >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SettlementUnitOption >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingAccount* Arena::CreateMaybeMessage< ::pb::CTPTradingAccount >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CTPTradingAccountSnapshot* Arena::CreateMaybeMessage< ::pb::CTPTradingAccountSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CTPTradingAccountSnapshot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
