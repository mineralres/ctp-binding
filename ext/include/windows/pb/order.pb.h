// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef PROTOBUF_INCLUDED_order_2eproto
#define PROTOBUF_INCLUDED_order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_order_2eproto();
namespace pb {
class CancelOrderRequest;
class CancelOrderRequestDefaultTypeInternal;
extern CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
class ConditionOrder;
class ConditionOrderDefaultTypeInternal;
extern ConditionOrderDefaultTypeInternal _ConditionOrder_default_instance_;
class DemoOrder;
class DemoOrderDefaultTypeInternal;
extern DemoOrderDefaultTypeInternal _DemoOrder_default_instance_;
class JointOrder;
class JointOrderDefaultTypeInternal;
extern JointOrderDefaultTypeInternal _JointOrder_default_instance_;
class OnRtnCancelOrder;
class OnRtnCancelOrderDefaultTypeInternal;
extern OnRtnCancelOrderDefaultTypeInternal _OnRtnCancelOrder_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderID;
class OrderIDDefaultTypeInternal;
extern OrderIDDefaultTypeInternal _OrderID_default_instance_;
class OrderLink;
class OrderLinkDefaultTypeInternal;
extern OrderLinkDefaultTypeInternal _OrderLink_default_instance_;
class OrderList;
class OrderListDefaultTypeInternal;
extern OrderListDefaultTypeInternal _OrderList_default_instance_;
class TradeCmd;
class TradeCmdDefaultTypeInternal;
extern TradeCmdDefaultTypeInternal _TradeCmd_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::CancelOrderRequest* Arena::CreateMaybeMessage<::pb::CancelOrderRequest>(Arena*);
template<> ::pb::ConditionOrder* Arena::CreateMaybeMessage<::pb::ConditionOrder>(Arena*);
template<> ::pb::DemoOrder* Arena::CreateMaybeMessage<::pb::DemoOrder>(Arena*);
template<> ::pb::JointOrder* Arena::CreateMaybeMessage<::pb::JointOrder>(Arena*);
template<> ::pb::OnRtnCancelOrder* Arena::CreateMaybeMessage<::pb::OnRtnCancelOrder>(Arena*);
template<> ::pb::Order* Arena::CreateMaybeMessage<::pb::Order>(Arena*);
template<> ::pb::OrderID* Arena::CreateMaybeMessage<::pb::OrderID>(Arena*);
template<> ::pb::OrderLink* Arena::CreateMaybeMessage<::pb::OrderLink>(Arena*);
template<> ::pb::OrderList* Arena::CreateMaybeMessage<::pb::OrderList>(Arena*);
template<> ::pb::TradeCmd* Arena::CreateMaybeMessage<::pb::TradeCmd>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

enum OrderStatus {
  OS_DONE = 0,
  OS_PENDING_WITH_PARTIAL_DONE = 1,
  OS_CANCELED_WITH_PARTIAL_DONE = 2,
  OS_PENDING = 3,
  OS_CANCELED = 4,
  OS_UNKOWN = 5,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderStatus_IsValid(int value);
const OrderStatus OrderStatus_MIN = OS_DONE;
const OrderStatus OrderStatus_MAX = OS_UNKOWN;
const int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor();
inline const ::std::string& OrderStatus_Name(OrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderStatus_descriptor(), value);
}
inline bool OrderStatus_Parse(
    const ::std::string& name, OrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
enum OrderPriceType {
  OPT_LIMIT_PRICE = 0,
  OPT_MARKET_PRICE = 1,
  OPT_BEST_PRICE = 2,
  OPT_LAST_PRICE = 3,
  OrderPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderPriceType_IsValid(int value);
const OrderPriceType OrderPriceType_MIN = OPT_LIMIT_PRICE;
const OrderPriceType OrderPriceType_MAX = OPT_LAST_PRICE;
const int OrderPriceType_ARRAYSIZE = OrderPriceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderPriceType_descriptor();
inline const ::std::string& OrderPriceType_Name(OrderPriceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderPriceType_descriptor(), value);
}
inline bool OrderPriceType_Parse(
    const ::std::string& name, OrderPriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderPriceType>(
    OrderPriceType_descriptor(), name, value);
}
enum OffsetFlag {
  OF_NONE = 0,
  OF_OPEN = 1,
  OF_CLOSE = 2,
  OF_FORCE_CLOSE = 3,
  OF_CLOSE_TODAY = 4,
  OF_CLOSE_YESTERDAY = 5,
  OffsetFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OffsetFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OffsetFlag_IsValid(int value);
const OffsetFlag OffsetFlag_MIN = OF_NONE;
const OffsetFlag OffsetFlag_MAX = OF_CLOSE_YESTERDAY;
const int OffsetFlag_ARRAYSIZE = OffsetFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* OffsetFlag_descriptor();
inline const ::std::string& OffsetFlag_Name(OffsetFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    OffsetFlag_descriptor(), value);
}
inline bool OffsetFlag_Parse(
    const ::std::string& name, OffsetFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OffsetFlag>(
    OffsetFlag_descriptor(), name, value);
}
enum OrderDirection {
  OD_LONG = 0,
  OD_SHORT = 1,
  OrderDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderDirection_IsValid(int value);
const OrderDirection OrderDirection_MIN = OD_LONG;
const OrderDirection OrderDirection_MAX = OD_SHORT;
const int OrderDirection_ARRAYSIZE = OrderDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderDirection_descriptor();
inline const ::std::string& OrderDirection_Name(OrderDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderDirection_descriptor(), value);
}
inline bool OrderDirection_Parse(
    const ::std::string& name, OrderDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderDirection>(
    OrderDirection_descriptor(), name, value);
}
enum ForceCloseType {
  FCT_NOT = 0,
  FCT_NOT_ENOUGH_MARGIN = 1,
  FCT_client_over_position_limit = 2,
  FCT_broker_over_poisition_limit = 3,
  FCT_violation = 4,
  FCT_other = 5,
  FCT_person_deliver = 6,
  ForceCloseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ForceCloseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ForceCloseType_IsValid(int value);
const ForceCloseType ForceCloseType_MIN = FCT_NOT;
const ForceCloseType ForceCloseType_MAX = FCT_person_deliver;
const int ForceCloseType_ARRAYSIZE = ForceCloseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ForceCloseType_descriptor();
inline const ::std::string& ForceCloseType_Name(ForceCloseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ForceCloseType_descriptor(), value);
}
inline bool ForceCloseType_Parse(
    const ::std::string& name, ForceCloseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ForceCloseType>(
    ForceCloseType_descriptor(), name, value);
}
enum OrderSourceType {
  OST_CLIENT = 0,
  OST_ADMINISTRATOR = 1,
  OST_RISK_SRV = 2,
  OST_MOBILE = 3,
  OST_PC = 4,
  OST_SETTLEMENT_DERIVED = 5,
  OST_COMBINATION_DERIVED = 6,
  OST_MULTI_ROUTE_CLOSE_DERIVED = 7,
  OST_PLACEMENT_SHARE = 8,
  OST_REPURCHASE = 9,
  OST_CTP_UPLOAD = 10,
  OST_UNKOWN = 11,
  OrderSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OrderSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OrderSourceType_IsValid(int value);
const OrderSourceType OrderSourceType_MIN = OST_CLIENT;
const OrderSourceType OrderSourceType_MAX = OST_UNKOWN;
const int OrderSourceType_ARRAYSIZE = OrderSourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderSourceType_descriptor();
inline const ::std::string& OrderSourceType_Name(OrderSourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderSourceType_descriptor(), value);
}
inline bool OrderSourceType_Parse(
    const ::std::string& name, OrderSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderSourceType>(
    OrderSourceType_descriptor(), name, value);
}
enum ConditionOrderTriggerPriceType {
  COTPT_LAST_PRICE = 0,
  COTPT_BID_PRICE = 1,
  COTPT_ASK_PRICE = 2,
  ConditionOrderTriggerPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ConditionOrderTriggerPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ConditionOrderTriggerPriceType_IsValid(int value);
const ConditionOrderTriggerPriceType ConditionOrderTriggerPriceType_MIN = COTPT_LAST_PRICE;
const ConditionOrderTriggerPriceType ConditionOrderTriggerPriceType_MAX = COTPT_ASK_PRICE;
const int ConditionOrderTriggerPriceType_ARRAYSIZE = ConditionOrderTriggerPriceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConditionOrderTriggerPriceType_descriptor();
inline const ::std::string& ConditionOrderTriggerPriceType_Name(ConditionOrderTriggerPriceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConditionOrderTriggerPriceType_descriptor(), value);
}
inline bool ConditionOrderTriggerPriceType_Parse(
    const ::std::string& name, ConditionOrderTriggerPriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConditionOrderTriggerPriceType>(
    ConditionOrderTriggerPriceType_descriptor(), name, value);
}
enum ConditionOrderTriggerType {
  COTT_GREATER_THAN_OR_EQUAL = 0,
  COTT_LESS_THAN_OR_EQUAL = 1,
  ConditionOrderTriggerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ConditionOrderTriggerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ConditionOrderTriggerType_IsValid(int value);
const ConditionOrderTriggerType ConditionOrderTriggerType_MIN = COTT_GREATER_THAN_OR_EQUAL;
const ConditionOrderTriggerType ConditionOrderTriggerType_MAX = COTT_LESS_THAN_OR_EQUAL;
const int ConditionOrderTriggerType_ARRAYSIZE = ConditionOrderTriggerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConditionOrderTriggerType_descriptor();
inline const ::std::string& ConditionOrderTriggerType_Name(ConditionOrderTriggerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConditionOrderTriggerType_descriptor(), value);
}
inline bool ConditionOrderTriggerType_Parse(
    const ::std::string& name, ConditionOrderTriggerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConditionOrderTriggerType>(
    ConditionOrderTriggerType_descriptor(), name, value);
}
enum SendOrderPriceType {
  SOPT_BID_ASK = 0,
  SOPT_MARKET = 1,
  SOPT_BID_ASK_MINUS = 2,
  SendOrderPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SendOrderPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SendOrderPriceType_IsValid(int value);
const SendOrderPriceType SendOrderPriceType_MIN = SOPT_BID_ASK;
const SendOrderPriceType SendOrderPriceType_MAX = SOPT_BID_ASK_MINUS;
const int SendOrderPriceType_ARRAYSIZE = SendOrderPriceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendOrderPriceType_descriptor();
inline const ::std::string& SendOrderPriceType_Name(SendOrderPriceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendOrderPriceType_descriptor(), value);
}
inline bool SendOrderPriceType_Parse(
    const ::std::string& name, SendOrderPriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendOrderPriceType>(
    SendOrderPriceType_descriptor(), name, value);
}
enum TradeCmdType {
  TCT_ORDER = 0,
  TCT_CANCEL = 1,
  TCT_QUERY_BALANCE = 2,
  TCT_QUERY_POSITION_DETAIL = 3,
  TradeCmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TradeCmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TradeCmdType_IsValid(int value);
const TradeCmdType TradeCmdType_MIN = TCT_ORDER;
const TradeCmdType TradeCmdType_MAX = TCT_QUERY_POSITION_DETAIL;
const int TradeCmdType_ARRAYSIZE = TradeCmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradeCmdType_descriptor();
inline const ::std::string& TradeCmdType_Name(TradeCmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradeCmdType_descriptor(), value);
}
inline bool TradeCmdType_Parse(
    const ::std::string& name, TradeCmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeCmdType>(
    TradeCmdType_descriptor(), name, value);
}
// ===================================================================

class OrderID :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OrderID) */ {
 public:
  OrderID();
  virtual ~OrderID();

  OrderID(const OrderID& from);

  inline OrderID& operator=(const OrderID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderID(OrderID&& from) noexcept
    : OrderID() {
    *this = ::std::move(from);
  }

  inline OrderID& operator=(OrderID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderID* internal_default_instance() {
    return reinterpret_cast<const OrderID*>(
               &_OrderID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OrderID* other);
  friend void swap(OrderID& a, OrderID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderID* New() const final {
    return CreateMaybeMessage<OrderID>(nullptr);
  }

  OrderID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderID& from);
  void MergeFrom(const OrderID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 front_id = 1;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 1;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // int32 session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 order_ref = 3;
  void clear_order_ref();
  static const int kOrderRefFieldNumber = 3;
  ::google::protobuf::int32 order_ref() const;
  void set_order_ref(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OrderID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 order_ref_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class Order :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 3;
  void clear_account();
  static const int kAccountFieldNumber = 3;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string comment = 14;
  void clear_comment();
  static const int kCommentFieldNumber = 14;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string user_product_info = 20;
  void clear_user_product_info();
  static const int kUserProductInfoFieldNumber = 20;
  const ::std::string& user_product_info() const;
  void set_user_product_info(const ::std::string& value);
  #if LANG_CXX11
  void set_user_product_info(::std::string&& value);
  #endif
  void set_user_product_info(const char* value);
  void set_user_product_info(const char* value, size_t size);
  ::std::string* mutable_user_product_info();
  ::std::string* release_user_product_info();
  void set_allocated_user_product_info(::std::string* user_product_info);

  // string exchange_order_id = 23;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 23;
  const ::std::string& exchange_order_id() const;
  void set_exchange_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_order_id(::std::string&& value);
  #endif
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  ::std::string* mutable_exchange_order_id();
  ::std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(::std::string* exchange_order_id);

  // string route_account = 26;
  void clear_route_account();
  static const int kRouteAccountFieldNumber = 26;
  const ::std::string& route_account() const;
  void set_route_account(const ::std::string& value);
  #if LANG_CXX11
  void set_route_account(::std::string&& value);
  #endif
  void set_route_account(const char* value);
  void set_route_account(const char* value, size_t size);
  ::std::string* mutable_route_account();
  ::std::string* release_route_account();
  void set_allocated_route_account(::std::string* route_account);

  // string token = 34;
  void clear_token();
  static const int kTokenFieldNumber = 34;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string symbol_name = 40;
  void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 40;
  const ::std::string& symbol_name() const;
  void set_symbol_name(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol_name(::std::string&& value);
  #endif
  void set_symbol_name(const char* value);
  void set_symbol_name(const char* value, size_t size);
  ::std::string* mutable_symbol_name();
  ::std::string* release_symbol_name();
  void set_allocated_symbol_name(::std::string* symbol_name);

  // string reason_comment = 41;
  void clear_reason_comment();
  static const int kReasonCommentFieldNumber = 41;
  const ::std::string& reason_comment() const;
  void set_reason_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_reason_comment(::std::string&& value);
  #endif
  void set_reason_comment(const char* value);
  void set_reason_comment(const char* value, size_t size);
  ::std::string* mutable_reason_comment();
  ::std::string* release_reason_comment();
  void set_allocated_reason_comment(::std::string* reason_comment);

  // string account_name = 44;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 44;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // string ip = 45;
  void clear_ip();
  static const int kIpFieldNumber = 45;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string mac = 46;
  void clear_mac();
  static const int kMacFieldNumber = 46;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string branch = 47;
  void clear_branch();
  static const int kBranchFieldNumber = 47;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  #if LANG_CXX11
  void set_branch(::std::string&& value);
  #endif
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // string branch_name = 48;
  void clear_branch_name();
  static const int kBranchNameFieldNumber = 48;
  const ::std::string& branch_name() const;
  void set_branch_name(const ::std::string& value);
  #if LANG_CXX11
  void set_branch_name(::std::string&& value);
  #endif
  void set_branch_name(const char* value);
  void set_branch_name(const char* value, size_t size);
  ::std::string* mutable_branch_name();
  ::std::string* release_branch_name();
  void set_allocated_branch_name(::std::string* branch_name);

  // string route_template_name = 50;
  void clear_route_template_name();
  static const int kRouteTemplateNameFieldNumber = 50;
  const ::std::string& route_template_name() const;
  void set_route_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_route_template_name(::std::string&& value);
  #endif
  void set_route_template_name(const char* value);
  void set_route_template_name(const char* value, size_t size);
  ::std::string* mutable_route_template_name();
  ::std::string* release_route_template_name();
  void set_allocated_route_template_name(::std::string* route_template_name);

  // string debug = 52;
  void clear_debug();
  static const int kDebugFieldNumber = 52;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // string user = 53;
  void clear_user();
  static const int kUserFieldNumber = 53;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // .pb.Symbol symbol = 1;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.OrderID id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::pb::OrderID& id() const;
  ::pb::OrderID* release_id();
  ::pb::OrderID* mutable_id();
  void set_allocated_id(::pb::OrderID* id);

  // .pb.OrderID local_order_id = 22;
  bool has_local_order_id() const;
  void clear_local_order_id();
  static const int kLocalOrderIdFieldNumber = 22;
  const ::pb::OrderID& local_order_id() const;
  ::pb::OrderID* release_local_order_id();
  ::pb::OrderID* mutable_local_order_id();
  void set_allocated_local_order_id(::pb::OrderID* local_order_id);

  // .pb.ProductID product_id = 37;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 37;
  const ::pb::ProductID& product_id() const;
  ::pb::ProductID* release_product_id();
  ::pb::ProductID* mutable_product_id();
  void set_allocated_product_id(::pb::ProductID* product_id);

  // .pb.OrderDirection direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  ::pb::OrderDirection direction() const;
  void set_direction(::pb::OrderDirection value);

  // .pb.OrderStatus status = 5;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::pb::OrderStatus status() const;
  void set_status(::pb::OrderStatus value);

  // double limit_price = 7;
  void clear_limit_price();
  static const int kLimitPriceFieldNumber = 7;
  double limit_price() const;
  void set_limit_price(double value);

  // .pb.OrderPriceType price_type = 6;
  void clear_price_type();
  static const int kPriceTypeFieldNumber = 6;
  ::pb::OrderPriceType price_type() const;
  void set_price_type(::pb::OrderPriceType value);

  // int32 volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // int32 volume_traded = 9;
  void clear_volume_traded();
  static const int kVolumeTradedFieldNumber = 9;
  ::google::protobuf::int32 volume_traded() const;
  void set_volume_traded(::google::protobuf::int32 value);

  // int32 volume_canceled = 10;
  void clear_volume_canceled();
  static const int kVolumeCanceledFieldNumber = 10;
  ::google::protobuf::int32 volume_canceled() const;
  void set_volume_canceled(::google::protobuf::int32 value);

  // double frozen_commission = 11;
  void clear_frozen_commission();
  static const int kFrozenCommissionFieldNumber = 11;
  double frozen_commission() const;
  void set_frozen_commission(double value);

  // int64 send_order_time = 12;
  void clear_send_order_time();
  static const int kSendOrderTimeFieldNumber = 12;
  ::google::protobuf::int64 send_order_time() const;
  void set_send_order_time(::google::protobuf::int64 value);

  // int32 trading_day = 13;
  void clear_trading_day();
  static const int kTradingDayFieldNumber = 13;
  ::google::protobuf::int32 trading_day() const;
  void set_trading_day(::google::protobuf::int32 value);

  // int32 request_id = 15;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 15;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int32 local_order_seq = 16;
  void clear_local_order_seq();
  static const int kLocalOrderSeqFieldNumber = 16;
  ::google::protobuf::int32 local_order_seq() const;
  void set_local_order_seq(::google::protobuf::int32 value);

  // .pb.ForceCloseType force_close_type = 17;
  void clear_force_close_type();
  static const int kForceCloseTypeFieldNumber = 17;
  ::pb::ForceCloseType force_close_type() const;
  void set_force_close_type(::pb::ForceCloseType value);

  // .pb.OrderSourceType order_source_type = 18;
  void clear_order_source_type();
  static const int kOrderSourceTypeFieldNumber = 18;
  ::pb::OrderSourceType order_source_type() const;
  void set_order_source_type(::pb::OrderSourceType value);

  // int32 order_hedge_type = 19;
  void clear_order_hedge_type();
  static const int kOrderHedgeTypeFieldNumber = 19;
  ::google::protobuf::int32 order_hedge_type() const;
  void set_order_hedge_type(::google::protobuf::int32 value);

  // int32 currency_type = 21;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 21;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // int32 time_condition_type = 24;
  void clear_time_condition_type();
  static const int kTimeConditionTypeFieldNumber = 24;
  ::google::protobuf::int32 time_condition_type() const;
  void set_time_condition_type(::google::protobuf::int32 value);

  // int32 is_pending = 25;
  void clear_is_pending();
  static const int kIsPendingFieldNumber = 25;
  ::google::protobuf::int32 is_pending() const;
  void set_is_pending(::google::protobuf::int32 value);

  // int32 local_type_id = 27;
  void clear_local_type_id();
  static const int kLocalTypeIdFieldNumber = 27;
  ::google::protobuf::int32 local_type_id() const;
  void set_local_type_id(::google::protobuf::int32 value);

  // double commission = 28;
  void clear_commission();
  static const int kCommissionFieldNumber = 28;
  double commission() const;
  void set_commission(double value);

  // double margin = 29;
  void clear_margin();
  static const int kMarginFieldNumber = 29;
  double margin() const;
  void set_margin(double value);

  // .pb.OffsetFlag offset_flag = 30;
  void clear_offset_flag();
  static const int kOffsetFlagFieldNumber = 30;
  ::pb::OffsetFlag offset_flag() const;
  void set_offset_flag(::pb::OffsetFlag value);

  // int32 error_code = 31;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 31;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // .pb.ProductType product_type = 32;
  void clear_product_type();
  static const int kProductTypeFieldNumber = 32;
  ::pb::ProductType product_type() const;
  void set_product_type(::pb::ProductType value);

  // int32 settlement_group = 33;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 33;
  ::google::protobuf::int32 settlement_group() const;
  void set_settlement_group(::google::protobuf::int32 value);

  // double traded_amount = 35;
  void clear_traded_amount();
  static const int kTradedAmountFieldNumber = 35;
  double traded_amount() const;
  void set_traded_amount(double value);

  // double price_tick = 38;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 38;
  double price_tick() const;
  void set_price_tick(double value);

  // double frozen_margin = 39;
  void clear_frozen_margin();
  static const int kFrozenMarginFieldNumber = 39;
  double frozen_margin() const;
  void set_frozen_margin(double value);

  // double stamp_tax = 42;
  void clear_stamp_tax();
  static const int kStampTaxFieldNumber = 42;
  double stamp_tax() const;
  void set_stamp_tax(double value);

  // double transfer_fee = 43;
  void clear_transfer_fee();
  static const int kTransferFeeFieldNumber = 43;
  double transfer_fee() const;
  void set_transfer_fee(double value);

  // int32 volume_multiple = 36;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 36;
  ::google::protobuf::int32 volume_multiple() const;
  void set_volume_multiple(::google::protobuf::int32 value);

  // .pb.TradingAccountType trading_account_type = 51;
  void clear_trading_account_type();
  static const int kTradingAccountTypeFieldNumber = 51;
  ::pb::TradingAccountType trading_account_type() const;
  void set_trading_account_type(::pb::TradingAccountType value);

  // int64 route_template_id = 49;
  void clear_route_template_id();
  static const int kRouteTemplateIdFieldNumber = 49;
  ::google::protobuf::int64 route_template_id() const;
  void set_route_template_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.Order)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr user_product_info_;
  ::google::protobuf::internal::ArenaStringPtr exchange_order_id_;
  ::google::protobuf::internal::ArenaStringPtr route_account_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr symbol_name_;
  ::google::protobuf::internal::ArenaStringPtr reason_comment_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  ::google::protobuf::internal::ArenaStringPtr branch_name_;
  ::google::protobuf::internal::ArenaStringPtr route_template_name_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::pb::Symbol* symbol_;
  ::pb::OrderID* id_;
  ::pb::OrderID* local_order_id_;
  ::pb::ProductID* product_id_;
  int direction_;
  int status_;
  double limit_price_;
  int price_type_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 volume_traded_;
  ::google::protobuf::int32 volume_canceled_;
  double frozen_commission_;
  ::google::protobuf::int64 send_order_time_;
  ::google::protobuf::int32 trading_day_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 local_order_seq_;
  int force_close_type_;
  int order_source_type_;
  ::google::protobuf::int32 order_hedge_type_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 time_condition_type_;
  ::google::protobuf::int32 is_pending_;
  ::google::protobuf::int32 local_type_id_;
  double commission_;
  double margin_;
  int offset_flag_;
  ::google::protobuf::int32 error_code_;
  int product_type_;
  ::google::protobuf::int32 settlement_group_;
  double traded_amount_;
  double price_tick_;
  double frozen_margin_;
  double stamp_tax_;
  double transfer_fee_;
  ::google::protobuf::int32 volume_multiple_;
  int trading_account_type_;
  ::google::protobuf::int64 route_template_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OrderList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OrderList) */ {
 public:
  OrderList();
  virtual ~OrderList();

  OrderList(const OrderList& from);

  inline OrderList& operator=(const OrderList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderList(OrderList&& from) noexcept
    : OrderList() {
    *this = ::std::move(from);
  }

  inline OrderList& operator=(OrderList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderList* internal_default_instance() {
    return reinterpret_cast<const OrderList*>(
               &_OrderList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OrderList* other);
  friend void swap(OrderList& a, OrderList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderList* New() const final {
    return CreateMaybeMessage<OrderList>(nullptr);
  }

  OrderList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderList& from);
  void MergeFrom(const OrderList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Order list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pb::Order* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Order >*
      mutable_list();
  const ::pb::Order& list(int index) const;
  ::pb::Order* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pb::Order >&
      list() const;

  // @@protoc_insertion_point(class_scope:pb.OrderList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Order > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class JointOrder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.JointOrder) */ {
 public:
  JointOrder();
  virtual ~JointOrder();

  JointOrder(const JointOrder& from);

  inline JointOrder& operator=(const JointOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JointOrder(JointOrder&& from) noexcept
    : JointOrder() {
    *this = ::std::move(from);
  }

  inline JointOrder& operator=(JointOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const JointOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JointOrder* internal_default_instance() {
    return reinterpret_cast<const JointOrder*>(
               &_JointOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(JointOrder* other);
  friend void swap(JointOrder& a, JointOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JointOrder* New() const final {
    return CreateMaybeMessage<JointOrder>(nullptr);
  }

  JointOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JointOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JointOrder& from);
  void MergeFrom(const JointOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Order local_order = 1;
  bool has_local_order() const;
  void clear_local_order();
  static const int kLocalOrderFieldNumber = 1;
  const ::pb::Order& local_order() const;
  ::pb::Order* release_local_order();
  ::pb::Order* mutable_local_order();
  void set_allocated_local_order(::pb::Order* local_order);

  // .pb.Order exchange_order = 2;
  bool has_exchange_order() const;
  void clear_exchange_order();
  static const int kExchangeOrderFieldNumber = 2;
  const ::pb::Order& exchange_order() const;
  ::pb::Order* release_exchange_order();
  ::pb::Order* mutable_exchange_order();
  void set_allocated_exchange_order(::pb::Order* exchange_order);

  // @@protoc_insertion_point(class_scope:pb.JointOrder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Order* local_order_;
  ::pb::Order* exchange_order_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OrderLink :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OrderLink) */ {
 public:
  OrderLink();
  virtual ~OrderLink();

  OrderLink(const OrderLink& from);

  inline OrderLink& operator=(const OrderLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderLink(OrderLink&& from) noexcept
    : OrderLink() {
    *this = ::std::move(from);
  }

  inline OrderLink& operator=(OrderLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderLink* internal_default_instance() {
    return reinterpret_cast<const OrderLink*>(
               &_OrderLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OrderLink* other);
  friend void swap(OrderLink& a, OrderLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderLink* New() const final {
    return CreateMaybeMessage<OrderLink>(nullptr);
  }

  OrderLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderLink& from);
  void MergeFrom(const OrderLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.Order upstream = 2;
  int upstream_size() const;
  void clear_upstream();
  static const int kUpstreamFieldNumber = 2;
  ::pb::Order* mutable_upstream(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::Order >*
      mutable_upstream();
  const ::pb::Order& upstream(int index) const;
  ::pb::Order* add_upstream();
  const ::google::protobuf::RepeatedPtrField< ::pb::Order >&
      upstream() const;

  // .pb.Order local = 1;
  bool has_local() const;
  void clear_local();
  static const int kLocalFieldNumber = 1;
  const ::pb::Order& local() const;
  ::pb::Order* release_local();
  ::pb::Order* mutable_local();
  void set_allocated_local(::pb::Order* local);

  // @@protoc_insertion_point(class_scope:pb.OrderLink)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::Order > upstream_;
  ::pb::Order* local_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.CancelOrderRequest) */ {
 public:
  CancelOrderRequest();
  virtual ~CancelOrderRequest();

  CancelOrderRequest(const CancelOrderRequest& from);

  inline CancelOrderRequest& operator=(const CancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOrderRequest(CancelOrderRequest&& from) noexcept
    : CancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline CancelOrderRequest& operator=(CancelOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CancelOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOrderRequest*>(
               &_CancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CancelOrderRequest* other);
  friend void swap(CancelOrderRequest& a, CancelOrderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderRequest* New() const final {
    return CreateMaybeMessage<CancelOrderRequest>(nullptr);
  }

  CancelOrderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelOrderRequest& from);
  void MergeFrom(const CancelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string exchange_order_id = 7;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 7;
  const ::std::string& exchange_order_id() const;
  void set_exchange_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_order_id(::std::string&& value);
  #endif
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  ::std::string* mutable_exchange_order_id();
  ::std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(::std::string* exchange_order_id);

  // string token = 8;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string route_account = 9;
  void clear_route_account();
  static const int kRouteAccountFieldNumber = 9;
  const ::std::string& route_account() const;
  void set_route_account(const ::std::string& value);
  #if LANG_CXX11
  void set_route_account(::std::string&& value);
  #endif
  void set_route_account(const char* value);
  void set_route_account(const char* value, size_t size);
  ::std::string* mutable_route_account();
  ::std::string* release_route_account();
  void set_allocated_route_account(::std::string* route_account);

  // string user = 15;
  void clear_user();
  static const int kUserFieldNumber = 15;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // .pb.OrderID order_id = 2;
  bool has_order_id() const;
  void clear_order_id();
  static const int kOrderIdFieldNumber = 2;
  const ::pb::OrderID& order_id() const;
  ::pb::OrderID* release_order_id();
  ::pb::OrderID* mutable_order_id();
  void set_allocated_order_id(::pb::OrderID* order_id);

  // .pb.Symbol symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int32 front_id = 5;
  void clear_front_id();
  static const int kFrontIdFieldNumber = 5;
  ::google::protobuf::int32 front_id() const;
  void set_front_id(::google::protobuf::int32 value);

  // int32 session_id = 6;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 6;
  ::google::protobuf::int32 session_id() const;
  void set_session_id(::google::protobuf::int32 value);

  // int32 settlement_group = 10;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 10;
  ::google::protobuf::int32 settlement_group() const;
  void set_settlement_group(::google::protobuf::int32 value);

  // int64 company = 11;
  void clear_company();
  static const int kCompanyFieldNumber = 11;
  ::google::protobuf::int64 company() const;
  void set_company(::google::protobuf::int64 value);

  // int64 send_time = 12;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 12;
  ::google::protobuf::int64 send_time() const;
  void set_send_time(::google::protobuf::int64 value);

  // .pb.TradingAccountType user_type = 13;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 13;
  ::pb::TradingAccountType user_type() const;
  void set_user_type(::pb::TradingAccountType value);

  // @@protoc_insertion_point(class_scope:pb.CancelOrderRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_order_id_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr route_account_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::pb::OrderID* order_id_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 front_id_;
  ::google::protobuf::int32 session_id_;
  ::google::protobuf::int32 settlement_group_;
  ::google::protobuf::int64 company_;
  ::google::protobuf::int64 send_time_;
  int user_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class OnRtnCancelOrder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OnRtnCancelOrder) */ {
 public:
  OnRtnCancelOrder();
  virtual ~OnRtnCancelOrder();

  OnRtnCancelOrder(const OnRtnCancelOrder& from);

  inline OnRtnCancelOrder& operator=(const OnRtnCancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnRtnCancelOrder(OnRtnCancelOrder&& from) noexcept
    : OnRtnCancelOrder() {
    *this = ::std::move(from);
  }

  inline OnRtnCancelOrder& operator=(OnRtnCancelOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OnRtnCancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnRtnCancelOrder* internal_default_instance() {
    return reinterpret_cast<const OnRtnCancelOrder*>(
               &_OnRtnCancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OnRtnCancelOrder* other);
  friend void swap(OnRtnCancelOrder& a, OnRtnCancelOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnRtnCancelOrder* New() const final {
    return CreateMaybeMessage<OnRtnCancelOrder>(nullptr);
  }

  OnRtnCancelOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnRtnCancelOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnRtnCancelOrder& from);
  void MergeFrom(const OnRtnCancelOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnRtnCancelOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string exchange_order_id = 3;
  void clear_exchange_order_id();
  static const int kExchangeOrderIdFieldNumber = 3;
  const ::std::string& exchange_order_id() const;
  void set_exchange_order_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange_order_id(::std::string&& value);
  #endif
  void set_exchange_order_id(const char* value);
  void set_exchange_order_id(const char* value, size_t size);
  ::std::string* mutable_exchange_order_id();
  ::std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(::std::string* exchange_order_id);

  // string msg = 8;
  void clear_msg();
  static const int kMsgFieldNumber = 8;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // string route_account = 9;
  void clear_route_account();
  static const int kRouteAccountFieldNumber = 9;
  const ::std::string& route_account() const;
  void set_route_account(const ::std::string& value);
  #if LANG_CXX11
  void set_route_account(::std::string&& value);
  #endif
  void set_route_account(const char* value);
  void set_route_account(const char* value, size_t size);
  ::std::string* mutable_route_account();
  ::std::string* release_route_account();
  void set_allocated_route_account(::std::string* route_account);

  // string user = 70;
  void clear_user();
  static const int kUserFieldNumber = 70;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // .pb.OrderID OrderID = 2;
  bool has_orderid() const;
  void clear_orderid();
  static const int kOrderIDFieldNumber = 2;
  const ::pb::OrderID& orderid() const;
  ::pb::OrderID* release_orderid();
  ::pb::OrderID* mutable_orderid();
  void set_allocated_orderid(::pb::OrderID* orderid);

  // .pb.Symbol symbol = 4;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // int32 request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // int32 error_type = 6;
  void clear_error_type();
  static const int kErrorTypeFieldNumber = 6;
  ::google::protobuf::int32 error_type() const;
  void set_error_type(::google::protobuf::int32 value);

  // int32 error = 7;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // bool upstream_not_found = 10;
  void clear_upstream_not_found();
  static const int kUpstreamNotFoundFieldNumber = 10;
  bool upstream_not_found() const;
  void set_upstream_not_found(bool value);

  // @@protoc_insertion_point(class_scope:pb.OnRtnCancelOrder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_order_id_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr route_account_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::pb::OrderID* orderid_;
  ::pb::Symbol* symbol_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 error_type_;
  ::google::protobuf::int32 error_;
  bool upstream_not_found_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ConditionOrder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ConditionOrder) */ {
 public:
  ConditionOrder();
  virtual ~ConditionOrder();

  ConditionOrder(const ConditionOrder& from);

  inline ConditionOrder& operator=(const ConditionOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionOrder(ConditionOrder&& from) noexcept
    : ConditionOrder() {
    *this = ::std::move(from);
  }

  inline ConditionOrder& operator=(ConditionOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConditionOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionOrder* internal_default_instance() {
    return reinterpret_cast<const ConditionOrder*>(
               &_ConditionOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConditionOrder* other);
  friend void swap(ConditionOrder& a, ConditionOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionOrder* New() const final {
    return CreateMaybeMessage<ConditionOrder>(nullptr);
  }

  ConditionOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionOrder& from);
  void MergeFrom(const ConditionOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string symbol_name = 7;
  void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 7;
  const ::std::string& symbol_name() const;
  void set_symbol_name(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol_name(::std::string&& value);
  #endif
  void set_symbol_name(const char* value);
  void set_symbol_name(const char* value, size_t size);
  ::std::string* mutable_symbol_name();
  ::std::string* release_symbol_name();
  void set_allocated_symbol_name(::std::string* symbol_name);

  // string send_result = 19;
  void clear_send_result();
  static const int kSendResultFieldNumber = 19;
  const ::std::string& send_result() const;
  void set_send_result(const ::std::string& value);
  #if LANG_CXX11
  void set_send_result(::std::string&& value);
  #endif
  void set_send_result(const char* value);
  void set_send_result(const char* value, size_t size);
  ::std::string* mutable_send_result();
  ::std::string* release_send_result();
  void set_allocated_send_result(::std::string* send_result);

  // string tag = 21;
  void clear_tag();
  static const int kTagFieldNumber = 21;
  const ::std::string& tag() const;
  void set_tag(const ::std::string& value);
  #if LANG_CXX11
  void set_tag(::std::string&& value);
  #endif
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  ::std::string* mutable_tag();
  ::std::string* release_tag();
  void set_allocated_tag(::std::string* tag);

  // string ip = 25;
  void clear_ip();
  static const int kIpFieldNumber = 25;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string mac = 26;
  void clear_mac();
  static const int kMacFieldNumber = 26;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // string user_name = 27;
  void clear_user_name();
  static const int kUserNameFieldNumber = 27;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string user = 70;
  void clear_user();
  static const int kUserFieldNumber = 70;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // .pb.Symbol symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::pb::Symbol& symbol() const;
  ::pb::Symbol* release_symbol();
  ::pb::Symbol* mutable_symbol();
  void set_allocated_symbol(::pb::Symbol* symbol);

  // .pb.ProductID product_id = 9;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 9;
  const ::pb::ProductID& product_id() const;
  ::pb::ProductID* release_product_id();
  ::pb::ProductID* mutable_product_id();
  void set_allocated_product_id(::pb::ProductID* product_id);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // .pb.OrderDirection position_direction = 4;
  void clear_position_direction();
  static const int kPositionDirectionFieldNumber = 4;
  ::pb::OrderDirection position_direction() const;
  void set_position_direction(::pb::OrderDirection value);

  // .pb.OrderDirection direction = 5;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  ::pb::OrderDirection direction() const;
  void set_direction(::pb::OrderDirection value);

  // .pb.OffsetFlag offset_flag = 6;
  void clear_offset_flag();
  static const int kOffsetFlagFieldNumber = 6;
  ::pb::OffsetFlag offset_flag() const;
  void set_offset_flag(::pb::OffsetFlag value);

  // int32 volume_multiple = 8;
  void clear_volume_multiple();
  static const int kVolumeMultipleFieldNumber = 8;
  ::google::protobuf::int32 volume_multiple() const;
  void set_volume_multiple(::google::protobuf::int32 value);

  // double price_tick = 10;
  void clear_price_tick();
  static const int kPriceTickFieldNumber = 10;
  double price_tick() const;
  void set_price_tick(double value);

  // int64 triggered_time = 12;
  void clear_triggered_time();
  static const int kTriggeredTimeFieldNumber = 12;
  ::google::protobuf::int64 triggered_time() const;
  void set_triggered_time(::google::protobuf::int64 value);

  // double volume = 13;
  void clear_volume();
  static const int kVolumeFieldNumber = 13;
  double volume() const;
  void set_volume(double value);

  // double price = 14;
  void clear_price();
  static const int kPriceFieldNumber = 14;
  double price() const;
  void set_price(double value);

  // double trigger_condition_price = 15;
  void clear_trigger_condition_price();
  static const int kTriggerConditionPriceFieldNumber = 15;
  double trigger_condition_price() const;
  void set_trigger_condition_price(double value);

  // .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
  void clear_trigger_price_type();
  static const int kTriggerPriceTypeFieldNumber = 16;
  ::pb::ConditionOrderTriggerPriceType trigger_price_type() const;
  void set_trigger_price_type(::pb::ConditionOrderTriggerPriceType value);

  // .pb.ConditionOrderTriggerType trigger_type = 17;
  void clear_trigger_type();
  static const int kTriggerTypeFieldNumber = 17;
  ::pb::ConditionOrderTriggerType trigger_type() const;
  void set_trigger_type(::pb::ConditionOrderTriggerType value);

  // bool triggered = 11;
  void clear_triggered();
  static const int kTriggeredFieldNumber = 11;
  bool triggered() const;
  void set_triggered(bool value);

  // bool stop_loss = 24;
  void clear_stop_loss();
  static const int kStopLossFieldNumber = 24;
  bool stop_loss() const;
  void set_stop_loss(bool value);

  // .pb.SendOrderPriceType send_order_price_type = 18;
  void clear_send_order_price_type();
  static const int kSendOrderPriceTypeFieldNumber = 18;
  ::pb::SendOrderPriceType send_order_price_type() const;
  void set_send_order_price_type(::pb::SendOrderPriceType value);

  // int64 create_time = 20;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 20;
  ::google::protobuf::int64 create_time() const;
  void set_create_time(::google::protobuf::int64 value);

  // int64 deadline = 22;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 22;
  ::google::protobuf::int64 deadline() const;
  void set_deadline(::google::protobuf::int64 value);

  // int32 settlement_group = 23;
  void clear_settlement_group();
  static const int kSettlementGroupFieldNumber = 23;
  ::google::protobuf::int32 settlement_group() const;
  void set_settlement_group(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ConditionOrder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr symbol_name_;
  ::google::protobuf::internal::ArenaStringPtr send_result_;
  ::google::protobuf::internal::ArenaStringPtr tag_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::pb::Symbol* symbol_;
  ::pb::ProductID* product_id_;
  ::google::protobuf::int64 id_;
  int position_direction_;
  int direction_;
  int offset_flag_;
  ::google::protobuf::int32 volume_multiple_;
  double price_tick_;
  ::google::protobuf::int64 triggered_time_;
  double volume_;
  double price_;
  double trigger_condition_price_;
  int trigger_price_type_;
  int trigger_type_;
  bool triggered_;
  bool stop_loss_;
  int send_order_price_type_;
  ::google::protobuf::int64 create_time_;
  ::google::protobuf::int64 deadline_;
  ::google::protobuf::int32 settlement_group_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class TradeCmd :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.TradeCmd) */ {
 public:
  TradeCmd();
  virtual ~TradeCmd();

  TradeCmd(const TradeCmd& from);

  inline TradeCmd& operator=(const TradeCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeCmd(TradeCmd&& from) noexcept
    : TradeCmd() {
    *this = ::std::move(from);
  }

  inline TradeCmd& operator=(TradeCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TradeCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeCmd* internal_default_instance() {
    return reinterpret_cast<const TradeCmd*>(
               &_TradeCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TradeCmd* other);
  friend void swap(TradeCmd& a, TradeCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeCmd* New() const final {
    return CreateMaybeMessage<TradeCmd>(nullptr);
  }

  TradeCmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradeCmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradeCmd& from);
  void MergeFrom(const TradeCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  ::google::protobuf::int64 node_id() const;
  void set_node_id(::google::protobuf::int64 value);

  // int64 request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // .pb.TradeCmdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pb::TradeCmdType type() const;
  void set_type(::pb::TradeCmdType value);

  // @@protoc_insertion_point(class_scope:pb.TradeCmd)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 node_id_;
  ::google::protobuf::int64 request_id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class DemoOrder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.DemoOrder) */ {
 public:
  DemoOrder();
  virtual ~DemoOrder();

  DemoOrder(const DemoOrder& from);

  inline DemoOrder& operator=(const DemoOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DemoOrder(DemoOrder&& from) noexcept
    : DemoOrder() {
    *this = ::std::move(from);
  }

  inline DemoOrder& operator=(DemoOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DemoOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoOrder* internal_default_instance() {
    return reinterpret_cast<const DemoOrder*>(
               &_DemoOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DemoOrder* other);
  friend void swap(DemoOrder& a, DemoOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DemoOrder* New() const final {
    return CreateMaybeMessage<DemoOrder>(nullptr);
  }

  DemoOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DemoOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DemoOrder& from);
  void MergeFrom(const DemoOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.Order order = 1;
  bool has_order() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  const ::pb::Order& order() const;
  ::pb::Order* release_order();
  ::pb::Order* mutable_order();
  void set_allocated_order(::pb::Order* order);

  // .pb.MarketTimeRule time_rule = 6;
  bool has_time_rule() const;
  void clear_time_rule();
  static const int kTimeRuleFieldNumber = 6;
  const ::pb::MarketTimeRule& time_rule() const;
  ::pb::MarketTimeRule* release_time_rule();
  ::pb::MarketTimeRule* mutable_time_rule();
  void set_allocated_time_rule(::pb::MarketTimeRule* time_rule);

  // double upper_limit_price = 2;
  void clear_upper_limit_price();
  static const int kUpperLimitPriceFieldNumber = 2;
  double upper_limit_price() const;
  void set_upper_limit_price(double value);

  // double lower_limit_price = 3;
  void clear_lower_limit_price();
  static const int kLowerLimitPriceFieldNumber = 3;
  double lower_limit_price() const;
  void set_lower_limit_price(double value);

  // int32 min_limit_order_volume = 4;
  void clear_min_limit_order_volume();
  static const int kMinLimitOrderVolumeFieldNumber = 4;
  ::google::protobuf::int32 min_limit_order_volume() const;
  void set_min_limit_order_volume(::google::protobuf::int32 value);

  // int32 min_market_order_volume = 5;
  void clear_min_market_order_volume();
  static const int kMinMarketOrderVolumeFieldNumber = 5;
  ::google::protobuf::int32 min_market_order_volume() const;
  void set_min_market_order_volume(::google::protobuf::int32 value);

  // int32 update_trading_day = 7;
  void clear_update_trading_day();
  static const int kUpdateTradingDayFieldNumber = 7;
  ::google::protobuf::int32 update_trading_day() const;
  void set_update_trading_day(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.DemoOrder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::Order* order_;
  ::pb::MarketTimeRule* time_rule_;
  double upper_limit_price_;
  double lower_limit_price_;
  ::google::protobuf::int32 min_limit_order_volume_;
  ::google::protobuf::int32 min_market_order_volume_;
  ::google::protobuf::int32 update_trading_day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderID

// int32 front_id = 1;
inline void OrderID::clear_front_id() {
  front_id_ = 0;
}
inline ::google::protobuf::int32 OrderID::front_id() const {
  // @@protoc_insertion_point(field_get:pb.OrderID.front_id)
  return front_id_;
}
inline void OrderID::set_front_id(::google::protobuf::int32 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderID.front_id)
}

// int32 session_id = 2;
inline void OrderID::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 OrderID::session_id() const {
  // @@protoc_insertion_point(field_get:pb.OrderID.session_id)
  return session_id_;
}
inline void OrderID::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderID.session_id)
}

// int32 order_ref = 3;
inline void OrderID::clear_order_ref() {
  order_ref_ = 0;
}
inline ::google::protobuf::int32 OrderID::order_ref() const {
  // @@protoc_insertion_point(field_get:pb.OrderID.order_ref)
  return order_ref_;
}
inline void OrderID::set_order_ref(::google::protobuf::int32 value) {
  
  order_ref_ = value;
  // @@protoc_insertion_point(field_set:pb.OrderID.order_ref)
}

// -------------------------------------------------------------------

// Order

// .pb.Symbol symbol = 1;
inline bool Order::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& Order::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.Order.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* Order::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.Order.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* Order::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Order.symbol)
  return symbol_;
}
inline void Order::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.Order.symbol)
}

// .pb.OrderID id = 2;
inline bool Order::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void Order::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::pb::OrderID& Order::id() const {
  const ::pb::OrderID* p = id_;
  // @@protoc_insertion_point(field_get:pb.Order.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* Order::release_id() {
  // @@protoc_insertion_point(field_release:pb.Order.id)
  
  ::pb::OrderID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* Order::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Order.id)
  return id_;
}
inline void Order::set_allocated_id(::pb::OrderID* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:pb.Order.id)
}

// string account = 3;
inline void Order::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::account() const {
  // @@protoc_insertion_point(field_get:pb.Order.account)
  return account_.GetNoArena();
}
inline void Order::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.account)
}
#if LANG_CXX11
inline void Order::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.account)
}
#endif
inline void Order::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.account)
}
inline void Order::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.account)
}
inline ::std::string* Order::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_account() {
  // @@protoc_insertion_point(field_release:pb.Order.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.account)
}

// .pb.OrderDirection direction = 4;
inline void Order::clear_direction() {
  direction_ = 0;
}
inline ::pb::OrderDirection Order::direction() const {
  // @@protoc_insertion_point(field_get:pb.Order.direction)
  return static_cast< ::pb::OrderDirection >(direction_);
}
inline void Order::set_direction(::pb::OrderDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.direction)
}

// .pb.OrderStatus status = 5;
inline void Order::clear_status() {
  status_ = 0;
}
inline ::pb::OrderStatus Order::status() const {
  // @@protoc_insertion_point(field_get:pb.Order.status)
  return static_cast< ::pb::OrderStatus >(status_);
}
inline void Order::set_status(::pb::OrderStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.status)
}

// .pb.OrderPriceType price_type = 6;
inline void Order::clear_price_type() {
  price_type_ = 0;
}
inline ::pb::OrderPriceType Order::price_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.price_type)
  return static_cast< ::pb::OrderPriceType >(price_type_);
}
inline void Order::set_price_type(::pb::OrderPriceType value) {
  
  price_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.price_type)
}

// double limit_price = 7;
inline void Order::clear_limit_price() {
  limit_price_ = 0;
}
inline double Order::limit_price() const {
  // @@protoc_insertion_point(field_get:pb.Order.limit_price)
  return limit_price_;
}
inline void Order::set_limit_price(double value) {
  
  limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.limit_price)
}

// int32 volume = 8;
inline void Order::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 Order::volume() const {
  // @@protoc_insertion_point(field_get:pb.Order.volume)
  return volume_;
}
inline void Order::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.volume)
}

// int32 volume_traded = 9;
inline void Order::clear_volume_traded() {
  volume_traded_ = 0;
}
inline ::google::protobuf::int32 Order::volume_traded() const {
  // @@protoc_insertion_point(field_get:pb.Order.volume_traded)
  return volume_traded_;
}
inline void Order::set_volume_traded(::google::protobuf::int32 value) {
  
  volume_traded_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.volume_traded)
}

// int32 volume_canceled = 10;
inline void Order::clear_volume_canceled() {
  volume_canceled_ = 0;
}
inline ::google::protobuf::int32 Order::volume_canceled() const {
  // @@protoc_insertion_point(field_get:pb.Order.volume_canceled)
  return volume_canceled_;
}
inline void Order::set_volume_canceled(::google::protobuf::int32 value) {
  
  volume_canceled_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.volume_canceled)
}

// double frozen_commission = 11;
inline void Order::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double Order::frozen_commission() const {
  // @@protoc_insertion_point(field_get:pb.Order.frozen_commission)
  return frozen_commission_;
}
inline void Order::set_frozen_commission(double value) {
  
  frozen_commission_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.frozen_commission)
}

// int64 send_order_time = 12;
inline void Order::clear_send_order_time() {
  send_order_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::send_order_time() const {
  // @@protoc_insertion_point(field_get:pb.Order.send_order_time)
  return send_order_time_;
}
inline void Order::set_send_order_time(::google::protobuf::int64 value) {
  
  send_order_time_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.send_order_time)
}

// int32 trading_day = 13;
inline void Order::clear_trading_day() {
  trading_day_ = 0;
}
inline ::google::protobuf::int32 Order::trading_day() const {
  // @@protoc_insertion_point(field_get:pb.Order.trading_day)
  return trading_day_;
}
inline void Order::set_trading_day(::google::protobuf::int32 value) {
  
  trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.trading_day)
}

// string comment = 14;
inline void Order::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::comment() const {
  // @@protoc_insertion_point(field_get:pb.Order.comment)
  return comment_.GetNoArena();
}
inline void Order::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.comment)
}
#if LANG_CXX11
inline void Order::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.comment)
}
#endif
inline void Order::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.comment)
}
inline void Order::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.comment)
}
inline ::std::string* Order::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_comment() {
  // @@protoc_insertion_point(field_release:pb.Order.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.comment)
}

// int32 request_id = 15;
inline void Order::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 Order::request_id() const {
  // @@protoc_insertion_point(field_get:pb.Order.request_id)
  return request_id_;
}
inline void Order::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.request_id)
}

// int32 local_order_seq = 16;
inline void Order::clear_local_order_seq() {
  local_order_seq_ = 0;
}
inline ::google::protobuf::int32 Order::local_order_seq() const {
  // @@protoc_insertion_point(field_get:pb.Order.local_order_seq)
  return local_order_seq_;
}
inline void Order::set_local_order_seq(::google::protobuf::int32 value) {
  
  local_order_seq_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.local_order_seq)
}

// .pb.ForceCloseType force_close_type = 17;
inline void Order::clear_force_close_type() {
  force_close_type_ = 0;
}
inline ::pb::ForceCloseType Order::force_close_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.force_close_type)
  return static_cast< ::pb::ForceCloseType >(force_close_type_);
}
inline void Order::set_force_close_type(::pb::ForceCloseType value) {
  
  force_close_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.force_close_type)
}

// .pb.OrderSourceType order_source_type = 18;
inline void Order::clear_order_source_type() {
  order_source_type_ = 0;
}
inline ::pb::OrderSourceType Order::order_source_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.order_source_type)
  return static_cast< ::pb::OrderSourceType >(order_source_type_);
}
inline void Order::set_order_source_type(::pb::OrderSourceType value) {
  
  order_source_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.order_source_type)
}

// int32 order_hedge_type = 19;
inline void Order::clear_order_hedge_type() {
  order_hedge_type_ = 0;
}
inline ::google::protobuf::int32 Order::order_hedge_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.order_hedge_type)
  return order_hedge_type_;
}
inline void Order::set_order_hedge_type(::google::protobuf::int32 value) {
  
  order_hedge_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.order_hedge_type)
}

// string user_product_info = 20;
inline void Order::clear_user_product_info() {
  user_product_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::user_product_info() const {
  // @@protoc_insertion_point(field_get:pb.Order.user_product_info)
  return user_product_info_.GetNoArena();
}
inline void Order::set_user_product_info(const ::std::string& value) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.user_product_info)
}
#if LANG_CXX11
inline void Order::set_user_product_info(::std::string&& value) {
  
  user_product_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.user_product_info)
}
#endif
inline void Order::set_user_product_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.user_product_info)
}
inline void Order::set_user_product_info(const char* value, size_t size) {
  
  user_product_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.user_product_info)
}
inline ::std::string* Order::mutable_user_product_info() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.user_product_info)
  return user_product_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_user_product_info() {
  // @@protoc_insertion_point(field_release:pb.Order.user_product_info)
  
  return user_product_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_user_product_info(::std::string* user_product_info) {
  if (user_product_info != nullptr) {
    
  } else {
    
  }
  user_product_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_product_info);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.user_product_info)
}

// int32 currency_type = 21;
inline void Order::clear_currency_type() {
  currency_type_ = 0;
}
inline ::google::protobuf::int32 Order::currency_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.currency_type)
  return currency_type_;
}
inline void Order::set_currency_type(::google::protobuf::int32 value) {
  
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.currency_type)
}

// .pb.OrderID local_order_id = 22;
inline bool Order::has_local_order_id() const {
  return this != internal_default_instance() && local_order_id_ != nullptr;
}
inline void Order::clear_local_order_id() {
  if (GetArenaNoVirtual() == nullptr && local_order_id_ != nullptr) {
    delete local_order_id_;
  }
  local_order_id_ = nullptr;
}
inline const ::pb::OrderID& Order::local_order_id() const {
  const ::pb::OrderID* p = local_order_id_;
  // @@protoc_insertion_point(field_get:pb.Order.local_order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* Order::release_local_order_id() {
  // @@protoc_insertion_point(field_release:pb.Order.local_order_id)
  
  ::pb::OrderID* temp = local_order_id_;
  local_order_id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* Order::mutable_local_order_id() {
  
  if (local_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    local_order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Order.local_order_id)
  return local_order_id_;
}
inline void Order::set_allocated_local_order_id(::pb::OrderID* local_order_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_order_id_;
  }
  if (local_order_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_order_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_order_id, submessage_arena);
    }
    
  } else {
    
  }
  local_order_id_ = local_order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.Order.local_order_id)
}

// string exchange_order_id = 23;
inline void Order::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.Order.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void Order::set_exchange_order_id(const ::std::string& value) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.exchange_order_id)
}
#if LANG_CXX11
inline void Order::set_exchange_order_id(::std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.exchange_order_id)
}
#endif
inline void Order::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.exchange_order_id)
}
inline void Order::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.exchange_order_id)
}
inline ::std::string* Order::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.Order.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_exchange_order_id(::std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.exchange_order_id)
}

// int32 time_condition_type = 24;
inline void Order::clear_time_condition_type() {
  time_condition_type_ = 0;
}
inline ::google::protobuf::int32 Order::time_condition_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.time_condition_type)
  return time_condition_type_;
}
inline void Order::set_time_condition_type(::google::protobuf::int32 value) {
  
  time_condition_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.time_condition_type)
}

// int32 is_pending = 25;
inline void Order::clear_is_pending() {
  is_pending_ = 0;
}
inline ::google::protobuf::int32 Order::is_pending() const {
  // @@protoc_insertion_point(field_get:pb.Order.is_pending)
  return is_pending_;
}
inline void Order::set_is_pending(::google::protobuf::int32 value) {
  
  is_pending_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.is_pending)
}

// string route_account = 26;
inline void Order::clear_route_account() {
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::route_account() const {
  // @@protoc_insertion_point(field_get:pb.Order.route_account)
  return route_account_.GetNoArena();
}
inline void Order::set_route_account(const ::std::string& value) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.route_account)
}
#if LANG_CXX11
inline void Order::set_route_account(::std::string&& value) {
  
  route_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.route_account)
}
#endif
inline void Order::set_route_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.route_account)
}
inline void Order::set_route_account(const char* value, size_t size) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.route_account)
}
inline ::std::string* Order::mutable_route_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.route_account)
  return route_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_route_account() {
  // @@protoc_insertion_point(field_release:pb.Order.route_account)
  
  return route_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_route_account(::std::string* route_account) {
  if (route_account != nullptr) {
    
  } else {
    
  }
  route_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_account);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.route_account)
}

// int32 local_type_id = 27;
inline void Order::clear_local_type_id() {
  local_type_id_ = 0;
}
inline ::google::protobuf::int32 Order::local_type_id() const {
  // @@protoc_insertion_point(field_get:pb.Order.local_type_id)
  return local_type_id_;
}
inline void Order::set_local_type_id(::google::protobuf::int32 value) {
  
  local_type_id_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.local_type_id)
}

// double commission = 28;
inline void Order::clear_commission() {
  commission_ = 0;
}
inline double Order::commission() const {
  // @@protoc_insertion_point(field_get:pb.Order.commission)
  return commission_;
}
inline void Order::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.commission)
}

// double margin = 29;
inline void Order::clear_margin() {
  margin_ = 0;
}
inline double Order::margin() const {
  // @@protoc_insertion_point(field_get:pb.Order.margin)
  return margin_;
}
inline void Order::set_margin(double value) {
  
  margin_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.margin)
}

// .pb.OffsetFlag offset_flag = 30;
inline void Order::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::pb::OffsetFlag Order::offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.Order.offset_flag)
  return static_cast< ::pb::OffsetFlag >(offset_flag_);
}
inline void Order::set_offset_flag(::pb::OffsetFlag value) {
  
  offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.offset_flag)
}

// int32 error_code = 31;
inline void Order::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 Order::error_code() const {
  // @@protoc_insertion_point(field_get:pb.Order.error_code)
  return error_code_;
}
inline void Order::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.error_code)
}

// .pb.ProductType product_type = 32;
inline void Order::clear_product_type() {
  product_type_ = 0;
}
inline ::pb::ProductType Order::product_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.product_type)
  return static_cast< ::pb::ProductType >(product_type_);
}
inline void Order::set_product_type(::pb::ProductType value) {
  
  product_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.product_type)
}

// int32 settlement_group = 33;
inline void Order::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::google::protobuf::int32 Order::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.Order.settlement_group)
  return settlement_group_;
}
inline void Order::set_settlement_group(::google::protobuf::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.settlement_group)
}

// string token = 34;
inline void Order::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::token() const {
  // @@protoc_insertion_point(field_get:pb.Order.token)
  return token_.GetNoArena();
}
inline void Order::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.token)
}
#if LANG_CXX11
inline void Order::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.token)
}
#endif
inline void Order::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.token)
}
inline void Order::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.token)
}
inline ::std::string* Order::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_token() {
  // @@protoc_insertion_point(field_release:pb.Order.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.token)
}

// double traded_amount = 35;
inline void Order::clear_traded_amount() {
  traded_amount_ = 0;
}
inline double Order::traded_amount() const {
  // @@protoc_insertion_point(field_get:pb.Order.traded_amount)
  return traded_amount_;
}
inline void Order::set_traded_amount(double value) {
  
  traded_amount_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.traded_amount)
}

// int32 volume_multiple = 36;
inline void Order::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::google::protobuf::int32 Order::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.Order.volume_multiple)
  return volume_multiple_;
}
inline void Order::set_volume_multiple(::google::protobuf::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.volume_multiple)
}

// .pb.ProductID product_id = 37;
inline bool Order::has_product_id() const {
  return this != internal_default_instance() && product_id_ != nullptr;
}
inline const ::pb::ProductID& Order::product_id() const {
  const ::pb::ProductID* p = product_id_;
  // @@protoc_insertion_point(field_get:pb.Order.product_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* Order::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.Order.product_id)
  
  ::pb::ProductID* temp = product_id_;
  product_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* Order::mutable_product_id() {
  
  if (product_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.Order.product_id)
  return product_id_;
}
inline void Order::set_allocated_product_id(::pb::ProductID* product_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(product_id_);
  }
  if (product_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:pb.Order.product_id)
}

// double price_tick = 38;
inline void Order::clear_price_tick() {
  price_tick_ = 0;
}
inline double Order::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.Order.price_tick)
  return price_tick_;
}
inline void Order::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.price_tick)
}

// double frozen_margin = 39;
inline void Order::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double Order::frozen_margin() const {
  // @@protoc_insertion_point(field_get:pb.Order.frozen_margin)
  return frozen_margin_;
}
inline void Order::set_frozen_margin(double value) {
  
  frozen_margin_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.frozen_margin)
}

// string symbol_name = 40;
inline void Order::clear_symbol_name() {
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::symbol_name() const {
  // @@protoc_insertion_point(field_get:pb.Order.symbol_name)
  return symbol_name_.GetNoArena();
}
inline void Order::set_symbol_name(const ::std::string& value) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.symbol_name)
}
#if LANG_CXX11
inline void Order::set_symbol_name(::std::string&& value) {
  
  symbol_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.symbol_name)
}
#endif
inline void Order::set_symbol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.symbol_name)
}
inline void Order::set_symbol_name(const char* value, size_t size) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.symbol_name)
}
inline ::std::string* Order::mutable_symbol_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.symbol_name)
  return symbol_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_symbol_name() {
  // @@protoc_insertion_point(field_release:pb.Order.symbol_name)
  
  return symbol_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  symbol_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol_name);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.symbol_name)
}

// string reason_comment = 41;
inline void Order::clear_reason_comment() {
  reason_comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::reason_comment() const {
  // @@protoc_insertion_point(field_get:pb.Order.reason_comment)
  return reason_comment_.GetNoArena();
}
inline void Order::set_reason_comment(const ::std::string& value) {
  
  reason_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.reason_comment)
}
#if LANG_CXX11
inline void Order::set_reason_comment(::std::string&& value) {
  
  reason_comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.reason_comment)
}
#endif
inline void Order::set_reason_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.reason_comment)
}
inline void Order::set_reason_comment(const char* value, size_t size) {
  
  reason_comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.reason_comment)
}
inline ::std::string* Order::mutable_reason_comment() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.reason_comment)
  return reason_comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_reason_comment() {
  // @@protoc_insertion_point(field_release:pb.Order.reason_comment)
  
  return reason_comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_reason_comment(::std::string* reason_comment) {
  if (reason_comment != nullptr) {
    
  } else {
    
  }
  reason_comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason_comment);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.reason_comment)
}

// double stamp_tax = 42;
inline void Order::clear_stamp_tax() {
  stamp_tax_ = 0;
}
inline double Order::stamp_tax() const {
  // @@protoc_insertion_point(field_get:pb.Order.stamp_tax)
  return stamp_tax_;
}
inline void Order::set_stamp_tax(double value) {
  
  stamp_tax_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.stamp_tax)
}

// double transfer_fee = 43;
inline void Order::clear_transfer_fee() {
  transfer_fee_ = 0;
}
inline double Order::transfer_fee() const {
  // @@protoc_insertion_point(field_get:pb.Order.transfer_fee)
  return transfer_fee_;
}
inline void Order::set_transfer_fee(double value) {
  
  transfer_fee_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.transfer_fee)
}

// string account_name = 44;
inline void Order::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::account_name() const {
  // @@protoc_insertion_point(field_get:pb.Order.account_name)
  return account_name_.GetNoArena();
}
inline void Order::set_account_name(const ::std::string& value) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.account_name)
}
#if LANG_CXX11
inline void Order::set_account_name(::std::string&& value) {
  
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.account_name)
}
#endif
inline void Order::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.account_name)
}
inline void Order::set_account_name(const char* value, size_t size) {
  
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.account_name)
}
inline ::std::string* Order::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_account_name() {
  // @@protoc_insertion_point(field_release:pb.Order.account_name)
  
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_account_name(::std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.account_name)
}

// string ip = 45;
inline void Order::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::ip() const {
  // @@protoc_insertion_point(field_get:pb.Order.ip)
  return ip_.GetNoArena();
}
inline void Order::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.ip)
}
#if LANG_CXX11
inline void Order::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.ip)
}
#endif
inline void Order::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.ip)
}
inline void Order::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.ip)
}
inline ::std::string* Order::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_ip() {
  // @@protoc_insertion_point(field_release:pb.Order.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.ip)
}

// string mac = 46;
inline void Order::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::mac() const {
  // @@protoc_insertion_point(field_get:pb.Order.mac)
  return mac_.GetNoArena();
}
inline void Order::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.mac)
}
#if LANG_CXX11
inline void Order::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.mac)
}
#endif
inline void Order::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.mac)
}
inline void Order::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.mac)
}
inline ::std::string* Order::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_mac() {
  // @@protoc_insertion_point(field_release:pb.Order.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_mac(::std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.mac)
}

// string branch = 47;
inline void Order::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::branch() const {
  // @@protoc_insertion_point(field_get:pb.Order.branch)
  return branch_.GetNoArena();
}
inline void Order::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.branch)
}
#if LANG_CXX11
inline void Order::set_branch(::std::string&& value) {
  
  branch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.branch)
}
#endif
inline void Order::set_branch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.branch)
}
inline void Order::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.branch)
}
inline ::std::string* Order::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_branch() {
  // @@protoc_insertion_point(field_release:pb.Order.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_branch(::std::string* branch) {
  if (branch != nullptr) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.branch)
}

// string branch_name = 48;
inline void Order::clear_branch_name() {
  branch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::branch_name() const {
  // @@protoc_insertion_point(field_get:pb.Order.branch_name)
  return branch_name_.GetNoArena();
}
inline void Order::set_branch_name(const ::std::string& value) {
  
  branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.branch_name)
}
#if LANG_CXX11
inline void Order::set_branch_name(::std::string&& value) {
  
  branch_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.branch_name)
}
#endif
inline void Order::set_branch_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.branch_name)
}
inline void Order::set_branch_name(const char* value, size_t size) {
  
  branch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.branch_name)
}
inline ::std::string* Order::mutable_branch_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.branch_name)
  return branch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_branch_name() {
  // @@protoc_insertion_point(field_release:pb.Order.branch_name)
  
  return branch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_branch_name(::std::string* branch_name) {
  if (branch_name != nullptr) {
    
  } else {
    
  }
  branch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch_name);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.branch_name)
}

// int64 route_template_id = 49;
inline void Order::clear_route_template_id() {
  route_template_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::route_template_id() const {
  // @@protoc_insertion_point(field_get:pb.Order.route_template_id)
  return route_template_id_;
}
inline void Order::set_route_template_id(::google::protobuf::int64 value) {
  
  route_template_id_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.route_template_id)
}

// string route_template_name = 50;
inline void Order::clear_route_template_name() {
  route_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::route_template_name() const {
  // @@protoc_insertion_point(field_get:pb.Order.route_template_name)
  return route_template_name_.GetNoArena();
}
inline void Order::set_route_template_name(const ::std::string& value) {
  
  route_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.route_template_name)
}
#if LANG_CXX11
inline void Order::set_route_template_name(::std::string&& value) {
  
  route_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.route_template_name)
}
#endif
inline void Order::set_route_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.route_template_name)
}
inline void Order::set_route_template_name(const char* value, size_t size) {
  
  route_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.route_template_name)
}
inline ::std::string* Order::mutable_route_template_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.route_template_name)
  return route_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_route_template_name() {
  // @@protoc_insertion_point(field_release:pb.Order.route_template_name)
  
  return route_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_route_template_name(::std::string* route_template_name) {
  if (route_template_name != nullptr) {
    
  } else {
    
  }
  route_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_template_name);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.route_template_name)
}

// .pb.TradingAccountType trading_account_type = 51;
inline void Order::clear_trading_account_type() {
  trading_account_type_ = 0;
}
inline ::pb::TradingAccountType Order::trading_account_type() const {
  // @@protoc_insertion_point(field_get:pb.Order.trading_account_type)
  return static_cast< ::pb::TradingAccountType >(trading_account_type_);
}
inline void Order::set_trading_account_type(::pb::TradingAccountType value) {
  
  trading_account_type_ = value;
  // @@protoc_insertion_point(field_set:pb.Order.trading_account_type)
}

// string debug = 52;
inline void Order::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::debug() const {
  // @@protoc_insertion_point(field_get:pb.Order.debug)
  return debug_.GetNoArena();
}
inline void Order::set_debug(const ::std::string& value) {
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.debug)
}
#if LANG_CXX11
inline void Order::set_debug(::std::string&& value) {
  
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.debug)
}
#endif
inline void Order::set_debug(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.debug)
}
inline void Order::set_debug(const char* value, size_t size) {
  
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.debug)
}
inline ::std::string* Order::mutable_debug() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_debug() {
  // @@protoc_insertion_point(field_release:pb.Order.debug)
  
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_debug(::std::string* debug) {
  if (debug != nullptr) {
    
  } else {
    
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.debug)
}

// string user = 53;
inline void Order::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::user() const {
  // @@protoc_insertion_point(field_get:pb.Order.user)
  return user_.GetNoArena();
}
inline void Order::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Order.user)
}
#if LANG_CXX11
inline void Order::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Order.user)
}
#endif
inline void Order::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Order.user)
}
inline void Order::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Order.user)
}
inline ::std::string* Order::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.Order.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_user() {
  // @@protoc_insertion_point(field_release:pb.Order.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.Order.user)
}

// -------------------------------------------------------------------

// OrderList

// repeated .pb.Order list = 1;
inline int OrderList::list_size() const {
  return list_.size();
}
inline void OrderList::clear_list() {
  list_.Clear();
}
inline ::pb::Order* OrderList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OrderList.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Order >*
OrderList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrderList.list)
  return &list_;
}
inline const ::pb::Order& OrderList::list(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrderList.list)
  return list_.Get(index);
}
inline ::pb::Order* OrderList::add_list() {
  // @@protoc_insertion_point(field_add:pb.OrderList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Order >&
OrderList::list() const {
  // @@protoc_insertion_point(field_list:pb.OrderList.list)
  return list_;
}

// -------------------------------------------------------------------

// JointOrder

// .pb.Order local_order = 1;
inline bool JointOrder::has_local_order() const {
  return this != internal_default_instance() && local_order_ != nullptr;
}
inline void JointOrder::clear_local_order() {
  if (GetArenaNoVirtual() == nullptr && local_order_ != nullptr) {
    delete local_order_;
  }
  local_order_ = nullptr;
}
inline const ::pb::Order& JointOrder::local_order() const {
  const ::pb::Order* p = local_order_;
  // @@protoc_insertion_point(field_get:pb.JointOrder.local_order)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Order*>(
      &::pb::_Order_default_instance_);
}
inline ::pb::Order* JointOrder::release_local_order() {
  // @@protoc_insertion_point(field_release:pb.JointOrder.local_order)
  
  ::pb::Order* temp = local_order_;
  local_order_ = nullptr;
  return temp;
}
inline ::pb::Order* JointOrder::mutable_local_order() {
  
  if (local_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Order>(GetArenaNoVirtual());
    local_order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.JointOrder.local_order)
  return local_order_;
}
inline void JointOrder::set_allocated_local_order(::pb::Order* local_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_order_;
  }
  if (local_order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_order, submessage_arena);
    }
    
  } else {
    
  }
  local_order_ = local_order;
  // @@protoc_insertion_point(field_set_allocated:pb.JointOrder.local_order)
}

// .pb.Order exchange_order = 2;
inline bool JointOrder::has_exchange_order() const {
  return this != internal_default_instance() && exchange_order_ != nullptr;
}
inline void JointOrder::clear_exchange_order() {
  if (GetArenaNoVirtual() == nullptr && exchange_order_ != nullptr) {
    delete exchange_order_;
  }
  exchange_order_ = nullptr;
}
inline const ::pb::Order& JointOrder::exchange_order() const {
  const ::pb::Order* p = exchange_order_;
  // @@protoc_insertion_point(field_get:pb.JointOrder.exchange_order)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Order*>(
      &::pb::_Order_default_instance_);
}
inline ::pb::Order* JointOrder::release_exchange_order() {
  // @@protoc_insertion_point(field_release:pb.JointOrder.exchange_order)
  
  ::pb::Order* temp = exchange_order_;
  exchange_order_ = nullptr;
  return temp;
}
inline ::pb::Order* JointOrder::mutable_exchange_order() {
  
  if (exchange_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Order>(GetArenaNoVirtual());
    exchange_order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.JointOrder.exchange_order)
  return exchange_order_;
}
inline void JointOrder::set_allocated_exchange_order(::pb::Order* exchange_order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exchange_order_;
  }
  if (exchange_order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exchange_order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exchange_order, submessage_arena);
    }
    
  } else {
    
  }
  exchange_order_ = exchange_order;
  // @@protoc_insertion_point(field_set_allocated:pb.JointOrder.exchange_order)
}

// -------------------------------------------------------------------

// OrderLink

// .pb.Order local = 1;
inline bool OrderLink::has_local() const {
  return this != internal_default_instance() && local_ != nullptr;
}
inline void OrderLink::clear_local() {
  if (GetArenaNoVirtual() == nullptr && local_ != nullptr) {
    delete local_;
  }
  local_ = nullptr;
}
inline const ::pb::Order& OrderLink::local() const {
  const ::pb::Order* p = local_;
  // @@protoc_insertion_point(field_get:pb.OrderLink.local)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Order*>(
      &::pb::_Order_default_instance_);
}
inline ::pb::Order* OrderLink::release_local() {
  // @@protoc_insertion_point(field_release:pb.OrderLink.local)
  
  ::pb::Order* temp = local_;
  local_ = nullptr;
  return temp;
}
inline ::pb::Order* OrderLink::mutable_local() {
  
  if (local_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Order>(GetArenaNoVirtual());
    local_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OrderLink.local)
  return local_;
}
inline void OrderLink::set_allocated_local(::pb::Order* local) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_;
  }
  if (local) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    
  } else {
    
  }
  local_ = local;
  // @@protoc_insertion_point(field_set_allocated:pb.OrderLink.local)
}

// repeated .pb.Order upstream = 2;
inline int OrderLink::upstream_size() const {
  return upstream_.size();
}
inline void OrderLink::clear_upstream() {
  upstream_.Clear();
}
inline ::pb::Order* OrderLink::mutable_upstream(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OrderLink.upstream)
  return upstream_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Order >*
OrderLink::mutable_upstream() {
  // @@protoc_insertion_point(field_mutable_list:pb.OrderLink.upstream)
  return &upstream_;
}
inline const ::pb::Order& OrderLink::upstream(int index) const {
  // @@protoc_insertion_point(field_get:pb.OrderLink.upstream)
  return upstream_.Get(index);
}
inline ::pb::Order* OrderLink::add_upstream() {
  // @@protoc_insertion_point(field_add:pb.OrderLink.upstream)
  return upstream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Order >&
OrderLink::upstream() const {
  // @@protoc_insertion_point(field_list:pb.OrderLink.upstream)
  return upstream_;
}

// -------------------------------------------------------------------

// CancelOrderRequest

// string account = 1;
inline void CancelOrderRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrderRequest::account() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.account)
  return account_.GetNoArena();
}
inline void CancelOrderRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.account)
}
#if LANG_CXX11
inline void CancelOrderRequest::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CancelOrderRequest.account)
}
#endif
inline void CancelOrderRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CancelOrderRequest.account)
}
inline void CancelOrderRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CancelOrderRequest.account)
}
inline ::std::string* CancelOrderRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrderRequest::release_account() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.account)
}

// .pb.OrderID order_id = 2;
inline bool CancelOrderRequest::has_order_id() const {
  return this != internal_default_instance() && order_id_ != nullptr;
}
inline void CancelOrderRequest::clear_order_id() {
  if (GetArenaNoVirtual() == nullptr && order_id_ != nullptr) {
    delete order_id_;
  }
  order_id_ = nullptr;
}
inline const ::pb::OrderID& CancelOrderRequest::order_id() const {
  const ::pb::OrderID* p = order_id_;
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.order_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* CancelOrderRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.order_id)
  
  ::pb::OrderID* temp = order_id_;
  order_id_ = nullptr;
  return temp;
}
inline ::pb::OrderID* CancelOrderRequest::mutable_order_id() {
  
  if (order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    order_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.order_id)
  return order_id_;
}
inline void CancelOrderRequest::set_allocated_order_id(::pb::OrderID* order_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_id_;
  }
  if (order_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    
  } else {
    
  }
  order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.order_id)
}

// .pb.Symbol symbol = 3;
inline bool CancelOrderRequest::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& CancelOrderRequest::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* CancelOrderRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* CancelOrderRequest::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.symbol)
  return symbol_;
}
inline void CancelOrderRequest::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.symbol)
}

// int32 request_id = 4;
inline void CancelOrderRequest::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 CancelOrderRequest::request_id() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.request_id)
  return request_id_;
}
inline void CancelOrderRequest::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.request_id)
}

// int32 front_id = 5;
inline void CancelOrderRequest::clear_front_id() {
  front_id_ = 0;
}
inline ::google::protobuf::int32 CancelOrderRequest::front_id() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.front_id)
  return front_id_;
}
inline void CancelOrderRequest::set_front_id(::google::protobuf::int32 value) {
  
  front_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.front_id)
}

// int32 session_id = 6;
inline void CancelOrderRequest::clear_session_id() {
  session_id_ = 0;
}
inline ::google::protobuf::int32 CancelOrderRequest::session_id() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.session_id)
  return session_id_;
}
inline void CancelOrderRequest::set_session_id(::google::protobuf::int32 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.session_id)
}

// string exchange_order_id = 7;
inline void CancelOrderRequest::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrderRequest::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void CancelOrderRequest::set_exchange_order_id(const ::std::string& value) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.exchange_order_id)
}
#if LANG_CXX11
inline void CancelOrderRequest::set_exchange_order_id(::std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CancelOrderRequest.exchange_order_id)
}
#endif
inline void CancelOrderRequest::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CancelOrderRequest.exchange_order_id)
}
inline void CancelOrderRequest::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CancelOrderRequest.exchange_order_id)
}
inline ::std::string* CancelOrderRequest::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrderRequest::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_exchange_order_id(::std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.exchange_order_id)
}

// string token = 8;
inline void CancelOrderRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrderRequest::token() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.token)
  return token_.GetNoArena();
}
inline void CancelOrderRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.token)
}
#if LANG_CXX11
inline void CancelOrderRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CancelOrderRequest.token)
}
#endif
inline void CancelOrderRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CancelOrderRequest.token)
}
inline void CancelOrderRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CancelOrderRequest.token)
}
inline ::std::string* CancelOrderRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrderRequest::release_token() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.token)
}

// string route_account = 9;
inline void CancelOrderRequest::clear_route_account() {
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrderRequest::route_account() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.route_account)
  return route_account_.GetNoArena();
}
inline void CancelOrderRequest::set_route_account(const ::std::string& value) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.route_account)
}
#if LANG_CXX11
inline void CancelOrderRequest::set_route_account(::std::string&& value) {
  
  route_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CancelOrderRequest.route_account)
}
#endif
inline void CancelOrderRequest::set_route_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CancelOrderRequest.route_account)
}
inline void CancelOrderRequest::set_route_account(const char* value, size_t size) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CancelOrderRequest.route_account)
}
inline ::std::string* CancelOrderRequest::mutable_route_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.route_account)
  return route_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrderRequest::release_route_account() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.route_account)
  
  return route_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_route_account(::std::string* route_account) {
  if (route_account != nullptr) {
    
  } else {
    
  }
  route_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_account);
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.route_account)
}

// int32 settlement_group = 10;
inline void CancelOrderRequest::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::google::protobuf::int32 CancelOrderRequest::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.settlement_group)
  return settlement_group_;
}
inline void CancelOrderRequest::set_settlement_group(::google::protobuf::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.settlement_group)
}

// int64 company = 11;
inline void CancelOrderRequest::clear_company() {
  company_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 CancelOrderRequest::company() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.company)
  return company_;
}
inline void CancelOrderRequest::set_company(::google::protobuf::int64 value) {
  
  company_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.company)
}

// int64 send_time = 12;
inline void CancelOrderRequest::clear_send_time() {
  send_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 CancelOrderRequest::send_time() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.send_time)
  return send_time_;
}
inline void CancelOrderRequest::set_send_time(::google::protobuf::int64 value) {
  
  send_time_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.send_time)
}

// .pb.TradingAccountType user_type = 13;
inline void CancelOrderRequest::clear_user_type() {
  user_type_ = 0;
}
inline ::pb::TradingAccountType CancelOrderRequest::user_type() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.user_type)
  return static_cast< ::pb::TradingAccountType >(user_type_);
}
inline void CancelOrderRequest::set_user_type(::pb::TradingAccountType value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.user_type)
}

// string user = 15;
inline void CancelOrderRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrderRequest::user() const {
  // @@protoc_insertion_point(field_get:pb.CancelOrderRequest.user)
  return user_.GetNoArena();
}
inline void CancelOrderRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.CancelOrderRequest.user)
}
#if LANG_CXX11
inline void CancelOrderRequest::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.CancelOrderRequest.user)
}
#endif
inline void CancelOrderRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.CancelOrderRequest.user)
}
inline void CancelOrderRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.CancelOrderRequest.user)
}
inline ::std::string* CancelOrderRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.CancelOrderRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrderRequest::release_user() {
  // @@protoc_insertion_point(field_release:pb.CancelOrderRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.CancelOrderRequest.user)
}

// -------------------------------------------------------------------

// OnRtnCancelOrder

// string account = 1;
inline void OnRtnCancelOrder::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnRtnCancelOrder::account() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.account)
  return account_.GetNoArena();
}
inline void OnRtnCancelOrder::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.account)
}
#if LANG_CXX11
inline void OnRtnCancelOrder::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OnRtnCancelOrder.account)
}
#endif
inline void OnRtnCancelOrder::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OnRtnCancelOrder.account)
}
inline void OnRtnCancelOrder::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OnRtnCancelOrder.account)
}
inline ::std::string* OnRtnCancelOrder::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnRtnCancelOrder::release_account() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnRtnCancelOrder::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.account)
}

// .pb.OrderID OrderID = 2;
inline bool OnRtnCancelOrder::has_orderid() const {
  return this != internal_default_instance() && orderid_ != nullptr;
}
inline void OnRtnCancelOrder::clear_orderid() {
  if (GetArenaNoVirtual() == nullptr && orderid_ != nullptr) {
    delete orderid_;
  }
  orderid_ = nullptr;
}
inline const ::pb::OrderID& OnRtnCancelOrder::orderid() const {
  const ::pb::OrderID* p = orderid_;
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.OrderID)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::OrderID*>(
      &::pb::_OrderID_default_instance_);
}
inline ::pb::OrderID* OnRtnCancelOrder::release_orderid() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.OrderID)
  
  ::pb::OrderID* temp = orderid_;
  orderid_ = nullptr;
  return temp;
}
inline ::pb::OrderID* OnRtnCancelOrder::mutable_orderid() {
  
  if (orderid_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::OrderID>(GetArenaNoVirtual());
    orderid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.OrderID)
  return orderid_;
}
inline void OnRtnCancelOrder::set_allocated_orderid(::pb::OrderID* orderid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orderid_;
  }
  if (orderid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orderid, submessage_arena);
    }
    
  } else {
    
  }
  orderid_ = orderid;
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.OrderID)
}

// string exchange_order_id = 3;
inline void OnRtnCancelOrder::clear_exchange_order_id() {
  exchange_order_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnRtnCancelOrder::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.exchange_order_id)
  return exchange_order_id_.GetNoArena();
}
inline void OnRtnCancelOrder::set_exchange_order_id(const ::std::string& value) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.exchange_order_id)
}
#if LANG_CXX11
inline void OnRtnCancelOrder::set_exchange_order_id(::std::string&& value) {
  
  exchange_order_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OnRtnCancelOrder.exchange_order_id)
}
#endif
inline void OnRtnCancelOrder::set_exchange_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OnRtnCancelOrder.exchange_order_id)
}
inline void OnRtnCancelOrder::set_exchange_order_id(const char* value, size_t size) {
  
  exchange_order_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OnRtnCancelOrder.exchange_order_id)
}
inline ::std::string* OnRtnCancelOrder::mutable_exchange_order_id() {
  
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.exchange_order_id)
  return exchange_order_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnRtnCancelOrder::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.exchange_order_id)
  
  return exchange_order_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnRtnCancelOrder::set_allocated_exchange_order_id(::std::string* exchange_order_id) {
  if (exchange_order_id != nullptr) {
    
  } else {
    
  }
  exchange_order_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange_order_id);
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.exchange_order_id)
}

// .pb.Symbol symbol = 4;
inline bool OnRtnCancelOrder::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& OnRtnCancelOrder::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* OnRtnCancelOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* OnRtnCancelOrder::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.symbol)
  return symbol_;
}
inline void OnRtnCancelOrder::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.symbol)
}

// int32 request_id = 5;
inline void OnRtnCancelOrder::clear_request_id() {
  request_id_ = 0;
}
inline ::google::protobuf::int32 OnRtnCancelOrder::request_id() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.request_id)
  return request_id_;
}
inline void OnRtnCancelOrder::set_request_id(::google::protobuf::int32 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.request_id)
}

// int32 error_type = 6;
inline void OnRtnCancelOrder::clear_error_type() {
  error_type_ = 0;
}
inline ::google::protobuf::int32 OnRtnCancelOrder::error_type() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.error_type)
  return error_type_;
}
inline void OnRtnCancelOrder::set_error_type(::google::protobuf::int32 value) {
  
  error_type_ = value;
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.error_type)
}

// int32 error = 7;
inline void OnRtnCancelOrder::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 OnRtnCancelOrder::error() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.error)
  return error_;
}
inline void OnRtnCancelOrder::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.error)
}

// string msg = 8;
inline void OnRtnCancelOrder::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnRtnCancelOrder::msg() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.msg)
  return msg_.GetNoArena();
}
inline void OnRtnCancelOrder::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.msg)
}
#if LANG_CXX11
inline void OnRtnCancelOrder::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OnRtnCancelOrder.msg)
}
#endif
inline void OnRtnCancelOrder::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OnRtnCancelOrder.msg)
}
inline void OnRtnCancelOrder::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OnRtnCancelOrder.msg)
}
inline ::std::string* OnRtnCancelOrder::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnRtnCancelOrder::release_msg() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnRtnCancelOrder::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.msg)
}

// string route_account = 9;
inline void OnRtnCancelOrder::clear_route_account() {
  route_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnRtnCancelOrder::route_account() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.route_account)
  return route_account_.GetNoArena();
}
inline void OnRtnCancelOrder::set_route_account(const ::std::string& value) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.route_account)
}
#if LANG_CXX11
inline void OnRtnCancelOrder::set_route_account(::std::string&& value) {
  
  route_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OnRtnCancelOrder.route_account)
}
#endif
inline void OnRtnCancelOrder::set_route_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OnRtnCancelOrder.route_account)
}
inline void OnRtnCancelOrder::set_route_account(const char* value, size_t size) {
  
  route_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OnRtnCancelOrder.route_account)
}
inline ::std::string* OnRtnCancelOrder::mutable_route_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.route_account)
  return route_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnRtnCancelOrder::release_route_account() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.route_account)
  
  return route_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnRtnCancelOrder::set_allocated_route_account(::std::string* route_account) {
  if (route_account != nullptr) {
    
  } else {
    
  }
  route_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route_account);
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.route_account)
}

// bool upstream_not_found = 10;
inline void OnRtnCancelOrder::clear_upstream_not_found() {
  upstream_not_found_ = false;
}
inline bool OnRtnCancelOrder::upstream_not_found() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.upstream_not_found)
  return upstream_not_found_;
}
inline void OnRtnCancelOrder::set_upstream_not_found(bool value) {
  
  upstream_not_found_ = value;
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.upstream_not_found)
}

// string user = 70;
inline void OnRtnCancelOrder::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnRtnCancelOrder::user() const {
  // @@protoc_insertion_point(field_get:pb.OnRtnCancelOrder.user)
  return user_.GetNoArena();
}
inline void OnRtnCancelOrder::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OnRtnCancelOrder.user)
}
#if LANG_CXX11
inline void OnRtnCancelOrder::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OnRtnCancelOrder.user)
}
#endif
inline void OnRtnCancelOrder::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OnRtnCancelOrder.user)
}
inline void OnRtnCancelOrder::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OnRtnCancelOrder.user)
}
inline ::std::string* OnRtnCancelOrder::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.OnRtnCancelOrder.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnRtnCancelOrder::release_user() {
  // @@protoc_insertion_point(field_release:pb.OnRtnCancelOrder.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnRtnCancelOrder::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.OnRtnCancelOrder.user)
}

// -------------------------------------------------------------------

// ConditionOrder

// int64 id = 1;
inline void ConditionOrder::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ConditionOrder::id() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.id)
  return id_;
}
inline void ConditionOrder::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.id)
}

// string account = 2;
inline void ConditionOrder::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::account() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.account)
  return account_.GetNoArena();
}
inline void ConditionOrder::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.account)
}
#if LANG_CXX11
inline void ConditionOrder::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.account)
}
#endif
inline void ConditionOrder::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.account)
}
inline void ConditionOrder::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.account)
}
inline ::std::string* ConditionOrder::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_account() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.account)
}

// .pb.Symbol symbol = 3;
inline bool ConditionOrder::has_symbol() const {
  return this != internal_default_instance() && symbol_ != nullptr;
}
inline const ::pb::Symbol& ConditionOrder::symbol() const {
  const ::pb::Symbol* p = symbol_;
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.symbol)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Symbol*>(
      &::pb::_Symbol_default_instance_);
}
inline ::pb::Symbol* ConditionOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.symbol)
  
  ::pb::Symbol* temp = symbol_;
  symbol_ = nullptr;
  return temp;
}
inline ::pb::Symbol* ConditionOrder::mutable_symbol() {
  
  if (symbol_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Symbol>(GetArenaNoVirtual());
    symbol_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.symbol)
  return symbol_;
}
inline void ConditionOrder::set_allocated_symbol(::pb::Symbol* symbol) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(symbol_);
  }
  if (symbol) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      symbol = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbol, submessage_arena);
    }
    
  } else {
    
  }
  symbol_ = symbol;
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.symbol)
}

// .pb.OrderDirection position_direction = 4;
inline void ConditionOrder::clear_position_direction() {
  position_direction_ = 0;
}
inline ::pb::OrderDirection ConditionOrder::position_direction() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.position_direction)
  return static_cast< ::pb::OrderDirection >(position_direction_);
}
inline void ConditionOrder::set_position_direction(::pb::OrderDirection value) {
  
  position_direction_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.position_direction)
}

// .pb.OrderDirection direction = 5;
inline void ConditionOrder::clear_direction() {
  direction_ = 0;
}
inline ::pb::OrderDirection ConditionOrder::direction() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.direction)
  return static_cast< ::pb::OrderDirection >(direction_);
}
inline void ConditionOrder::set_direction(::pb::OrderDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.direction)
}

// .pb.OffsetFlag offset_flag = 6;
inline void ConditionOrder::clear_offset_flag() {
  offset_flag_ = 0;
}
inline ::pb::OffsetFlag ConditionOrder::offset_flag() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.offset_flag)
  return static_cast< ::pb::OffsetFlag >(offset_flag_);
}
inline void ConditionOrder::set_offset_flag(::pb::OffsetFlag value) {
  
  offset_flag_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.offset_flag)
}

// string symbol_name = 7;
inline void ConditionOrder::clear_symbol_name() {
  symbol_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::symbol_name() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.symbol_name)
  return symbol_name_.GetNoArena();
}
inline void ConditionOrder::set_symbol_name(const ::std::string& value) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.symbol_name)
}
#if LANG_CXX11
inline void ConditionOrder::set_symbol_name(::std::string&& value) {
  
  symbol_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.symbol_name)
}
#endif
inline void ConditionOrder::set_symbol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.symbol_name)
}
inline void ConditionOrder::set_symbol_name(const char* value, size_t size) {
  
  symbol_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.symbol_name)
}
inline ::std::string* ConditionOrder::mutable_symbol_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.symbol_name)
  return symbol_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_symbol_name() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.symbol_name)
  
  return symbol_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name != nullptr) {
    
  } else {
    
  }
  symbol_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol_name);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.symbol_name)
}

// int32 volume_multiple = 8;
inline void ConditionOrder::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::google::protobuf::int32 ConditionOrder::volume_multiple() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.volume_multiple)
  return volume_multiple_;
}
inline void ConditionOrder::set_volume_multiple(::google::protobuf::int32 value) {
  
  volume_multiple_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.volume_multiple)
}

// .pb.ProductID product_id = 9;
inline bool ConditionOrder::has_product_id() const {
  return this != internal_default_instance() && product_id_ != nullptr;
}
inline const ::pb::ProductID& ConditionOrder::product_id() const {
  const ::pb::ProductID* p = product_id_;
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.product_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::ProductID*>(
      &::pb::_ProductID_default_instance_);
}
inline ::pb::ProductID* ConditionOrder::release_product_id() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.product_id)
  
  ::pb::ProductID* temp = product_id_;
  product_id_ = nullptr;
  return temp;
}
inline ::pb::ProductID* ConditionOrder::mutable_product_id() {
  
  if (product_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::ProductID>(GetArenaNoVirtual());
    product_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.product_id)
  return product_id_;
}
inline void ConditionOrder::set_allocated_product_id(::pb::ProductID* product_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(product_id_);
  }
  if (product_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      product_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, product_id, submessage_arena);
    }
    
  } else {
    
  }
  product_id_ = product_id;
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.product_id)
}

// double price_tick = 10;
inline void ConditionOrder::clear_price_tick() {
  price_tick_ = 0;
}
inline double ConditionOrder::price_tick() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.price_tick)
  return price_tick_;
}
inline void ConditionOrder::set_price_tick(double value) {
  
  price_tick_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.price_tick)
}

// bool triggered = 11;
inline void ConditionOrder::clear_triggered() {
  triggered_ = false;
}
inline bool ConditionOrder::triggered() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.triggered)
  return triggered_;
}
inline void ConditionOrder::set_triggered(bool value) {
  
  triggered_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.triggered)
}

// int64 triggered_time = 12;
inline void ConditionOrder::clear_triggered_time() {
  triggered_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ConditionOrder::triggered_time() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.triggered_time)
  return triggered_time_;
}
inline void ConditionOrder::set_triggered_time(::google::protobuf::int64 value) {
  
  triggered_time_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.triggered_time)
}

// double volume = 13;
inline void ConditionOrder::clear_volume() {
  volume_ = 0;
}
inline double ConditionOrder::volume() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.volume)
  return volume_;
}
inline void ConditionOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.volume)
}

// double price = 14;
inline void ConditionOrder::clear_price() {
  price_ = 0;
}
inline double ConditionOrder::price() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.price)
  return price_;
}
inline void ConditionOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.price)
}

// double trigger_condition_price = 15;
inline void ConditionOrder::clear_trigger_condition_price() {
  trigger_condition_price_ = 0;
}
inline double ConditionOrder::trigger_condition_price() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.trigger_condition_price)
  return trigger_condition_price_;
}
inline void ConditionOrder::set_trigger_condition_price(double value) {
  
  trigger_condition_price_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.trigger_condition_price)
}

// .pb.ConditionOrderTriggerPriceType trigger_price_type = 16;
inline void ConditionOrder::clear_trigger_price_type() {
  trigger_price_type_ = 0;
}
inline ::pb::ConditionOrderTriggerPriceType ConditionOrder::trigger_price_type() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.trigger_price_type)
  return static_cast< ::pb::ConditionOrderTriggerPriceType >(trigger_price_type_);
}
inline void ConditionOrder::set_trigger_price_type(::pb::ConditionOrderTriggerPriceType value) {
  
  trigger_price_type_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.trigger_price_type)
}

// .pb.ConditionOrderTriggerType trigger_type = 17;
inline void ConditionOrder::clear_trigger_type() {
  trigger_type_ = 0;
}
inline ::pb::ConditionOrderTriggerType ConditionOrder::trigger_type() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.trigger_type)
  return static_cast< ::pb::ConditionOrderTriggerType >(trigger_type_);
}
inline void ConditionOrder::set_trigger_type(::pb::ConditionOrderTriggerType value) {
  
  trigger_type_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.trigger_type)
}

// .pb.SendOrderPriceType send_order_price_type = 18;
inline void ConditionOrder::clear_send_order_price_type() {
  send_order_price_type_ = 0;
}
inline ::pb::SendOrderPriceType ConditionOrder::send_order_price_type() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.send_order_price_type)
  return static_cast< ::pb::SendOrderPriceType >(send_order_price_type_);
}
inline void ConditionOrder::set_send_order_price_type(::pb::SendOrderPriceType value) {
  
  send_order_price_type_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.send_order_price_type)
}

// string send_result = 19;
inline void ConditionOrder::clear_send_result() {
  send_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::send_result() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.send_result)
  return send_result_.GetNoArena();
}
inline void ConditionOrder::set_send_result(const ::std::string& value) {
  
  send_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.send_result)
}
#if LANG_CXX11
inline void ConditionOrder::set_send_result(::std::string&& value) {
  
  send_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.send_result)
}
#endif
inline void ConditionOrder::set_send_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  send_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.send_result)
}
inline void ConditionOrder::set_send_result(const char* value, size_t size) {
  
  send_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.send_result)
}
inline ::std::string* ConditionOrder::mutable_send_result() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.send_result)
  return send_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_send_result() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.send_result)
  
  return send_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_send_result(::std::string* send_result) {
  if (send_result != nullptr) {
    
  } else {
    
  }
  send_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_result);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.send_result)
}

// int64 create_time = 20;
inline void ConditionOrder::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ConditionOrder::create_time() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.create_time)
  return create_time_;
}
inline void ConditionOrder::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.create_time)
}

// string tag = 21;
inline void ConditionOrder::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::tag() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.tag)
  return tag_.GetNoArena();
}
inline void ConditionOrder::set_tag(const ::std::string& value) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.tag)
}
#if LANG_CXX11
inline void ConditionOrder::set_tag(::std::string&& value) {
  
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.tag)
}
#endif
inline void ConditionOrder::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.tag)
}
inline void ConditionOrder::set_tag(const char* value, size_t size) {
  
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.tag)
}
inline ::std::string* ConditionOrder::mutable_tag() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_tag() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.tag)
  
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_tag(::std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.tag)
}

// int64 deadline = 22;
inline void ConditionOrder::clear_deadline() {
  deadline_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ConditionOrder::deadline() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.deadline)
  return deadline_;
}
inline void ConditionOrder::set_deadline(::google::protobuf::int64 value) {
  
  deadline_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.deadline)
}

// int32 settlement_group = 23;
inline void ConditionOrder::clear_settlement_group() {
  settlement_group_ = 0;
}
inline ::google::protobuf::int32 ConditionOrder::settlement_group() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.settlement_group)
  return settlement_group_;
}
inline void ConditionOrder::set_settlement_group(::google::protobuf::int32 value) {
  
  settlement_group_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.settlement_group)
}

// bool stop_loss = 24;
inline void ConditionOrder::clear_stop_loss() {
  stop_loss_ = false;
}
inline bool ConditionOrder::stop_loss() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.stop_loss)
  return stop_loss_;
}
inline void ConditionOrder::set_stop_loss(bool value) {
  
  stop_loss_ = value;
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.stop_loss)
}

// string ip = 25;
inline void ConditionOrder::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::ip() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.ip)
  return ip_.GetNoArena();
}
inline void ConditionOrder::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.ip)
}
#if LANG_CXX11
inline void ConditionOrder::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.ip)
}
#endif
inline void ConditionOrder::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.ip)
}
inline void ConditionOrder::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.ip)
}
inline ::std::string* ConditionOrder::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_ip() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.ip)
}

// string mac = 26;
inline void ConditionOrder::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::mac() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.mac)
  return mac_.GetNoArena();
}
inline void ConditionOrder::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.mac)
}
#if LANG_CXX11
inline void ConditionOrder::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.mac)
}
#endif
inline void ConditionOrder::set_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.mac)
}
inline void ConditionOrder::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.mac)
}
inline ::std::string* ConditionOrder::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_mac() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_mac(::std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.mac)
}

// string user_name = 27;
inline void ConditionOrder::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::user_name() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.user_name)
  return user_name_.GetNoArena();
}
inline void ConditionOrder::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.user_name)
}
#if LANG_CXX11
inline void ConditionOrder::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.user_name)
}
#endif
inline void ConditionOrder::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.user_name)
}
inline void ConditionOrder::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.user_name)
}
inline ::std::string* ConditionOrder::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_user_name() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_user_name(::std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.user_name)
}

// string user = 70;
inline void ConditionOrder::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConditionOrder::user() const {
  // @@protoc_insertion_point(field_get:pb.ConditionOrder.user)
  return user_.GetNoArena();
}
inline void ConditionOrder::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ConditionOrder.user)
}
#if LANG_CXX11
inline void ConditionOrder::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ConditionOrder.user)
}
#endif
inline void ConditionOrder::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ConditionOrder.user)
}
inline void ConditionOrder::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ConditionOrder.user)
}
inline ::std::string* ConditionOrder::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:pb.ConditionOrder.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConditionOrder::release_user() {
  // @@protoc_insertion_point(field_release:pb.ConditionOrder.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionOrder::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:pb.ConditionOrder.user)
}

// -------------------------------------------------------------------

// TradeCmd

// .pb.TradeCmdType type = 1;
inline void TradeCmd::clear_type() {
  type_ = 0;
}
inline ::pb::TradeCmdType TradeCmd::type() const {
  // @@protoc_insertion_point(field_get:pb.TradeCmd.type)
  return static_cast< ::pb::TradeCmdType >(type_);
}
inline void TradeCmd::set_type(::pb::TradeCmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeCmd.type)
}

// bytes data = 2;
inline void TradeCmd::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeCmd::data() const {
  // @@protoc_insertion_point(field_get:pb.TradeCmd.data)
  return data_.GetNoArena();
}
inline void TradeCmd::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.TradeCmd.data)
}
#if LANG_CXX11
inline void TradeCmd::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.TradeCmd.data)
}
#endif
inline void TradeCmd::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.TradeCmd.data)
}
inline void TradeCmd::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.TradeCmd.data)
}
inline ::std::string* TradeCmd::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:pb.TradeCmd.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeCmd::release_data() {
  // @@protoc_insertion_point(field_release:pb.TradeCmd.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeCmd::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:pb.TradeCmd.data)
}

// int64 node_id = 3;
inline void TradeCmd::clear_node_id() {
  node_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TradeCmd::node_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeCmd.node_id)
  return node_id_;
}
inline void TradeCmd::set_node_id(::google::protobuf::int64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeCmd.node_id)
}

// int64 request_id = 4;
inline void TradeCmd::clear_request_id() {
  request_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 TradeCmd::request_id() const {
  // @@protoc_insertion_point(field_get:pb.TradeCmd.request_id)
  return request_id_;
}
inline void TradeCmd::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:pb.TradeCmd.request_id)
}

// -------------------------------------------------------------------

// DemoOrder

// .pb.Order order = 1;
inline bool DemoOrder::has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline void DemoOrder::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::pb::Order& DemoOrder::order() const {
  const ::pb::Order* p = order_;
  // @@protoc_insertion_point(field_get:pb.DemoOrder.order)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::Order*>(
      &::pb::_Order_default_instance_);
}
inline ::pb::Order* DemoOrder::release_order() {
  // @@protoc_insertion_point(field_release:pb.DemoOrder.order)
  
  ::pb::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::pb::Order* DemoOrder::mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.DemoOrder.order)
  return order_;
}
inline void DemoOrder::set_allocated_order(::pb::Order* order) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:pb.DemoOrder.order)
}

// double upper_limit_price = 2;
inline void DemoOrder::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double DemoOrder::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.DemoOrder.upper_limit_price)
  return upper_limit_price_;
}
inline void DemoOrder::set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.DemoOrder.upper_limit_price)
}

// double lower_limit_price = 3;
inline void DemoOrder::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double DemoOrder::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:pb.DemoOrder.lower_limit_price)
  return lower_limit_price_;
}
inline void DemoOrder::set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
  // @@protoc_insertion_point(field_set:pb.DemoOrder.lower_limit_price)
}

// int32 min_limit_order_volume = 4;
inline void DemoOrder::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline ::google::protobuf::int32 DemoOrder::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.DemoOrder.min_limit_order_volume)
  return min_limit_order_volume_;
}
inline void DemoOrder::set_min_limit_order_volume(::google::protobuf::int32 value) {
  
  min_limit_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.DemoOrder.min_limit_order_volume)
}

// int32 min_market_order_volume = 5;
inline void DemoOrder::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline ::google::protobuf::int32 DemoOrder::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:pb.DemoOrder.min_market_order_volume)
  return min_market_order_volume_;
}
inline void DemoOrder::set_min_market_order_volume(::google::protobuf::int32 value) {
  
  min_market_order_volume_ = value;
  // @@protoc_insertion_point(field_set:pb.DemoOrder.min_market_order_volume)
}

// .pb.MarketTimeRule time_rule = 6;
inline bool DemoOrder::has_time_rule() const {
  return this != internal_default_instance() && time_rule_ != nullptr;
}
inline const ::pb::MarketTimeRule& DemoOrder::time_rule() const {
  const ::pb::MarketTimeRule* p = time_rule_;
  // @@protoc_insertion_point(field_get:pb.DemoOrder.time_rule)
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::MarketTimeRule*>(
      &::pb::_MarketTimeRule_default_instance_);
}
inline ::pb::MarketTimeRule* DemoOrder::release_time_rule() {
  // @@protoc_insertion_point(field_release:pb.DemoOrder.time_rule)
  
  ::pb::MarketTimeRule* temp = time_rule_;
  time_rule_ = nullptr;
  return temp;
}
inline ::pb::MarketTimeRule* DemoOrder::mutable_time_rule() {
  
  if (time_rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::MarketTimeRule>(GetArenaNoVirtual());
    time_rule_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.DemoOrder.time_rule)
  return time_rule_;
}
inline void DemoOrder::set_allocated_time_rule(::pb::MarketTimeRule* time_rule) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(time_rule_);
  }
  if (time_rule) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_rule = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time_rule, submessage_arena);
    }
    
  } else {
    
  }
  time_rule_ = time_rule;
  // @@protoc_insertion_point(field_set_allocated:pb.DemoOrder.time_rule)
}

// int32 update_trading_day = 7;
inline void DemoOrder::clear_update_trading_day() {
  update_trading_day_ = 0;
}
inline ::google::protobuf::int32 DemoOrder::update_trading_day() const {
  // @@protoc_insertion_point(field_get:pb.DemoOrder.update_trading_day)
  return update_trading_day_;
}
inline void DemoOrder::set_update_trading_day(::google::protobuf::int32 value) {
  
  update_trading_day_ = value;
  // @@protoc_insertion_point(field_set:pb.DemoOrder.update_trading_day)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::OrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OrderStatus>() {
  return ::pb::OrderStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::OrderPriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OrderPriceType>() {
  return ::pb::OrderPriceType_descriptor();
}
template <> struct is_proto_enum< ::pb::OffsetFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OffsetFlag>() {
  return ::pb::OffsetFlag_descriptor();
}
template <> struct is_proto_enum< ::pb::OrderDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OrderDirection>() {
  return ::pb::OrderDirection_descriptor();
}
template <> struct is_proto_enum< ::pb::ForceCloseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ForceCloseType>() {
  return ::pb::ForceCloseType_descriptor();
}
template <> struct is_proto_enum< ::pb::OrderSourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::OrderSourceType>() {
  return ::pb::OrderSourceType_descriptor();
}
template <> struct is_proto_enum< ::pb::ConditionOrderTriggerPriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ConditionOrderTriggerPriceType>() {
  return ::pb::ConditionOrderTriggerPriceType_descriptor();
}
template <> struct is_proto_enum< ::pb::ConditionOrderTriggerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ConditionOrderTriggerType>() {
  return ::pb::ConditionOrderTriggerType_descriptor();
}
template <> struct is_proto_enum< ::pb::SendOrderPriceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SendOrderPriceType>() {
  return ::pb::SendOrderPriceType_descriptor();
}
template <> struct is_proto_enum< ::pb::TradeCmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TradeCmdType>() {
  return ::pb::TradeCmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_order_2eproto
